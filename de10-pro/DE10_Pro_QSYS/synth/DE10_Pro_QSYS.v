// DE10_Pro_QSYS.v

// Generated using ACDS version 19.2 57

`timescale 1 ps / 1 ps
module DE10_Pro_QSYS (
		inout  wire         powerreader_0_power_i2c_export_sda,                  //                  powerreader_0_power_i2c.export_sda
		inout  wire         powerreader_0_power_i2c_export_scl,                  //                                         .export_scl
		inout  wire         tempreader_0_i2c_signals_scl,                        //                 tempreader_0_i2c_signals.scl
		inout  wire         tempreader_0_i2c_signals_sda,                        //                                         .sda
		input  wire         alt_e100s10_0_status_clk_status,                     //                     alt_e100s10_0_status.clk_status
		input  wire         alt_e100s10_0_status_status_write,                   //                                         .status_write
		input  wire         alt_e100s10_0_status_status_read,                    //                                         .status_read
		input  wire [15:0]  alt_e100s10_0_status_status_addr,                    //                                         .status_addr
		input  wire [31:0]  alt_e100s10_0_status_status_writedata,               //                                         .status_writedata
		output wire [31:0]  alt_e100s10_0_status_status_readdata,                //                                         .status_readdata
		output wire         alt_e100s10_0_status_status_readdata_valid,          //                                         .status_readdata_valid
		output wire         alt_e100s10_0_status_status_waitrequest,             //                                         .status_waitrequest
		output wire         alt_e100s10_0_avalon_st_tx_clk_txmac,                //               alt_e100s10_0_avalon_st_tx.clk_txmac
		input  wire         alt_e100s10_0_avalon_st_tx_l8_tx_startofpacket,      //                                         .l8_tx_startofpacket
		input  wire         alt_e100s10_0_avalon_st_tx_l8_tx_endofpacket,        //                                         .l8_tx_endofpacket
		input  wire         alt_e100s10_0_avalon_st_tx_l8_tx_valid,              //                                         .l8_tx_valid
		output wire         alt_e100s10_0_avalon_st_tx_l8_tx_ready,              //                                         .l8_tx_ready
		input  wire         alt_e100s10_0_avalon_st_tx_l8_tx_error,              //                                         .l8_tx_error
		input  wire [5:0]   alt_e100s10_0_avalon_st_tx_l8_tx_empty,              //                                         .l8_tx_empty
		input  wire [511:0] alt_e100s10_0_avalon_st_tx_l8_tx_data,               //                                         .l8_tx_data
		output wire         alt_e100s10_0_avalon_st_rx_clk_rxmac,                //               alt_e100s10_0_avalon_st_rx.clk_rxmac
		output wire [5:0]   alt_e100s10_0_avalon_st_rx_l8_rx_error,              //                                         .l8_rx_error
		output wire         alt_e100s10_0_avalon_st_rx_l8_rx_valid,              //                                         .l8_rx_valid
		output wire         alt_e100s10_0_avalon_st_rx_l8_rx_startofpacket,      //                                         .l8_rx_startofpacket
		output wire         alt_e100s10_0_avalon_st_rx_l8_rx_endofpacket,        //                                         .l8_rx_endofpacket
		output wire [5:0]   alt_e100s10_0_avalon_st_rx_l8_rx_empty,              //                                         .l8_rx_empty
		output wire [511:0] alt_e100s10_0_avalon_st_rx_l8_rx_data,               //                                         .l8_rx_data
		output wire [3:0]   alt_e100s10_0_serial_lanes_tx_serial,                //               alt_e100s10_0_serial_lanes.tx_serial
		input  wire [3:0]   alt_e100s10_0_serial_lanes_rx_serial,                //                                         .rx_serial
		input  wire         alt_e100s10_0_reconfig_reconfig_clk,                 //                   alt_e100s10_0_reconfig.reconfig_clk
		input  wire         alt_e100s10_0_reconfig_reconfig_reset,               //                                         .reconfig_reset
		input  wire         alt_e100s10_0_reconfig_reconfig_write,               //                                         .reconfig_write
		input  wire         alt_e100s10_0_reconfig_reconfig_read,                //                                         .reconfig_read
		input  wire [12:0]  alt_e100s10_0_reconfig_reconfig_address,             //                                         .reconfig_address
		input  wire [31:0]  alt_e100s10_0_reconfig_reconfig_writedata,           //                                         .reconfig_writedata
		output wire [31:0]  alt_e100s10_0_reconfig_reconfig_readdata,            //                                         .reconfig_readdata
		output wire         alt_e100s10_0_reconfig_reconfig_waitrequest,         //                                         .reconfig_waitrequest
		output wire         alt_e100s10_0_other_tx_lanes_stable,                 //                      alt_e100s10_0_other.tx_lanes_stable
		output wire         alt_e100s10_0_other_rx_pcs_ready,                    //                                         .rx_pcs_ready
		output wire         alt_e100s10_0_other_rx_block_lock,                   //                                         .rx_block_lock
		output wire         alt_e100s10_0_other_rx_am_lock,                      //                                         .rx_am_lock
		input  wire         alt_e100s10_0_other_clk_ref,                         //                                         .clk_ref
		input  wire         alt_e100s10_0_other_csr_rst_n,                       //                                         .csr_rst_n
		input  wire         alt_e100s10_0_other_tx_rst_n,                        //                                         .tx_rst_n
		input  wire         alt_e100s10_0_other_rx_rst_n,                        //                                         .rx_rst_n
		input  wire [1:0]   alt_e100s10_0_other_tx_serial_clk,                   //                                         .tx_serial_clk
		input  wire [1:0]   alt_e100s10_0_other_tx_pll_locked,                   //                                         .tx_pll_locked
		output wire         alt_e100s10_0_stats_l8_txstatus_valid,               //                      alt_e100s10_0_stats.l8_txstatus_valid
		output wire [39:0]  alt_e100s10_0_stats_l8_txstatus_data,                //                                         .l8_txstatus_data
		output wire [6:0]   alt_e100s10_0_stats_l8_txstatus_error,               //                                         .l8_txstatus_error
		output wire         alt_e100s10_0_stats_l8_rxstatus_valid,               //                                         .l8_rxstatus_valid
		output wire [39:0]  alt_e100s10_0_stats_l8_rxstatus_data,                //                                         .l8_rxstatus_data
		input  wire         alt_e100s10_1_status_clk_status,                     //                     alt_e100s10_1_status.clk_status
		input  wire         alt_e100s10_1_status_status_write,                   //                                         .status_write
		input  wire         alt_e100s10_1_status_status_read,                    //                                         .status_read
		input  wire [15:0]  alt_e100s10_1_status_status_addr,                    //                                         .status_addr
		input  wire [31:0]  alt_e100s10_1_status_status_writedata,               //                                         .status_writedata
		output wire [31:0]  alt_e100s10_1_status_status_readdata,                //                                         .status_readdata
		output wire         alt_e100s10_1_status_status_readdata_valid,          //                                         .status_readdata_valid
		output wire         alt_e100s10_1_status_status_waitrequest,             //                                         .status_waitrequest
		output wire         alt_e100s10_1_avalon_st_tx_clk_txmac,                //               alt_e100s10_1_avalon_st_tx.clk_txmac
		input  wire         alt_e100s10_1_avalon_st_tx_l8_tx_startofpacket,      //                                         .l8_tx_startofpacket
		input  wire         alt_e100s10_1_avalon_st_tx_l8_tx_endofpacket,        //                                         .l8_tx_endofpacket
		input  wire         alt_e100s10_1_avalon_st_tx_l8_tx_valid,              //                                         .l8_tx_valid
		output wire         alt_e100s10_1_avalon_st_tx_l8_tx_ready,              //                                         .l8_tx_ready
		input  wire         alt_e100s10_1_avalon_st_tx_l8_tx_error,              //                                         .l8_tx_error
		input  wire [5:0]   alt_e100s10_1_avalon_st_tx_l8_tx_empty,              //                                         .l8_tx_empty
		input  wire [511:0] alt_e100s10_1_avalon_st_tx_l8_tx_data,               //                                         .l8_tx_data
		output wire         alt_e100s10_1_avalon_st_rx_clk_rxmac,                //               alt_e100s10_1_avalon_st_rx.clk_rxmac
		output wire [5:0]   alt_e100s10_1_avalon_st_rx_l8_rx_error,              //                                         .l8_rx_error
		output wire         alt_e100s10_1_avalon_st_rx_l8_rx_valid,              //                                         .l8_rx_valid
		output wire         alt_e100s10_1_avalon_st_rx_l8_rx_startofpacket,      //                                         .l8_rx_startofpacket
		output wire         alt_e100s10_1_avalon_st_rx_l8_rx_endofpacket,        //                                         .l8_rx_endofpacket
		output wire [5:0]   alt_e100s10_1_avalon_st_rx_l8_rx_empty,              //                                         .l8_rx_empty
		output wire [511:0] alt_e100s10_1_avalon_st_rx_l8_rx_data,               //                                         .l8_rx_data
		output wire [3:0]   alt_e100s10_1_serial_lanes_tx_serial,                //               alt_e100s10_1_serial_lanes.tx_serial
		input  wire [3:0]   alt_e100s10_1_serial_lanes_rx_serial,                //                                         .rx_serial
		input  wire         alt_e100s10_1_reconfig_reconfig_clk,                 //                   alt_e100s10_1_reconfig.reconfig_clk
		input  wire         alt_e100s10_1_reconfig_reconfig_reset,               //                                         .reconfig_reset
		input  wire         alt_e100s10_1_reconfig_reconfig_write,               //                                         .reconfig_write
		input  wire         alt_e100s10_1_reconfig_reconfig_read,                //                                         .reconfig_read
		input  wire [12:0]  alt_e100s10_1_reconfig_reconfig_address,             //                                         .reconfig_address
		input  wire [31:0]  alt_e100s10_1_reconfig_reconfig_writedata,           //                                         .reconfig_writedata
		output wire [31:0]  alt_e100s10_1_reconfig_reconfig_readdata,            //                                         .reconfig_readdata
		output wire         alt_e100s10_1_reconfig_reconfig_waitrequest,         //                                         .reconfig_waitrequest
		output wire         alt_e100s10_1_other_tx_lanes_stable,                 //                      alt_e100s10_1_other.tx_lanes_stable
		output wire         alt_e100s10_1_other_rx_pcs_ready,                    //                                         .rx_pcs_ready
		output wire         alt_e100s10_1_other_rx_block_lock,                   //                                         .rx_block_lock
		output wire         alt_e100s10_1_other_rx_am_lock,                      //                                         .rx_am_lock
		input  wire         alt_e100s10_1_other_clk_ref,                         //                                         .clk_ref
		input  wire         alt_e100s10_1_other_csr_rst_n,                       //                                         .csr_rst_n
		input  wire         alt_e100s10_1_other_tx_rst_n,                        //                                         .tx_rst_n
		input  wire         alt_e100s10_1_other_rx_rst_n,                        //                                         .rx_rst_n
		input  wire [1:0]   alt_e100s10_1_other_tx_serial_clk,                   //                                         .tx_serial_clk
		input  wire [1:0]   alt_e100s10_1_other_tx_pll_locked,                   //                                         .tx_pll_locked
		output wire         alt_e100s10_1_stats_l8_txstatus_valid,               //                      alt_e100s10_1_stats.l8_txstatus_valid
		output wire [39:0]  alt_e100s10_1_stats_l8_txstatus_data,                //                                         .l8_txstatus_data
		output wire [6:0]   alt_e100s10_1_stats_l8_txstatus_error,               //                                         .l8_txstatus_error
		output wire         alt_e100s10_1_stats_l8_rxstatus_valid,               //                                         .l8_rxstatus_valid
		output wire [39:0]  alt_e100s10_1_stats_l8_rxstatus_data,                //                                         .l8_rxstatus_data
		input  wire         alt_e100s10_2_status_clk_status,                     //                     alt_e100s10_2_status.clk_status
		input  wire         alt_e100s10_2_status_status_write,                   //                                         .status_write
		input  wire         alt_e100s10_2_status_status_read,                    //                                         .status_read
		input  wire [15:0]  alt_e100s10_2_status_status_addr,                    //                                         .status_addr
		input  wire [31:0]  alt_e100s10_2_status_status_writedata,               //                                         .status_writedata
		output wire [31:0]  alt_e100s10_2_status_status_readdata,                //                                         .status_readdata
		output wire         alt_e100s10_2_status_status_readdata_valid,          //                                         .status_readdata_valid
		output wire         alt_e100s10_2_status_status_waitrequest,             //                                         .status_waitrequest
		output wire         alt_e100s10_2_avalon_st_tx_clk_txmac,                //               alt_e100s10_2_avalon_st_tx.clk_txmac
		input  wire         alt_e100s10_2_avalon_st_tx_l8_tx_startofpacket,      //                                         .l8_tx_startofpacket
		input  wire         alt_e100s10_2_avalon_st_tx_l8_tx_endofpacket,        //                                         .l8_tx_endofpacket
		input  wire         alt_e100s10_2_avalon_st_tx_l8_tx_valid,              //                                         .l8_tx_valid
		output wire         alt_e100s10_2_avalon_st_tx_l8_tx_ready,              //                                         .l8_tx_ready
		input  wire         alt_e100s10_2_avalon_st_tx_l8_tx_error,              //                                         .l8_tx_error
		input  wire [5:0]   alt_e100s10_2_avalon_st_tx_l8_tx_empty,              //                                         .l8_tx_empty
		input  wire [511:0] alt_e100s10_2_avalon_st_tx_l8_tx_data,               //                                         .l8_tx_data
		output wire         alt_e100s10_2_avalon_st_rx_clk_rxmac,                //               alt_e100s10_2_avalon_st_rx.clk_rxmac
		output wire [5:0]   alt_e100s10_2_avalon_st_rx_l8_rx_error,              //                                         .l8_rx_error
		output wire         alt_e100s10_2_avalon_st_rx_l8_rx_valid,              //                                         .l8_rx_valid
		output wire         alt_e100s10_2_avalon_st_rx_l8_rx_startofpacket,      //                                         .l8_rx_startofpacket
		output wire         alt_e100s10_2_avalon_st_rx_l8_rx_endofpacket,        //                                         .l8_rx_endofpacket
		output wire [5:0]   alt_e100s10_2_avalon_st_rx_l8_rx_empty,              //                                         .l8_rx_empty
		output wire [511:0] alt_e100s10_2_avalon_st_rx_l8_rx_data,               //                                         .l8_rx_data
		output wire [3:0]   alt_e100s10_2_serial_lanes_tx_serial,                //               alt_e100s10_2_serial_lanes.tx_serial
		input  wire [3:0]   alt_e100s10_2_serial_lanes_rx_serial,                //                                         .rx_serial
		input  wire         alt_e100s10_2_reconfig_reconfig_clk,                 //                   alt_e100s10_2_reconfig.reconfig_clk
		input  wire         alt_e100s10_2_reconfig_reconfig_reset,               //                                         .reconfig_reset
		input  wire         alt_e100s10_2_reconfig_reconfig_write,               //                                         .reconfig_write
		input  wire         alt_e100s10_2_reconfig_reconfig_read,                //                                         .reconfig_read
		input  wire [12:0]  alt_e100s10_2_reconfig_reconfig_address,             //                                         .reconfig_address
		input  wire [31:0]  alt_e100s10_2_reconfig_reconfig_writedata,           //                                         .reconfig_writedata
		output wire [31:0]  alt_e100s10_2_reconfig_reconfig_readdata,            //                                         .reconfig_readdata
		output wire         alt_e100s10_2_reconfig_reconfig_waitrequest,         //                                         .reconfig_waitrequest
		output wire         alt_e100s10_2_other_tx_lanes_stable,                 //                      alt_e100s10_2_other.tx_lanes_stable
		output wire         alt_e100s10_2_other_rx_pcs_ready,                    //                                         .rx_pcs_ready
		output wire         alt_e100s10_2_other_rx_block_lock,                   //                                         .rx_block_lock
		output wire         alt_e100s10_2_other_rx_am_lock,                      //                                         .rx_am_lock
		input  wire         alt_e100s10_2_other_clk_ref,                         //                                         .clk_ref
		input  wire         alt_e100s10_2_other_csr_rst_n,                       //                                         .csr_rst_n
		input  wire         alt_e100s10_2_other_tx_rst_n,                        //                                         .tx_rst_n
		input  wire         alt_e100s10_2_other_rx_rst_n,                        //                                         .rx_rst_n
		input  wire [1:0]   alt_e100s10_2_other_tx_serial_clk,                   //                                         .tx_serial_clk
		input  wire [1:0]   alt_e100s10_2_other_tx_pll_locked,                   //                                         .tx_pll_locked
		output wire         alt_e100s10_2_stats_l8_txstatus_valid,               //                      alt_e100s10_2_stats.l8_txstatus_valid
		output wire [39:0]  alt_e100s10_2_stats_l8_txstatus_data,                //                                         .l8_txstatus_data
		output wire [6:0]   alt_e100s10_2_stats_l8_txstatus_error,               //                                         .l8_txstatus_error
		output wire         alt_e100s10_2_stats_l8_rxstatus_valid,               //                                         .l8_rxstatus_valid
		output wire [39:0]  alt_e100s10_2_stats_l8_rxstatus_data,                //                                         .l8_rxstatus_data
		input  wire         alt_e100s10_3_status_clk_status,                     //                     alt_e100s10_3_status.clk_status
		input  wire         alt_e100s10_3_status_status_write,                   //                                         .status_write
		input  wire         alt_e100s10_3_status_status_read,                    //                                         .status_read
		input  wire [15:0]  alt_e100s10_3_status_status_addr,                    //                                         .status_addr
		input  wire [31:0]  alt_e100s10_3_status_status_writedata,               //                                         .status_writedata
		output wire [31:0]  alt_e100s10_3_status_status_readdata,                //                                         .status_readdata
		output wire         alt_e100s10_3_status_status_readdata_valid,          //                                         .status_readdata_valid
		output wire         alt_e100s10_3_status_status_waitrequest,             //                                         .status_waitrequest
		output wire         alt_e100s10_3_avalon_st_tx_clk_txmac,                //               alt_e100s10_3_avalon_st_tx.clk_txmac
		input  wire         alt_e100s10_3_avalon_st_tx_l8_tx_startofpacket,      //                                         .l8_tx_startofpacket
		input  wire         alt_e100s10_3_avalon_st_tx_l8_tx_endofpacket,        //                                         .l8_tx_endofpacket
		input  wire         alt_e100s10_3_avalon_st_tx_l8_tx_valid,              //                                         .l8_tx_valid
		output wire         alt_e100s10_3_avalon_st_tx_l8_tx_ready,              //                                         .l8_tx_ready
		input  wire         alt_e100s10_3_avalon_st_tx_l8_tx_error,              //                                         .l8_tx_error
		input  wire [5:0]   alt_e100s10_3_avalon_st_tx_l8_tx_empty,              //                                         .l8_tx_empty
		input  wire [511:0] alt_e100s10_3_avalon_st_tx_l8_tx_data,               //                                         .l8_tx_data
		output wire         alt_e100s10_3_avalon_st_rx_clk_rxmac,                //               alt_e100s10_3_avalon_st_rx.clk_rxmac
		output wire [5:0]   alt_e100s10_3_avalon_st_rx_l8_rx_error,              //                                         .l8_rx_error
		output wire         alt_e100s10_3_avalon_st_rx_l8_rx_valid,              //                                         .l8_rx_valid
		output wire         alt_e100s10_3_avalon_st_rx_l8_rx_startofpacket,      //                                         .l8_rx_startofpacket
		output wire         alt_e100s10_3_avalon_st_rx_l8_rx_endofpacket,        //                                         .l8_rx_endofpacket
		output wire [5:0]   alt_e100s10_3_avalon_st_rx_l8_rx_empty,              //                                         .l8_rx_empty
		output wire [511:0] alt_e100s10_3_avalon_st_rx_l8_rx_data,               //                                         .l8_rx_data
		output wire [3:0]   alt_e100s10_3_serial_lanes_tx_serial,                //               alt_e100s10_3_serial_lanes.tx_serial
		input  wire [3:0]   alt_e100s10_3_serial_lanes_rx_serial,                //                                         .rx_serial
		input  wire         alt_e100s10_3_reconfig_reconfig_clk,                 //                   alt_e100s10_3_reconfig.reconfig_clk
		input  wire         alt_e100s10_3_reconfig_reconfig_reset,               //                                         .reconfig_reset
		input  wire         alt_e100s10_3_reconfig_reconfig_write,               //                                         .reconfig_write
		input  wire         alt_e100s10_3_reconfig_reconfig_read,                //                                         .reconfig_read
		input  wire [12:0]  alt_e100s10_3_reconfig_reconfig_address,             //                                         .reconfig_address
		input  wire [31:0]  alt_e100s10_3_reconfig_reconfig_writedata,           //                                         .reconfig_writedata
		output wire [31:0]  alt_e100s10_3_reconfig_reconfig_readdata,            //                                         .reconfig_readdata
		output wire         alt_e100s10_3_reconfig_reconfig_waitrequest,         //                                         .reconfig_waitrequest
		output wire         alt_e100s10_3_other_tx_lanes_stable,                 //                      alt_e100s10_3_other.tx_lanes_stable
		output wire         alt_e100s10_3_other_rx_pcs_ready,                    //                                         .rx_pcs_ready
		output wire         alt_e100s10_3_other_rx_block_lock,                   //                                         .rx_block_lock
		output wire         alt_e100s10_3_other_rx_am_lock,                      //                                         .rx_am_lock
		input  wire         alt_e100s10_3_other_clk_ref,                         //                                         .clk_ref
		input  wire         alt_e100s10_3_other_csr_rst_n,                       //                                         .csr_rst_n
		input  wire         alt_e100s10_3_other_tx_rst_n,                        //                                         .tx_rst_n
		input  wire         alt_e100s10_3_other_rx_rst_n,                        //                                         .rx_rst_n
		input  wire [1:0]   alt_e100s10_3_other_tx_serial_clk,                   //                                         .tx_serial_clk
		input  wire [1:0]   alt_e100s10_3_other_tx_pll_locked,                   //                                         .tx_pll_locked
		output wire         alt_e100s10_3_stats_l8_txstatus_valid,               //                      alt_e100s10_3_stats.l8_txstatus_valid
		output wire [39:0]  alt_e100s10_3_stats_l8_txstatus_data,                //                                         .l8_txstatus_data
		output wire [6:0]   alt_e100s10_3_stats_l8_txstatus_error,               //                                         .l8_txstatus_error
		output wire         alt_e100s10_3_stats_l8_rxstatus_valid,               //                                         .l8_rxstatus_valid
		output wire [39:0]  alt_e100s10_3_stats_l8_rxstatus_data,                //                                         .l8_rxstatus_data
		input  wire [1:0]   button_external_connection_export,                   //               button_external_connection.export
		input  wire         clk_clk,                                             //                                      clk.clk
		output wire         ddr4_local_reset_req_external_connection_export,     // ddr4_local_reset_req_external_connection.export
		input  wire [11:0]  ddr4_status_external_connection_export,              //          ddr4_status_external_connection.export
		input  wire         emif_s10_ddr4_a_local_reset_req_local_reset_req,     //          emif_s10_ddr4_a_local_reset_req.local_reset_req
		output wire         emif_s10_ddr4_a_local_reset_status_local_reset_done, //       emif_s10_ddr4_a_local_reset_status.local_reset_done
		input  wire         emif_s10_ddr4_a_pll_ref_clk_clk,                     //              emif_s10_ddr4_a_pll_ref_clk.clk
		input  wire         emif_s10_ddr4_a_oct_oct_rzqin,                       //                      emif_s10_ddr4_a_oct.oct_rzqin
		output wire [0:0]   emif_s10_ddr4_a_mem_mem_ck,                          //                      emif_s10_ddr4_a_mem.mem_ck
		output wire [0:0]   emif_s10_ddr4_a_mem_mem_ck_n,                        //                                         .mem_ck_n
		output wire [16:0]  emif_s10_ddr4_a_mem_mem_a,                           //                                         .mem_a
		output wire [0:0]   emif_s10_ddr4_a_mem_mem_act_n,                       //                                         .mem_act_n
		output wire [1:0]   emif_s10_ddr4_a_mem_mem_ba,                          //                                         .mem_ba
		output wire [1:0]   emif_s10_ddr4_a_mem_mem_bg,                          //                                         .mem_bg
		output wire [0:0]   emif_s10_ddr4_a_mem_mem_cke,                         //                                         .mem_cke
		output wire [0:0]   emif_s10_ddr4_a_mem_mem_cs_n,                        //                                         .mem_cs_n
		output wire [0:0]   emif_s10_ddr4_a_mem_mem_odt,                         //                                         .mem_odt
		output wire [0:0]   emif_s10_ddr4_a_mem_mem_reset_n,                     //                                         .mem_reset_n
		output wire [0:0]   emif_s10_ddr4_a_mem_mem_par,                         //                                         .mem_par
		input  wire [0:0]   emif_s10_ddr4_a_mem_mem_alert_n,                     //                                         .mem_alert_n
		inout  wire [8:0]   emif_s10_ddr4_a_mem_mem_dqs,                         //                                         .mem_dqs
		inout  wire [8:0]   emif_s10_ddr4_a_mem_mem_dqs_n,                       //                                         .mem_dqs_n
		inout  wire [71:0]  emif_s10_ddr4_a_mem_mem_dq,                          //                                         .mem_dq
		inout  wire [8:0]   emif_s10_ddr4_a_mem_mem_dbi_n,                       //                                         .mem_dbi_n
		output wire         emif_s10_ddr4_a_status_local_cal_success,            //                   emif_s10_ddr4_a_status.local_cal_success
		output wire         emif_s10_ddr4_a_status_local_cal_fail,               //                                         .local_cal_fail
		input  wire         emif_s10_ddr4_b_local_reset_req_local_reset_req,     //          emif_s10_ddr4_b_local_reset_req.local_reset_req
		output wire         emif_s10_ddr4_b_local_reset_status_local_reset_done, //       emif_s10_ddr4_b_local_reset_status.local_reset_done
		input  wire         emif_s10_ddr4_b_pll_ref_clk_clk,                     //              emif_s10_ddr4_b_pll_ref_clk.clk
		input  wire         emif_s10_ddr4_b_oct_oct_rzqin,                       //                      emif_s10_ddr4_b_oct.oct_rzqin
		output wire [0:0]   emif_s10_ddr4_b_mem_mem_ck,                          //                      emif_s10_ddr4_b_mem.mem_ck
		output wire [0:0]   emif_s10_ddr4_b_mem_mem_ck_n,                        //                                         .mem_ck_n
		output wire [16:0]  emif_s10_ddr4_b_mem_mem_a,                           //                                         .mem_a
		output wire [0:0]   emif_s10_ddr4_b_mem_mem_act_n,                       //                                         .mem_act_n
		output wire [1:0]   emif_s10_ddr4_b_mem_mem_ba,                          //                                         .mem_ba
		output wire [1:0]   emif_s10_ddr4_b_mem_mem_bg,                          //                                         .mem_bg
		output wire [0:0]   emif_s10_ddr4_b_mem_mem_cke,                         //                                         .mem_cke
		output wire [0:0]   emif_s10_ddr4_b_mem_mem_cs_n,                        //                                         .mem_cs_n
		output wire [0:0]   emif_s10_ddr4_b_mem_mem_odt,                         //                                         .mem_odt
		output wire [0:0]   emif_s10_ddr4_b_mem_mem_reset_n,                     //                                         .mem_reset_n
		output wire [0:0]   emif_s10_ddr4_b_mem_mem_par,                         //                                         .mem_par
		input  wire [0:0]   emif_s10_ddr4_b_mem_mem_alert_n,                     //                                         .mem_alert_n
		inout  wire [8:0]   emif_s10_ddr4_b_mem_mem_dqs,                         //                                         .mem_dqs
		inout  wire [8:0]   emif_s10_ddr4_b_mem_mem_dqs_n,                       //                                         .mem_dqs_n
		inout  wire [71:0]  emif_s10_ddr4_b_mem_mem_dq,                          //                                         .mem_dq
		inout  wire [8:0]   emif_s10_ddr4_b_mem_mem_dbi_n,                       //                                         .mem_dbi_n
		output wire         emif_s10_ddr4_b_status_local_cal_success,            //                   emif_s10_ddr4_b_status.local_cal_success
		output wire         emif_s10_ddr4_b_status_local_cal_fail,               //                                         .local_cal_fail
		input  wire         emif_s10_ddr4_c_local_reset_req_local_reset_req,     //          emif_s10_ddr4_c_local_reset_req.local_reset_req
		output wire         emif_s10_ddr4_c_local_reset_status_local_reset_done, //       emif_s10_ddr4_c_local_reset_status.local_reset_done
		input  wire         emif_s10_ddr4_c_pll_ref_clk_clk,                     //              emif_s10_ddr4_c_pll_ref_clk.clk
		input  wire         emif_s10_ddr4_c_oct_oct_rzqin,                       //                      emif_s10_ddr4_c_oct.oct_rzqin
		output wire [0:0]   emif_s10_ddr4_c_mem_mem_ck,                          //                      emif_s10_ddr4_c_mem.mem_ck
		output wire [0:0]   emif_s10_ddr4_c_mem_mem_ck_n,                        //                                         .mem_ck_n
		output wire [16:0]  emif_s10_ddr4_c_mem_mem_a,                           //                                         .mem_a
		output wire [0:0]   emif_s10_ddr4_c_mem_mem_act_n,                       //                                         .mem_act_n
		output wire [1:0]   emif_s10_ddr4_c_mem_mem_ba,                          //                                         .mem_ba
		output wire [1:0]   emif_s10_ddr4_c_mem_mem_bg,                          //                                         .mem_bg
		output wire [0:0]   emif_s10_ddr4_c_mem_mem_cke,                         //                                         .mem_cke
		output wire [0:0]   emif_s10_ddr4_c_mem_mem_cs_n,                        //                                         .mem_cs_n
		output wire [0:0]   emif_s10_ddr4_c_mem_mem_odt,                         //                                         .mem_odt
		output wire [0:0]   emif_s10_ddr4_c_mem_mem_reset_n,                     //                                         .mem_reset_n
		output wire [0:0]   emif_s10_ddr4_c_mem_mem_par,                         //                                         .mem_par
		input  wire [0:0]   emif_s10_ddr4_c_mem_mem_alert_n,                     //                                         .mem_alert_n
		inout  wire [8:0]   emif_s10_ddr4_c_mem_mem_dqs,                         //                                         .mem_dqs
		inout  wire [8:0]   emif_s10_ddr4_c_mem_mem_dqs_n,                       //                                         .mem_dqs_n
		inout  wire [71:0]  emif_s10_ddr4_c_mem_mem_dq,                          //                                         .mem_dq
		inout  wire [8:0]   emif_s10_ddr4_c_mem_mem_dbi_n,                       //                                         .mem_dbi_n
		output wire         emif_s10_ddr4_c_status_local_cal_success,            //                   emif_s10_ddr4_c_status.local_cal_success
		output wire         emif_s10_ddr4_c_status_local_cal_fail,               //                                         .local_cal_fail
		input  wire         emif_s10_ddr4_d_local_reset_req_local_reset_req,     //          emif_s10_ddr4_d_local_reset_req.local_reset_req
		output wire         emif_s10_ddr4_d_local_reset_status_local_reset_done, //       emif_s10_ddr4_d_local_reset_status.local_reset_done
		input  wire         emif_s10_ddr4_d_pll_ref_clk_clk,                     //              emif_s10_ddr4_d_pll_ref_clk.clk
		input  wire         emif_s10_ddr4_d_oct_oct_rzqin,                       //                      emif_s10_ddr4_d_oct.oct_rzqin
		output wire [0:0]   emif_s10_ddr4_d_mem_mem_ck,                          //                      emif_s10_ddr4_d_mem.mem_ck
		output wire [0:0]   emif_s10_ddr4_d_mem_mem_ck_n,                        //                                         .mem_ck_n
		output wire [16:0]  emif_s10_ddr4_d_mem_mem_a,                           //                                         .mem_a
		output wire [0:0]   emif_s10_ddr4_d_mem_mem_act_n,                       //                                         .mem_act_n
		output wire [1:0]   emif_s10_ddr4_d_mem_mem_ba,                          //                                         .mem_ba
		output wire [1:0]   emif_s10_ddr4_d_mem_mem_bg,                          //                                         .mem_bg
		output wire [0:0]   emif_s10_ddr4_d_mem_mem_cke,                         //                                         .mem_cke
		output wire [0:0]   emif_s10_ddr4_d_mem_mem_cs_n,                        //                                         .mem_cs_n
		output wire [0:0]   emif_s10_ddr4_d_mem_mem_odt,                         //                                         .mem_odt
		output wire [0:0]   emif_s10_ddr4_d_mem_mem_reset_n,                     //                                         .mem_reset_n
		output wire [0:0]   emif_s10_ddr4_d_mem_mem_par,                         //                                         .mem_par
		input  wire [0:0]   emif_s10_ddr4_d_mem_mem_alert_n,                     //                                         .mem_alert_n
		inout  wire [8:0]   emif_s10_ddr4_d_mem_mem_dqs,                         //                                         .mem_dqs
		inout  wire [8:0]   emif_s10_ddr4_d_mem_mem_dqs_n,                       //                                         .mem_dqs_n
		inout  wire [71:0]  emif_s10_ddr4_d_mem_mem_dq,                          //                                         .mem_dq
		inout  wire [8:0]   emif_s10_ddr4_d_mem_mem_dbi_n,                       //                                         .mem_dbi_n
		output wire         emif_s10_ddr4_d_status_local_cal_success,            //                   emif_s10_ddr4_d_status.local_cal_success
		output wire         emif_s10_ddr4_d_status_local_cal_fail,               //                                         .local_cal_fail
		output wire         iopll_0_locked_export,                               //                           iopll_0_locked.export
		input  wire         reset_reset                                          //                                    reset.reset
	);

	wire          clock_in_out_clk_clk;                                                      // clock_in:out_clk -> [iopll_0:refclk, reset_in:clk]
	wire          iopll_0_outclk0_clk;                                                       // iopll_0:outclk_0 -> [PowerReader_0:CLK, TempReader_0:CLK, button:clk, ddr4_local_reset_req:clk, ddr4_status:clk, irq_synchronizer:receiver_clk, irq_synchronizer_001:receiver_clk, irq_synchronizer_002:receiver_clk, jtag_uart_0:clk, mm_clock_crossing_bridge_50m:m0_clk, mm_interconnect_3:iopll_0_outclk0_clk, power_max_pio:clk, power_min_pio:clk, rst_controller_001:clk, rst_controller_003:clk, sysid_qsys_0:clock, temp_pio:clk, timer_0:clk]
	wire          iopll_0_outclk1_clk;                                                       // iopll_0:outclk_1 -> [address_span_extender_ddr4:clk, irq_mapper:clk, irq_synchronizer:sender_clk, irq_synchronizer_001:sender_clk, irq_synchronizer_002:sender_clk, mm_clock_crossing_bridge_50m:s0_clk, mm_interconnect_1:iopll_0_outclk1_clk, mm_interconnect_2:iopll_0_outclk1_clk, nios2_gen2_0:clk, onchip_memory2_0:clk, rst_controller_002:clk, rst_controller_004:clk]
	wire          iopll_0_outclk2_clk;                                                       // iopll_0:outclk_2 -> [Pebbles_0:clock, jtag_uart_1:clk, mm_interconnect_0:iopll_0_outclk2_clk, rst_controller:clk, rst_controller_005:clk]
	wire   [23:0] powerreader_0_power_max_power_max;                                         // PowerReader_0:get_power_max -> power_max_pio:in_port
	wire   [23:0] powerreader_0_power_min_power_min;                                         // PowerReader_0:get_power_min -> power_min_pio:in_port
	wire    [7:0] tempreader_0_temp_out_export;                                              // TempReader_0:get_temp -> temp_pio:in_port
	wire          reset_in_out_reset_reset;                                                  // reset_in:out_reset -> [iopll_0:rst, rst_controller:reset_in0, rst_controller_001:reset_in0, rst_controller_002:reset_in0, rst_controller_003:reset_in1, rst_controller_004:reset_in1, rst_controller_005:reset_in0]
	wire          pebbles_0_avalon_master_waitrequest;                                       // mm_interconnect_0:Pebbles_0_avalon_master_waitrequest -> Pebbles_0:waitrequest
	wire   [31:0] pebbles_0_avalon_master_readdata;                                          // mm_interconnect_0:Pebbles_0_avalon_master_readdata -> Pebbles_0:readdata
	wire    [2:0] pebbles_0_avalon_master_address;                                           // Pebbles_0:address -> mm_interconnect_0:Pebbles_0_avalon_master_address
	wire          pebbles_0_avalon_master_read;                                              // Pebbles_0:read -> mm_interconnect_0:Pebbles_0_avalon_master_read
	wire   [31:0] pebbles_0_avalon_master_writedata;                                         // Pebbles_0:writedata -> mm_interconnect_0:Pebbles_0_avalon_master_writedata
	wire          pebbles_0_avalon_master_write;                                             // Pebbles_0:write -> mm_interconnect_0:Pebbles_0_avalon_master_write
	wire          mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_chipselect;                // mm_interconnect_0:jtag_uart_1_avalon_jtag_slave_chipselect -> jtag_uart_1:av_chipselect
	wire   [31:0] mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_readdata;                  // jtag_uart_1:av_readdata -> mm_interconnect_0:jtag_uart_1_avalon_jtag_slave_readdata
	wire          mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_waitrequest;               // jtag_uart_1:av_waitrequest -> mm_interconnect_0:jtag_uart_1_avalon_jtag_slave_waitrequest
	wire    [0:0] mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_address;                   // mm_interconnect_0:jtag_uart_1_avalon_jtag_slave_address -> jtag_uart_1:av_address
	wire          mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_read;                      // mm_interconnect_0:jtag_uart_1_avalon_jtag_slave_read -> jtag_uart_1:av_read_n
	wire          mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_write;                     // mm_interconnect_0:jtag_uart_1_avalon_jtag_slave_write -> jtag_uart_1:av_write_n
	wire   [31:0] mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_writedata;                 // mm_interconnect_0:jtag_uart_1_avalon_jtag_slave_writedata -> jtag_uart_1:av_writedata
	wire   [31:0] nios2_gen2_0_data_master_readdata;                                         // mm_interconnect_1:nios2_gen2_0_data_master_readdata -> nios2_gen2_0:d_readdata
	wire          nios2_gen2_0_data_master_waitrequest;                                      // mm_interconnect_1:nios2_gen2_0_data_master_waitrequest -> nios2_gen2_0:d_waitrequest
	wire          nios2_gen2_0_data_master_debugaccess;                                      // nios2_gen2_0:debug_mem_slave_debugaccess_to_roms -> mm_interconnect_1:nios2_gen2_0_data_master_debugaccess
	wire   [30:0] nios2_gen2_0_data_master_address;                                          // nios2_gen2_0:d_address -> mm_interconnect_1:nios2_gen2_0_data_master_address
	wire    [3:0] nios2_gen2_0_data_master_byteenable;                                       // nios2_gen2_0:d_byteenable -> mm_interconnect_1:nios2_gen2_0_data_master_byteenable
	wire          nios2_gen2_0_data_master_read;                                             // nios2_gen2_0:d_read -> mm_interconnect_1:nios2_gen2_0_data_master_read
	wire          nios2_gen2_0_data_master_readdatavalid;                                    // mm_interconnect_1:nios2_gen2_0_data_master_readdatavalid -> nios2_gen2_0:d_readdatavalid
	wire          nios2_gen2_0_data_master_write;                                            // nios2_gen2_0:d_write -> mm_interconnect_1:nios2_gen2_0_data_master_write
	wire   [31:0] nios2_gen2_0_data_master_writedata;                                        // nios2_gen2_0:d_writedata -> mm_interconnect_1:nios2_gen2_0_data_master_writedata
	wire   [31:0] nios2_gen2_0_instruction_master_readdata;                                  // mm_interconnect_1:nios2_gen2_0_instruction_master_readdata -> nios2_gen2_0:i_readdata
	wire          nios2_gen2_0_instruction_master_waitrequest;                               // mm_interconnect_1:nios2_gen2_0_instruction_master_waitrequest -> nios2_gen2_0:i_waitrequest
	wire   [30:0] nios2_gen2_0_instruction_master_address;                                   // nios2_gen2_0:i_address -> mm_interconnect_1:nios2_gen2_0_instruction_master_address
	wire          nios2_gen2_0_instruction_master_read;                                      // nios2_gen2_0:i_read -> mm_interconnect_1:nios2_gen2_0_instruction_master_read
	wire          nios2_gen2_0_instruction_master_readdatavalid;                             // mm_interconnect_1:nios2_gen2_0_instruction_master_readdatavalid -> nios2_gen2_0:i_readdatavalid
	wire   [63:0] mm_interconnect_1_address_span_extender_ddr4_cntl_readdata;                // address_span_extender_ddr4:avs_cntl_readdata -> mm_interconnect_1:address_span_extender_ddr4_cntl_readdata
	wire          mm_interconnect_1_address_span_extender_ddr4_cntl_read;                    // mm_interconnect_1:address_span_extender_ddr4_cntl_read -> address_span_extender_ddr4:avs_cntl_read
	wire    [7:0] mm_interconnect_1_address_span_extender_ddr4_cntl_byteenable;              // mm_interconnect_1:address_span_extender_ddr4_cntl_byteenable -> address_span_extender_ddr4:avs_cntl_byteenable
	wire          mm_interconnect_1_address_span_extender_ddr4_cntl_write;                   // mm_interconnect_1:address_span_extender_ddr4_cntl_write -> address_span_extender_ddr4:avs_cntl_write
	wire   [63:0] mm_interconnect_1_address_span_extender_ddr4_cntl_writedata;               // mm_interconnect_1:address_span_extender_ddr4_cntl_writedata -> address_span_extender_ddr4:avs_cntl_writedata
	wire   [31:0] mm_interconnect_1_nios2_gen2_0_debug_mem_slave_readdata;                   // nios2_gen2_0:debug_mem_slave_readdata -> mm_interconnect_1:nios2_gen2_0_debug_mem_slave_readdata
	wire          mm_interconnect_1_nios2_gen2_0_debug_mem_slave_waitrequest;                // nios2_gen2_0:debug_mem_slave_waitrequest -> mm_interconnect_1:nios2_gen2_0_debug_mem_slave_waitrequest
	wire          mm_interconnect_1_nios2_gen2_0_debug_mem_slave_debugaccess;                // mm_interconnect_1:nios2_gen2_0_debug_mem_slave_debugaccess -> nios2_gen2_0:debug_mem_slave_debugaccess
	wire    [8:0] mm_interconnect_1_nios2_gen2_0_debug_mem_slave_address;                    // mm_interconnect_1:nios2_gen2_0_debug_mem_slave_address -> nios2_gen2_0:debug_mem_slave_address
	wire          mm_interconnect_1_nios2_gen2_0_debug_mem_slave_read;                       // mm_interconnect_1:nios2_gen2_0_debug_mem_slave_read -> nios2_gen2_0:debug_mem_slave_read
	wire    [3:0] mm_interconnect_1_nios2_gen2_0_debug_mem_slave_byteenable;                 // mm_interconnect_1:nios2_gen2_0_debug_mem_slave_byteenable -> nios2_gen2_0:debug_mem_slave_byteenable
	wire          mm_interconnect_1_nios2_gen2_0_debug_mem_slave_write;                      // mm_interconnect_1:nios2_gen2_0_debug_mem_slave_write -> nios2_gen2_0:debug_mem_slave_write
	wire   [31:0] mm_interconnect_1_nios2_gen2_0_debug_mem_slave_writedata;                  // mm_interconnect_1:nios2_gen2_0_debug_mem_slave_writedata -> nios2_gen2_0:debug_mem_slave_writedata
	wire   [31:0] mm_interconnect_1_mm_clock_crossing_bridge_50m_s0_readdata;                // mm_clock_crossing_bridge_50m:s0_readdata -> mm_interconnect_1:mm_clock_crossing_bridge_50m_s0_readdata
	wire          mm_interconnect_1_mm_clock_crossing_bridge_50m_s0_waitrequest;             // mm_clock_crossing_bridge_50m:s0_waitrequest -> mm_interconnect_1:mm_clock_crossing_bridge_50m_s0_waitrequest
	wire          mm_interconnect_1_mm_clock_crossing_bridge_50m_s0_debugaccess;             // mm_interconnect_1:mm_clock_crossing_bridge_50m_s0_debugaccess -> mm_clock_crossing_bridge_50m:s0_debugaccess
	wire    [6:0] mm_interconnect_1_mm_clock_crossing_bridge_50m_s0_address;                 // mm_interconnect_1:mm_clock_crossing_bridge_50m_s0_address -> mm_clock_crossing_bridge_50m:s0_address
	wire          mm_interconnect_1_mm_clock_crossing_bridge_50m_s0_read;                    // mm_interconnect_1:mm_clock_crossing_bridge_50m_s0_read -> mm_clock_crossing_bridge_50m:s0_read
	wire    [3:0] mm_interconnect_1_mm_clock_crossing_bridge_50m_s0_byteenable;              // mm_interconnect_1:mm_clock_crossing_bridge_50m_s0_byteenable -> mm_clock_crossing_bridge_50m:s0_byteenable
	wire          mm_interconnect_1_mm_clock_crossing_bridge_50m_s0_readdatavalid;           // mm_clock_crossing_bridge_50m:s0_readdatavalid -> mm_interconnect_1:mm_clock_crossing_bridge_50m_s0_readdatavalid
	wire          mm_interconnect_1_mm_clock_crossing_bridge_50m_s0_write;                   // mm_interconnect_1:mm_clock_crossing_bridge_50m_s0_write -> mm_clock_crossing_bridge_50m:s0_write
	wire   [31:0] mm_interconnect_1_mm_clock_crossing_bridge_50m_s0_writedata;               // mm_interconnect_1:mm_clock_crossing_bridge_50m_s0_writedata -> mm_clock_crossing_bridge_50m:s0_writedata
	wire    [0:0] mm_interconnect_1_mm_clock_crossing_bridge_50m_s0_burstcount;              // mm_interconnect_1:mm_clock_crossing_bridge_50m_s0_burstcount -> mm_clock_crossing_bridge_50m:s0_burstcount
	wire          mm_interconnect_1_onchip_memory2_0_s1_chipselect;                          // mm_interconnect_1:onchip_memory2_0_s1_chipselect -> onchip_memory2_0:chipselect
	wire   [31:0] mm_interconnect_1_onchip_memory2_0_s1_readdata;                            // onchip_memory2_0:readdata -> mm_interconnect_1:onchip_memory2_0_s1_readdata
	wire   [15:0] mm_interconnect_1_onchip_memory2_0_s1_address;                             // mm_interconnect_1:onchip_memory2_0_s1_address -> onchip_memory2_0:address
	wire    [3:0] mm_interconnect_1_onchip_memory2_0_s1_byteenable;                          // mm_interconnect_1:onchip_memory2_0_s1_byteenable -> onchip_memory2_0:byteenable
	wire          mm_interconnect_1_onchip_memory2_0_s1_write;                               // mm_interconnect_1:onchip_memory2_0_s1_write -> onchip_memory2_0:write
	wire   [31:0] mm_interconnect_1_onchip_memory2_0_s1_writedata;                           // mm_interconnect_1:onchip_memory2_0_s1_writedata -> onchip_memory2_0:writedata
	wire          mm_interconnect_1_onchip_memory2_0_s1_clken;                               // mm_interconnect_1:onchip_memory2_0_s1_clken -> onchip_memory2_0:clken
	wire   [31:0] mm_interconnect_1_address_span_extender_ddr4_windowed_slave_readdata;      // address_span_extender_ddr4:avs_s0_readdata -> mm_interconnect_1:address_span_extender_ddr4_windowed_slave_readdata
	wire          mm_interconnect_1_address_span_extender_ddr4_windowed_slave_waitrequest;   // address_span_extender_ddr4:avs_s0_waitrequest -> mm_interconnect_1:address_span_extender_ddr4_windowed_slave_waitrequest
	wire   [27:0] mm_interconnect_1_address_span_extender_ddr4_windowed_slave_address;       // mm_interconnect_1:address_span_extender_ddr4_windowed_slave_address -> address_span_extender_ddr4:avs_s0_address
	wire          mm_interconnect_1_address_span_extender_ddr4_windowed_slave_read;          // mm_interconnect_1:address_span_extender_ddr4_windowed_slave_read -> address_span_extender_ddr4:avs_s0_read
	wire    [3:0] mm_interconnect_1_address_span_extender_ddr4_windowed_slave_byteenable;    // mm_interconnect_1:address_span_extender_ddr4_windowed_slave_byteenable -> address_span_extender_ddr4:avs_s0_byteenable
	wire          mm_interconnect_1_address_span_extender_ddr4_windowed_slave_readdatavalid; // address_span_extender_ddr4:avs_s0_readdatavalid -> mm_interconnect_1:address_span_extender_ddr4_windowed_slave_readdatavalid
	wire          mm_interconnect_1_address_span_extender_ddr4_windowed_slave_write;         // mm_interconnect_1:address_span_extender_ddr4_windowed_slave_write -> address_span_extender_ddr4:avs_s0_write
	wire   [31:0] mm_interconnect_1_address_span_extender_ddr4_windowed_slave_writedata;     // mm_interconnect_1:address_span_extender_ddr4_windowed_slave_writedata -> address_span_extender_ddr4:avs_s0_writedata
	wire    [0:0] mm_interconnect_1_address_span_extender_ddr4_windowed_slave_burstcount;    // mm_interconnect_1:address_span_extender_ddr4_windowed_slave_burstcount -> address_span_extender_ddr4:avs_s0_burstcount
	wire          address_span_extender_ddr4_expanded_master_waitrequest;                    // mm_interconnect_2:address_span_extender_ddr4_expanded_master_waitrequest -> address_span_extender_ddr4:avm_m0_waitrequest
	wire   [31:0] address_span_extender_ddr4_expanded_master_readdata;                       // mm_interconnect_2:address_span_extender_ddr4_expanded_master_readdata -> address_span_extender_ddr4:avm_m0_readdata
	wire   [33:0] address_span_extender_ddr4_expanded_master_address;                        // address_span_extender_ddr4:avm_m0_address -> mm_interconnect_2:address_span_extender_ddr4_expanded_master_address
	wire          address_span_extender_ddr4_expanded_master_read;                           // address_span_extender_ddr4:avm_m0_read -> mm_interconnect_2:address_span_extender_ddr4_expanded_master_read
	wire    [3:0] address_span_extender_ddr4_expanded_master_byteenable;                     // address_span_extender_ddr4:avm_m0_byteenable -> mm_interconnect_2:address_span_extender_ddr4_expanded_master_byteenable
	wire          address_span_extender_ddr4_expanded_master_readdatavalid;                  // mm_interconnect_2:address_span_extender_ddr4_expanded_master_readdatavalid -> address_span_extender_ddr4:avm_m0_readdatavalid
	wire          address_span_extender_ddr4_expanded_master_write;                          // address_span_extender_ddr4:avm_m0_write -> mm_interconnect_2:address_span_extender_ddr4_expanded_master_write
	wire   [31:0] address_span_extender_ddr4_expanded_master_writedata;                      // address_span_extender_ddr4:avm_m0_writedata -> mm_interconnect_2:address_span_extender_ddr4_expanded_master_writedata
	wire    [0:0] address_span_extender_ddr4_expanded_master_burstcount;                     // address_span_extender_ddr4:avm_m0_burstcount -> mm_interconnect_2:address_span_extender_ddr4_expanded_master_burstcount
	wire  [511:0] mm_interconnect_2_emif_s10_ddr4_a_ctrl_amm_0_readdata;                     // emif_s10_ddr4_a:amm_readdata_0 -> mm_interconnect_2:emif_s10_ddr4_a_ctrl_amm_0_readdata
	wire          mm_interconnect_2_emif_s10_ddr4_a_ctrl_amm_0_waitrequest;                  // emif_s10_ddr4_a:amm_ready_0 -> mm_interconnect_2:emif_s10_ddr4_a_ctrl_amm_0_waitrequest
	wire   [25:0] mm_interconnect_2_emif_s10_ddr4_a_ctrl_amm_0_address;                      // mm_interconnect_2:emif_s10_ddr4_a_ctrl_amm_0_address -> emif_s10_ddr4_a:amm_address_0
	wire          mm_interconnect_2_emif_s10_ddr4_a_ctrl_amm_0_read;                         // mm_interconnect_2:emif_s10_ddr4_a_ctrl_amm_0_read -> emif_s10_ddr4_a:amm_read_0
	wire   [63:0] mm_interconnect_2_emif_s10_ddr4_a_ctrl_amm_0_byteenable;                   // mm_interconnect_2:emif_s10_ddr4_a_ctrl_amm_0_byteenable -> emif_s10_ddr4_a:amm_byteenable_0
	wire          mm_interconnect_2_emif_s10_ddr4_a_ctrl_amm_0_readdatavalid;                // emif_s10_ddr4_a:amm_readdatavalid_0 -> mm_interconnect_2:emif_s10_ddr4_a_ctrl_amm_0_readdatavalid
	wire          mm_interconnect_2_emif_s10_ddr4_a_ctrl_amm_0_write;                        // mm_interconnect_2:emif_s10_ddr4_a_ctrl_amm_0_write -> emif_s10_ddr4_a:amm_write_0
	wire  [511:0] mm_interconnect_2_emif_s10_ddr4_a_ctrl_amm_0_writedata;                    // mm_interconnect_2:emif_s10_ddr4_a_ctrl_amm_0_writedata -> emif_s10_ddr4_a:amm_writedata_0
	wire    [6:0] mm_interconnect_2_emif_s10_ddr4_a_ctrl_amm_0_burstcount;                   // mm_interconnect_2:emif_s10_ddr4_a_ctrl_amm_0_burstcount -> emif_s10_ddr4_a:amm_burstcount_0
	wire          emif_s10_ddr4_a_emif_usr_clk_clk;                                          // emif_s10_ddr4_a:emif_usr_clk -> [mm_interconnect_2:emif_s10_ddr4_a_emif_usr_clk_clk, rst_controller_006:clk]
	wire  [511:0] mm_interconnect_2_emif_s10_ddr4_b_ctrl_amm_0_readdata;                     // emif_s10_ddr4_b:amm_readdata_0 -> mm_interconnect_2:emif_s10_ddr4_b_ctrl_amm_0_readdata
	wire          mm_interconnect_2_emif_s10_ddr4_b_ctrl_amm_0_waitrequest;                  // emif_s10_ddr4_b:amm_ready_0 -> mm_interconnect_2:emif_s10_ddr4_b_ctrl_amm_0_waitrequest
	wire   [25:0] mm_interconnect_2_emif_s10_ddr4_b_ctrl_amm_0_address;                      // mm_interconnect_2:emif_s10_ddr4_b_ctrl_amm_0_address -> emif_s10_ddr4_b:amm_address_0
	wire          mm_interconnect_2_emif_s10_ddr4_b_ctrl_amm_0_read;                         // mm_interconnect_2:emif_s10_ddr4_b_ctrl_amm_0_read -> emif_s10_ddr4_b:amm_read_0
	wire   [63:0] mm_interconnect_2_emif_s10_ddr4_b_ctrl_amm_0_byteenable;                   // mm_interconnect_2:emif_s10_ddr4_b_ctrl_amm_0_byteenable -> emif_s10_ddr4_b:amm_byteenable_0
	wire          mm_interconnect_2_emif_s10_ddr4_b_ctrl_amm_0_readdatavalid;                // emif_s10_ddr4_b:amm_readdatavalid_0 -> mm_interconnect_2:emif_s10_ddr4_b_ctrl_amm_0_readdatavalid
	wire          mm_interconnect_2_emif_s10_ddr4_b_ctrl_amm_0_write;                        // mm_interconnect_2:emif_s10_ddr4_b_ctrl_amm_0_write -> emif_s10_ddr4_b:amm_write_0
	wire  [511:0] mm_interconnect_2_emif_s10_ddr4_b_ctrl_amm_0_writedata;                    // mm_interconnect_2:emif_s10_ddr4_b_ctrl_amm_0_writedata -> emif_s10_ddr4_b:amm_writedata_0
	wire    [6:0] mm_interconnect_2_emif_s10_ddr4_b_ctrl_amm_0_burstcount;                   // mm_interconnect_2:emif_s10_ddr4_b_ctrl_amm_0_burstcount -> emif_s10_ddr4_b:amm_burstcount_0
	wire          emif_s10_ddr4_b_emif_usr_clk_clk;                                          // emif_s10_ddr4_b:emif_usr_clk -> [mm_interconnect_2:emif_s10_ddr4_b_emif_usr_clk_clk, rst_controller_007:clk]
	wire  [511:0] mm_interconnect_2_emif_s10_ddr4_c_ctrl_amm_0_readdata;                     // emif_s10_ddr4_c:amm_readdata_0 -> mm_interconnect_2:emif_s10_ddr4_c_ctrl_amm_0_readdata
	wire          mm_interconnect_2_emif_s10_ddr4_c_ctrl_amm_0_waitrequest;                  // emif_s10_ddr4_c:amm_ready_0 -> mm_interconnect_2:emif_s10_ddr4_c_ctrl_amm_0_waitrequest
	wire   [25:0] mm_interconnect_2_emif_s10_ddr4_c_ctrl_amm_0_address;                      // mm_interconnect_2:emif_s10_ddr4_c_ctrl_amm_0_address -> emif_s10_ddr4_c:amm_address_0
	wire          mm_interconnect_2_emif_s10_ddr4_c_ctrl_amm_0_read;                         // mm_interconnect_2:emif_s10_ddr4_c_ctrl_amm_0_read -> emif_s10_ddr4_c:amm_read_0
	wire   [63:0] mm_interconnect_2_emif_s10_ddr4_c_ctrl_amm_0_byteenable;                   // mm_interconnect_2:emif_s10_ddr4_c_ctrl_amm_0_byteenable -> emif_s10_ddr4_c:amm_byteenable_0
	wire          mm_interconnect_2_emif_s10_ddr4_c_ctrl_amm_0_readdatavalid;                // emif_s10_ddr4_c:amm_readdatavalid_0 -> mm_interconnect_2:emif_s10_ddr4_c_ctrl_amm_0_readdatavalid
	wire          mm_interconnect_2_emif_s10_ddr4_c_ctrl_amm_0_write;                        // mm_interconnect_2:emif_s10_ddr4_c_ctrl_amm_0_write -> emif_s10_ddr4_c:amm_write_0
	wire  [511:0] mm_interconnect_2_emif_s10_ddr4_c_ctrl_amm_0_writedata;                    // mm_interconnect_2:emif_s10_ddr4_c_ctrl_amm_0_writedata -> emif_s10_ddr4_c:amm_writedata_0
	wire    [6:0] mm_interconnect_2_emif_s10_ddr4_c_ctrl_amm_0_burstcount;                   // mm_interconnect_2:emif_s10_ddr4_c_ctrl_amm_0_burstcount -> emif_s10_ddr4_c:amm_burstcount_0
	wire          emif_s10_ddr4_c_emif_usr_clk_clk;                                          // emif_s10_ddr4_c:emif_usr_clk -> [mm_interconnect_2:emif_s10_ddr4_c_emif_usr_clk_clk, rst_controller_008:clk]
	wire  [511:0] mm_interconnect_2_emif_s10_ddr4_d_ctrl_amm_0_readdata;                     // emif_s10_ddr4_d:amm_readdata_0 -> mm_interconnect_2:emif_s10_ddr4_d_ctrl_amm_0_readdata
	wire          mm_interconnect_2_emif_s10_ddr4_d_ctrl_amm_0_waitrequest;                  // emif_s10_ddr4_d:amm_ready_0 -> mm_interconnect_2:emif_s10_ddr4_d_ctrl_amm_0_waitrequest
	wire   [25:0] mm_interconnect_2_emif_s10_ddr4_d_ctrl_amm_0_address;                      // mm_interconnect_2:emif_s10_ddr4_d_ctrl_amm_0_address -> emif_s10_ddr4_d:amm_address_0
	wire          mm_interconnect_2_emif_s10_ddr4_d_ctrl_amm_0_read;                         // mm_interconnect_2:emif_s10_ddr4_d_ctrl_amm_0_read -> emif_s10_ddr4_d:amm_read_0
	wire   [63:0] mm_interconnect_2_emif_s10_ddr4_d_ctrl_amm_0_byteenable;                   // mm_interconnect_2:emif_s10_ddr4_d_ctrl_amm_0_byteenable -> emif_s10_ddr4_d:amm_byteenable_0
	wire          mm_interconnect_2_emif_s10_ddr4_d_ctrl_amm_0_readdatavalid;                // emif_s10_ddr4_d:amm_readdatavalid_0 -> mm_interconnect_2:emif_s10_ddr4_d_ctrl_amm_0_readdatavalid
	wire          mm_interconnect_2_emif_s10_ddr4_d_ctrl_amm_0_write;                        // mm_interconnect_2:emif_s10_ddr4_d_ctrl_amm_0_write -> emif_s10_ddr4_d:amm_write_0
	wire  [511:0] mm_interconnect_2_emif_s10_ddr4_d_ctrl_amm_0_writedata;                    // mm_interconnect_2:emif_s10_ddr4_d_ctrl_amm_0_writedata -> emif_s10_ddr4_d:amm_writedata_0
	wire    [6:0] mm_interconnect_2_emif_s10_ddr4_d_ctrl_amm_0_burstcount;                   // mm_interconnect_2:emif_s10_ddr4_d_ctrl_amm_0_burstcount -> emif_s10_ddr4_d:amm_burstcount_0
	wire          emif_s10_ddr4_d_emif_usr_clk_clk;                                          // emif_s10_ddr4_d:emif_usr_clk -> [mm_interconnect_2:emif_s10_ddr4_d_emif_usr_clk_clk, rst_controller_009:clk]
	wire          mm_clock_crossing_bridge_50m_m0_waitrequest;                               // mm_interconnect_3:mm_clock_crossing_bridge_50m_m0_waitrequest -> mm_clock_crossing_bridge_50m:m0_waitrequest
	wire   [31:0] mm_clock_crossing_bridge_50m_m0_readdata;                                  // mm_interconnect_3:mm_clock_crossing_bridge_50m_m0_readdata -> mm_clock_crossing_bridge_50m:m0_readdata
	wire          mm_clock_crossing_bridge_50m_m0_debugaccess;                               // mm_clock_crossing_bridge_50m:m0_debugaccess -> mm_interconnect_3:mm_clock_crossing_bridge_50m_m0_debugaccess
	wire    [6:0] mm_clock_crossing_bridge_50m_m0_address;                                   // mm_clock_crossing_bridge_50m:m0_address -> mm_interconnect_3:mm_clock_crossing_bridge_50m_m0_address
	wire          mm_clock_crossing_bridge_50m_m0_read;                                      // mm_clock_crossing_bridge_50m:m0_read -> mm_interconnect_3:mm_clock_crossing_bridge_50m_m0_read
	wire    [3:0] mm_clock_crossing_bridge_50m_m0_byteenable;                                // mm_clock_crossing_bridge_50m:m0_byteenable -> mm_interconnect_3:mm_clock_crossing_bridge_50m_m0_byteenable
	wire          mm_clock_crossing_bridge_50m_m0_readdatavalid;                             // mm_interconnect_3:mm_clock_crossing_bridge_50m_m0_readdatavalid -> mm_clock_crossing_bridge_50m:m0_readdatavalid
	wire   [31:0] mm_clock_crossing_bridge_50m_m0_writedata;                                 // mm_clock_crossing_bridge_50m:m0_writedata -> mm_interconnect_3:mm_clock_crossing_bridge_50m_m0_writedata
	wire          mm_clock_crossing_bridge_50m_m0_write;                                     // mm_clock_crossing_bridge_50m:m0_write -> mm_interconnect_3:mm_clock_crossing_bridge_50m_m0_write
	wire    [0:0] mm_clock_crossing_bridge_50m_m0_burstcount;                                // mm_clock_crossing_bridge_50m:m0_burstcount -> mm_interconnect_3:mm_clock_crossing_bridge_50m_m0_burstcount
	wire          mm_interconnect_3_jtag_uart_0_avalon_jtag_slave_chipselect;                // mm_interconnect_3:jtag_uart_0_avalon_jtag_slave_chipselect -> jtag_uart_0:av_chipselect
	wire   [31:0] mm_interconnect_3_jtag_uart_0_avalon_jtag_slave_readdata;                  // jtag_uart_0:av_readdata -> mm_interconnect_3:jtag_uart_0_avalon_jtag_slave_readdata
	wire          mm_interconnect_3_jtag_uart_0_avalon_jtag_slave_waitrequest;               // jtag_uart_0:av_waitrequest -> mm_interconnect_3:jtag_uart_0_avalon_jtag_slave_waitrequest
	wire    [0:0] mm_interconnect_3_jtag_uart_0_avalon_jtag_slave_address;                   // mm_interconnect_3:jtag_uart_0_avalon_jtag_slave_address -> jtag_uart_0:av_address
	wire          mm_interconnect_3_jtag_uart_0_avalon_jtag_slave_read;                      // mm_interconnect_3:jtag_uart_0_avalon_jtag_slave_read -> jtag_uart_0:av_read_n
	wire          mm_interconnect_3_jtag_uart_0_avalon_jtag_slave_write;                     // mm_interconnect_3:jtag_uart_0_avalon_jtag_slave_write -> jtag_uart_0:av_write_n
	wire   [31:0] mm_interconnect_3_jtag_uart_0_avalon_jtag_slave_writedata;                 // mm_interconnect_3:jtag_uart_0_avalon_jtag_slave_writedata -> jtag_uart_0:av_writedata
	wire   [31:0] mm_interconnect_3_sysid_qsys_0_control_slave_readdata;                     // sysid_qsys_0:readdata -> mm_interconnect_3:sysid_qsys_0_control_slave_readdata
	wire    [0:0] mm_interconnect_3_sysid_qsys_0_control_slave_address;                      // mm_interconnect_3:sysid_qsys_0_control_slave_address -> sysid_qsys_0:address
	wire          mm_interconnect_3_ddr4_local_reset_req_s1_chipselect;                      // mm_interconnect_3:ddr4_local_reset_req_s1_chipselect -> ddr4_local_reset_req:chipselect
	wire   [31:0] mm_interconnect_3_ddr4_local_reset_req_s1_readdata;                        // ddr4_local_reset_req:readdata -> mm_interconnect_3:ddr4_local_reset_req_s1_readdata
	wire    [1:0] mm_interconnect_3_ddr4_local_reset_req_s1_address;                         // mm_interconnect_3:ddr4_local_reset_req_s1_address -> ddr4_local_reset_req:address
	wire          mm_interconnect_3_ddr4_local_reset_req_s1_write;                           // mm_interconnect_3:ddr4_local_reset_req_s1_write -> ddr4_local_reset_req:write_n
	wire   [31:0] mm_interconnect_3_ddr4_local_reset_req_s1_writedata;                       // mm_interconnect_3:ddr4_local_reset_req_s1_writedata -> ddr4_local_reset_req:writedata
	wire   [31:0] mm_interconnect_3_ddr4_status_s1_readdata;                                 // ddr4_status:readdata -> mm_interconnect_3:ddr4_status_s1_readdata
	wire    [1:0] mm_interconnect_3_ddr4_status_s1_address;                                  // mm_interconnect_3:ddr4_status_s1_address -> ddr4_status:address
	wire          mm_interconnect_3_timer_0_s1_chipselect;                                   // mm_interconnect_3:timer_0_s1_chipselect -> timer_0:chipselect
	wire   [15:0] mm_interconnect_3_timer_0_s1_readdata;                                     // timer_0:readdata -> mm_interconnect_3:timer_0_s1_readdata
	wire    [2:0] mm_interconnect_3_timer_0_s1_address;                                      // mm_interconnect_3:timer_0_s1_address -> timer_0:address
	wire          mm_interconnect_3_timer_0_s1_write;                                        // mm_interconnect_3:timer_0_s1_write -> timer_0:write_n
	wire   [15:0] mm_interconnect_3_timer_0_s1_writedata;                                    // mm_interconnect_3:timer_0_s1_writedata -> timer_0:writedata
	wire   [31:0] mm_interconnect_3_temp_pio_s1_readdata;                                    // temp_pio:readdata -> mm_interconnect_3:temp_pio_s1_readdata
	wire    [1:0] mm_interconnect_3_temp_pio_s1_address;                                     // mm_interconnect_3:temp_pio_s1_address -> temp_pio:address
	wire   [31:0] mm_interconnect_3_power_min_pio_s1_readdata;                               // power_min_pio:readdata -> mm_interconnect_3:power_min_pio_s1_readdata
	wire    [1:0] mm_interconnect_3_power_min_pio_s1_address;                                // mm_interconnect_3:power_min_pio_s1_address -> power_min_pio:address
	wire   [31:0] mm_interconnect_3_power_max_pio_s1_readdata;                               // power_max_pio:readdata -> mm_interconnect_3:power_max_pio_s1_readdata
	wire    [1:0] mm_interconnect_3_power_max_pio_s1_address;                                // mm_interconnect_3:power_max_pio_s1_address -> power_max_pio:address
	wire   [31:0] nios2_gen2_0_irq_irq;                                                      // irq_mapper:sender_irq -> nios2_gen2_0:irq
	wire          irq_mapper_receiver0_irq;                                                  // irq_synchronizer:sender_irq -> irq_mapper:receiver0_irq
	wire    [0:0] irq_synchronizer_receiver_irq;                                             // jtag_uart_0:av_irq -> irq_synchronizer:receiver_irq
	wire          irq_mapper_receiver1_irq;                                                  // irq_synchronizer_001:sender_irq -> irq_mapper:receiver1_irq
	wire    [0:0] irq_synchronizer_001_receiver_irq;                                         // timer_0:irq -> irq_synchronizer_001:receiver_irq
	wire          irq_mapper_receiver2_irq;                                                  // irq_synchronizer_002:sender_irq -> irq_mapper:receiver2_irq
	wire    [0:0] irq_synchronizer_002_receiver_irq;                                         // button:irq -> irq_synchronizer_002:receiver_irq
	wire          rst_controller_reset_out_reset;                                            // rst_controller:reset_out -> [Pebbles_0:reset, jtag_uart_1:rst_n]
	wire          rst_controller_001_reset_out_reset;                                        // rst_controller_001:reset_out -> [PowerReader_0:RST_N, TempReader_0:RST_N, button:reset_n, ddr4_local_reset_req:reset_n, ddr4_status:reset_n, irq_synchronizer_001:receiver_reset, irq_synchronizer_002:receiver_reset, mm_clock_crossing_bridge_50m:m0_reset, mm_interconnect_3:mm_clock_crossing_bridge_50m_m0_reset_reset_bridge_in_reset_reset, power_max_pio:reset_n, power_min_pio:reset_n, sysid_qsys_0:reset_n, temp_pio:reset_n, timer_0:reset_n]
	wire          rst_controller_002_reset_out_reset;                                        // rst_controller_002:reset_out -> [address_span_extender_ddr4:reset, mm_clock_crossing_bridge_50m:s0_reset, mm_interconnect_1:address_span_extender_ddr4_reset_reset_bridge_in_reset_reset, mm_interconnect_2:address_span_extender_ddr4_reset_reset_bridge_in_reset_reset]
	wire          rst_controller_003_reset_out_reset;                                        // rst_controller_003:reset_out -> [irq_synchronizer:receiver_reset, jtag_uart_0:rst_n, mm_interconnect_3:jtag_uart_0_reset_reset_bridge_in_reset_reset]
	wire          nios2_gen2_0_debug_reset_request_reset;                                    // nios2_gen2_0:debug_reset_request -> [rst_controller_003:reset_in0, rst_controller_004:reset_in0]
	wire          rst_controller_004_reset_out_reset;                                        // rst_controller_004:reset_out -> [irq_mapper:reset, irq_synchronizer:sender_reset, irq_synchronizer_001:sender_reset, irq_synchronizer_002:sender_reset, mm_interconnect_1:nios2_gen2_0_reset_reset_bridge_in_reset_reset, nios2_gen2_0:reset_n, onchip_memory2_0:reset, rst_translator:in_reset]
	wire          rst_controller_004_reset_out_reset_req;                                    // rst_controller_004:reset_req -> [nios2_gen2_0:reset_req, onchip_memory2_0:reset_req, rst_translator:reset_req_in]
	wire          rst_controller_005_reset_out_reset;                                        // rst_controller_005:reset_out -> mm_interconnect_0:Pebbles_0_avalon_master_translator_reset_reset_bridge_in_reset_reset
	wire          rst_controller_006_reset_out_reset;                                        // rst_controller_006:reset_out -> mm_interconnect_2:emif_s10_ddr4_a_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset
	wire          emif_s10_ddr4_a_emif_usr_reset_n_reset;                                    // emif_s10_ddr4_a:emif_usr_reset_n -> rst_controller_006:reset_in0
	wire          rst_controller_007_reset_out_reset;                                        // rst_controller_007:reset_out -> mm_interconnect_2:emif_s10_ddr4_b_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset
	wire          emif_s10_ddr4_b_emif_usr_reset_n_reset;                                    // emif_s10_ddr4_b:emif_usr_reset_n -> rst_controller_007:reset_in0
	wire          rst_controller_008_reset_out_reset;                                        // rst_controller_008:reset_out -> mm_interconnect_2:emif_s10_ddr4_c_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset
	wire          emif_s10_ddr4_c_emif_usr_reset_n_reset;                                    // emif_s10_ddr4_c:emif_usr_reset_n -> rst_controller_008:reset_in0
	wire          rst_controller_009_reset_out_reset;                                        // rst_controller_009:reset_out -> mm_interconnect_2:emif_s10_ddr4_d_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset
	wire          emif_s10_ddr4_d_emif_usr_reset_n_reset;                                    // emif_s10_ddr4_d:emif_usr_reset_n -> rst_controller_009:reset_in0

	DE10_Pro_QSYS_Pebbles_0 pebbles_0 (
		.reset       (rst_controller_reset_out_reset),      //   input,   width = 1,         reset.reset
		.clock       (iopll_0_outclk2_clk),                 //   input,   width = 1,         clock.clk
		.address     (pebbles_0_avalon_master_address),     //  output,   width = 3, avalon_master.address
		.writedata   (pebbles_0_avalon_master_writedata),   //  output,  width = 32,              .writedata
		.write       (pebbles_0_avalon_master_write),       //  output,   width = 1,              .write
		.read        (pebbles_0_avalon_master_read),        //  output,   width = 1,              .read
		.waitrequest (pebbles_0_avalon_master_waitrequest), //   input,   width = 1,              .waitrequest
		.readdata    (pebbles_0_avalon_master_readdata)     //   input,  width = 32,              .readdata
	);

	DE10_Pro_QSYS_PowerReader_0 powerreader_0 (
		.CLK           (iopll_0_outclk0_clk),                 //   input,   width = 1,      clock.clk
		.RST_N         (~rst_controller_001_reset_out_reset), //   input,   width = 1, reset_sink.reset_n
		.POWER_I2C_SDA (powerreader_0_power_i2c_export_sda),  //   inout,   width = 1,  power_i2c.export_sda
		.POWER_I2C_SCL (powerreader_0_power_i2c_export_scl),  //   inout,   width = 1,           .export_scl
		.get_power_min (powerreader_0_power_min_power_min),   //  output,  width = 24,  power_min.power_min
		.get_power_max (powerreader_0_power_max_power_max)    //  output,  width = 24,  power_max.power_max
	);

	DE10_Pro_QSYS_TempReader_0 tempreader_0 (
		.CLK          (iopll_0_outclk0_clk),                 //   input,  width = 1,       clock.clk
		.RST_N        (~rst_controller_001_reset_out_reset), //   input,  width = 1,    reset_in.reset_n
		.TEMP_I2C_SCL (tempreader_0_i2c_signals_scl),        //   inout,  width = 1, i2c_signals.scl
		.TEMP_I2C_SDA (tempreader_0_i2c_signals_sda),        //   inout,  width = 1,            .sda
		.get_temp     (tempreader_0_temp_out_export)         //  output,  width = 8,    temp_out.export
	);

	DE10_Pro_QSYS_address_span_extender_ddr4 address_span_extender_ddr4 (
		.clk                  (iopll_0_outclk1_clk),                                                       //   input,   width = 1,           clock.clk
		.avs_cntl_read        (mm_interconnect_1_address_span_extender_ddr4_cntl_read),                    //   input,   width = 1,            cntl.read
		.avs_cntl_readdata    (mm_interconnect_1_address_span_extender_ddr4_cntl_readdata),                //  output,  width = 64,                .readdata
		.avs_cntl_write       (mm_interconnect_1_address_span_extender_ddr4_cntl_write),                   //   input,   width = 1,                .write
		.avs_cntl_writedata   (mm_interconnect_1_address_span_extender_ddr4_cntl_writedata),               //   input,  width = 64,                .writedata
		.avs_cntl_byteenable  (mm_interconnect_1_address_span_extender_ddr4_cntl_byteenable),              //   input,   width = 8,                .byteenable
		.avm_m0_address       (address_span_extender_ddr4_expanded_master_address),                        //  output,  width = 34, expanded_master.address
		.avm_m0_read          (address_span_extender_ddr4_expanded_master_read),                           //  output,   width = 1,                .read
		.avm_m0_waitrequest   (address_span_extender_ddr4_expanded_master_waitrequest),                    //   input,   width = 1,                .waitrequest
		.avm_m0_readdata      (address_span_extender_ddr4_expanded_master_readdata),                       //   input,  width = 32,                .readdata
		.avm_m0_write         (address_span_extender_ddr4_expanded_master_write),                          //  output,   width = 1,                .write
		.avm_m0_writedata     (address_span_extender_ddr4_expanded_master_writedata),                      //  output,  width = 32,                .writedata
		.avm_m0_readdatavalid (address_span_extender_ddr4_expanded_master_readdatavalid),                  //   input,   width = 1,                .readdatavalid
		.avm_m0_byteenable    (address_span_extender_ddr4_expanded_master_byteenable),                     //  output,   width = 4,                .byteenable
		.avm_m0_burstcount    (address_span_extender_ddr4_expanded_master_burstcount),                     //  output,   width = 1,                .burstcount
		.reset                (rst_controller_002_reset_out_reset),                                        //   input,   width = 1,           reset.reset
		.avs_s0_address       (mm_interconnect_1_address_span_extender_ddr4_windowed_slave_address),       //   input,  width = 28,  windowed_slave.address
		.avs_s0_read          (mm_interconnect_1_address_span_extender_ddr4_windowed_slave_read),          //   input,   width = 1,                .read
		.avs_s0_readdata      (mm_interconnect_1_address_span_extender_ddr4_windowed_slave_readdata),      //  output,  width = 32,                .readdata
		.avs_s0_write         (mm_interconnect_1_address_span_extender_ddr4_windowed_slave_write),         //   input,   width = 1,                .write
		.avs_s0_writedata     (mm_interconnect_1_address_span_extender_ddr4_windowed_slave_writedata),     //   input,  width = 32,                .writedata
		.avs_s0_readdatavalid (mm_interconnect_1_address_span_extender_ddr4_windowed_slave_readdatavalid), //  output,   width = 1,                .readdatavalid
		.avs_s0_waitrequest   (mm_interconnect_1_address_span_extender_ddr4_windowed_slave_waitrequest),   //  output,   width = 1,                .waitrequest
		.avs_s0_byteenable    (mm_interconnect_1_address_span_extender_ddr4_windowed_slave_byteenable),    //   input,   width = 4,                .byteenable
		.avs_s0_burstcount    (mm_interconnect_1_address_span_extender_ddr4_windowed_slave_burstcount)     //   input,   width = 1,                .burstcount
	);

	DE10_Pro_QSYS_alt_e100s10_0 alt_e100s10_0 (
		.clk_status            (alt_e100s10_0_status_clk_status),                //   input,    width = 1,       status.clk_status
		.status_write          (alt_e100s10_0_status_status_write),              //   input,    width = 1,             .status_write
		.status_read           (alt_e100s10_0_status_status_read),               //   input,    width = 1,             .status_read
		.status_addr           (alt_e100s10_0_status_status_addr),               //   input,   width = 16,             .status_addr
		.status_writedata      (alt_e100s10_0_status_status_writedata),          //   input,   width = 32,             .status_writedata
		.status_readdata       (alt_e100s10_0_status_status_readdata),           //  output,   width = 32,             .status_readdata
		.status_readdata_valid (alt_e100s10_0_status_status_readdata_valid),     //  output,    width = 1,             .status_readdata_valid
		.status_waitrequest    (alt_e100s10_0_status_status_waitrequest),        //  output,    width = 1,             .status_waitrequest
		.clk_txmac             (alt_e100s10_0_avalon_st_tx_clk_txmac),           //  output,    width = 1, avalon_st_tx.clk_txmac
		.l8_tx_startofpacket   (alt_e100s10_0_avalon_st_tx_l8_tx_startofpacket), //   input,    width = 1,             .l8_tx_startofpacket
		.l8_tx_endofpacket     (alt_e100s10_0_avalon_st_tx_l8_tx_endofpacket),   //   input,    width = 1,             .l8_tx_endofpacket
		.l8_tx_valid           (alt_e100s10_0_avalon_st_tx_l8_tx_valid),         //   input,    width = 1,             .l8_tx_valid
		.l8_tx_ready           (alt_e100s10_0_avalon_st_tx_l8_tx_ready),         //  output,    width = 1,             .l8_tx_ready
		.l8_tx_error           (alt_e100s10_0_avalon_st_tx_l8_tx_error),         //   input,    width = 1,             .l8_tx_error
		.l8_tx_empty           (alt_e100s10_0_avalon_st_tx_l8_tx_empty),         //   input,    width = 6,             .l8_tx_empty
		.l8_tx_data            (alt_e100s10_0_avalon_st_tx_l8_tx_data),          //   input,  width = 512,             .l8_tx_data
		.clk_rxmac             (alt_e100s10_0_avalon_st_rx_clk_rxmac),           //  output,    width = 1, avalon_st_rx.clk_rxmac
		.l8_rx_error           (alt_e100s10_0_avalon_st_rx_l8_rx_error),         //  output,    width = 6,             .l8_rx_error
		.l8_rx_valid           (alt_e100s10_0_avalon_st_rx_l8_rx_valid),         //  output,    width = 1,             .l8_rx_valid
		.l8_rx_startofpacket   (alt_e100s10_0_avalon_st_rx_l8_rx_startofpacket), //  output,    width = 1,             .l8_rx_startofpacket
		.l8_rx_endofpacket     (alt_e100s10_0_avalon_st_rx_l8_rx_endofpacket),   //  output,    width = 1,             .l8_rx_endofpacket
		.l8_rx_empty           (alt_e100s10_0_avalon_st_rx_l8_rx_empty),         //  output,    width = 6,             .l8_rx_empty
		.l8_rx_data            (alt_e100s10_0_avalon_st_rx_l8_rx_data),          //  output,  width = 512,             .l8_rx_data
		.tx_serial             (alt_e100s10_0_serial_lanes_tx_serial),           //  output,    width = 4, serial_lanes.tx_serial
		.rx_serial             (alt_e100s10_0_serial_lanes_rx_serial),           //   input,    width = 4,             .rx_serial
		.reconfig_clk          (alt_e100s10_0_reconfig_reconfig_clk),            //   input,    width = 1,     reconfig.reconfig_clk
		.reconfig_reset        (alt_e100s10_0_reconfig_reconfig_reset),          //   input,    width = 1,             .reconfig_reset
		.reconfig_write        (alt_e100s10_0_reconfig_reconfig_write),          //   input,    width = 1,             .reconfig_write
		.reconfig_read         (alt_e100s10_0_reconfig_reconfig_read),           //   input,    width = 1,             .reconfig_read
		.reconfig_address      (alt_e100s10_0_reconfig_reconfig_address),        //   input,   width = 13,             .reconfig_address
		.reconfig_writedata    (alt_e100s10_0_reconfig_reconfig_writedata),      //   input,   width = 32,             .reconfig_writedata
		.reconfig_readdata     (alt_e100s10_0_reconfig_reconfig_readdata),       //  output,   width = 32,             .reconfig_readdata
		.reconfig_waitrequest  (alt_e100s10_0_reconfig_reconfig_waitrequest),    //  output,    width = 1,             .reconfig_waitrequest
		.tx_lanes_stable       (alt_e100s10_0_other_tx_lanes_stable),            //  output,    width = 1,        other.tx_lanes_stable
		.rx_pcs_ready          (alt_e100s10_0_other_rx_pcs_ready),               //  output,    width = 1,             .rx_pcs_ready
		.rx_block_lock         (alt_e100s10_0_other_rx_block_lock),              //  output,    width = 1,             .rx_block_lock
		.rx_am_lock            (alt_e100s10_0_other_rx_am_lock),                 //  output,    width = 1,             .rx_am_lock
		.clk_ref               (alt_e100s10_0_other_clk_ref),                    //   input,    width = 1,             .clk_ref
		.csr_rst_n             (alt_e100s10_0_other_csr_rst_n),                  //   input,    width = 1,             .csr_rst_n
		.tx_rst_n              (alt_e100s10_0_other_tx_rst_n),                   //   input,    width = 1,             .tx_rst_n
		.rx_rst_n              (alt_e100s10_0_other_rx_rst_n),                   //   input,    width = 1,             .rx_rst_n
		.tx_serial_clk         (alt_e100s10_0_other_tx_serial_clk),              //   input,    width = 2,             .tx_serial_clk
		.tx_pll_locked         (alt_e100s10_0_other_tx_pll_locked),              //   input,    width = 2,             .tx_pll_locked
		.l8_txstatus_valid     (alt_e100s10_0_stats_l8_txstatus_valid),          //  output,    width = 1,        stats.l8_txstatus_valid
		.l8_txstatus_data      (alt_e100s10_0_stats_l8_txstatus_data),           //  output,   width = 40,             .l8_txstatus_data
		.l8_txstatus_error     (alt_e100s10_0_stats_l8_txstatus_error),          //  output,    width = 7,             .l8_txstatus_error
		.l8_rxstatus_valid     (alt_e100s10_0_stats_l8_rxstatus_valid),          //  output,    width = 1,             .l8_rxstatus_valid
		.l8_rxstatus_data      (alt_e100s10_0_stats_l8_rxstatus_data)            //  output,   width = 40,             .l8_rxstatus_data
	);

	DE10_Pro_QSYS_alt_e100s10_1 alt_e100s10_1 (
		.clk_status            (alt_e100s10_1_status_clk_status),                //   input,    width = 1,       status.clk_status
		.status_write          (alt_e100s10_1_status_status_write),              //   input,    width = 1,             .status_write
		.status_read           (alt_e100s10_1_status_status_read),               //   input,    width = 1,             .status_read
		.status_addr           (alt_e100s10_1_status_status_addr),               //   input,   width = 16,             .status_addr
		.status_writedata      (alt_e100s10_1_status_status_writedata),          //   input,   width = 32,             .status_writedata
		.status_readdata       (alt_e100s10_1_status_status_readdata),           //  output,   width = 32,             .status_readdata
		.status_readdata_valid (alt_e100s10_1_status_status_readdata_valid),     //  output,    width = 1,             .status_readdata_valid
		.status_waitrequest    (alt_e100s10_1_status_status_waitrequest),        //  output,    width = 1,             .status_waitrequest
		.clk_txmac             (alt_e100s10_1_avalon_st_tx_clk_txmac),           //  output,    width = 1, avalon_st_tx.clk_txmac
		.l8_tx_startofpacket   (alt_e100s10_1_avalon_st_tx_l8_tx_startofpacket), //   input,    width = 1,             .l8_tx_startofpacket
		.l8_tx_endofpacket     (alt_e100s10_1_avalon_st_tx_l8_tx_endofpacket),   //   input,    width = 1,             .l8_tx_endofpacket
		.l8_tx_valid           (alt_e100s10_1_avalon_st_tx_l8_tx_valid),         //   input,    width = 1,             .l8_tx_valid
		.l8_tx_ready           (alt_e100s10_1_avalon_st_tx_l8_tx_ready),         //  output,    width = 1,             .l8_tx_ready
		.l8_tx_error           (alt_e100s10_1_avalon_st_tx_l8_tx_error),         //   input,    width = 1,             .l8_tx_error
		.l8_tx_empty           (alt_e100s10_1_avalon_st_tx_l8_tx_empty),         //   input,    width = 6,             .l8_tx_empty
		.l8_tx_data            (alt_e100s10_1_avalon_st_tx_l8_tx_data),          //   input,  width = 512,             .l8_tx_data
		.clk_rxmac             (alt_e100s10_1_avalon_st_rx_clk_rxmac),           //  output,    width = 1, avalon_st_rx.clk_rxmac
		.l8_rx_error           (alt_e100s10_1_avalon_st_rx_l8_rx_error),         //  output,    width = 6,             .l8_rx_error
		.l8_rx_valid           (alt_e100s10_1_avalon_st_rx_l8_rx_valid),         //  output,    width = 1,             .l8_rx_valid
		.l8_rx_startofpacket   (alt_e100s10_1_avalon_st_rx_l8_rx_startofpacket), //  output,    width = 1,             .l8_rx_startofpacket
		.l8_rx_endofpacket     (alt_e100s10_1_avalon_st_rx_l8_rx_endofpacket),   //  output,    width = 1,             .l8_rx_endofpacket
		.l8_rx_empty           (alt_e100s10_1_avalon_st_rx_l8_rx_empty),         //  output,    width = 6,             .l8_rx_empty
		.l8_rx_data            (alt_e100s10_1_avalon_st_rx_l8_rx_data),          //  output,  width = 512,             .l8_rx_data
		.tx_serial             (alt_e100s10_1_serial_lanes_tx_serial),           //  output,    width = 4, serial_lanes.tx_serial
		.rx_serial             (alt_e100s10_1_serial_lanes_rx_serial),           //   input,    width = 4,             .rx_serial
		.reconfig_clk          (alt_e100s10_1_reconfig_reconfig_clk),            //   input,    width = 1,     reconfig.reconfig_clk
		.reconfig_reset        (alt_e100s10_1_reconfig_reconfig_reset),          //   input,    width = 1,             .reconfig_reset
		.reconfig_write        (alt_e100s10_1_reconfig_reconfig_write),          //   input,    width = 1,             .reconfig_write
		.reconfig_read         (alt_e100s10_1_reconfig_reconfig_read),           //   input,    width = 1,             .reconfig_read
		.reconfig_address      (alt_e100s10_1_reconfig_reconfig_address),        //   input,   width = 13,             .reconfig_address
		.reconfig_writedata    (alt_e100s10_1_reconfig_reconfig_writedata),      //   input,   width = 32,             .reconfig_writedata
		.reconfig_readdata     (alt_e100s10_1_reconfig_reconfig_readdata),       //  output,   width = 32,             .reconfig_readdata
		.reconfig_waitrequest  (alt_e100s10_1_reconfig_reconfig_waitrequest),    //  output,    width = 1,             .reconfig_waitrequest
		.tx_lanes_stable       (alt_e100s10_1_other_tx_lanes_stable),            //  output,    width = 1,        other.tx_lanes_stable
		.rx_pcs_ready          (alt_e100s10_1_other_rx_pcs_ready),               //  output,    width = 1,             .rx_pcs_ready
		.rx_block_lock         (alt_e100s10_1_other_rx_block_lock),              //  output,    width = 1,             .rx_block_lock
		.rx_am_lock            (alt_e100s10_1_other_rx_am_lock),                 //  output,    width = 1,             .rx_am_lock
		.clk_ref               (alt_e100s10_1_other_clk_ref),                    //   input,    width = 1,             .clk_ref
		.csr_rst_n             (alt_e100s10_1_other_csr_rst_n),                  //   input,    width = 1,             .csr_rst_n
		.tx_rst_n              (alt_e100s10_1_other_tx_rst_n),                   //   input,    width = 1,             .tx_rst_n
		.rx_rst_n              (alt_e100s10_1_other_rx_rst_n),                   //   input,    width = 1,             .rx_rst_n
		.tx_serial_clk         (alt_e100s10_1_other_tx_serial_clk),              //   input,    width = 2,             .tx_serial_clk
		.tx_pll_locked         (alt_e100s10_1_other_tx_pll_locked),              //   input,    width = 2,             .tx_pll_locked
		.l8_txstatus_valid     (alt_e100s10_1_stats_l8_txstatus_valid),          //  output,    width = 1,        stats.l8_txstatus_valid
		.l8_txstatus_data      (alt_e100s10_1_stats_l8_txstatus_data),           //  output,   width = 40,             .l8_txstatus_data
		.l8_txstatus_error     (alt_e100s10_1_stats_l8_txstatus_error),          //  output,    width = 7,             .l8_txstatus_error
		.l8_rxstatus_valid     (alt_e100s10_1_stats_l8_rxstatus_valid),          //  output,    width = 1,             .l8_rxstatus_valid
		.l8_rxstatus_data      (alt_e100s10_1_stats_l8_rxstatus_data)            //  output,   width = 40,             .l8_rxstatus_data
	);

	DE10_Pro_QSYS_alt_e100s10_2 alt_e100s10_2 (
		.clk_status            (alt_e100s10_2_status_clk_status),                //   input,    width = 1,       status.clk_status
		.status_write          (alt_e100s10_2_status_status_write),              //   input,    width = 1,             .status_write
		.status_read           (alt_e100s10_2_status_status_read),               //   input,    width = 1,             .status_read
		.status_addr           (alt_e100s10_2_status_status_addr),               //   input,   width = 16,             .status_addr
		.status_writedata      (alt_e100s10_2_status_status_writedata),          //   input,   width = 32,             .status_writedata
		.status_readdata       (alt_e100s10_2_status_status_readdata),           //  output,   width = 32,             .status_readdata
		.status_readdata_valid (alt_e100s10_2_status_status_readdata_valid),     //  output,    width = 1,             .status_readdata_valid
		.status_waitrequest    (alt_e100s10_2_status_status_waitrequest),        //  output,    width = 1,             .status_waitrequest
		.clk_txmac             (alt_e100s10_2_avalon_st_tx_clk_txmac),           //  output,    width = 1, avalon_st_tx.clk_txmac
		.l8_tx_startofpacket   (alt_e100s10_2_avalon_st_tx_l8_tx_startofpacket), //   input,    width = 1,             .l8_tx_startofpacket
		.l8_tx_endofpacket     (alt_e100s10_2_avalon_st_tx_l8_tx_endofpacket),   //   input,    width = 1,             .l8_tx_endofpacket
		.l8_tx_valid           (alt_e100s10_2_avalon_st_tx_l8_tx_valid),         //   input,    width = 1,             .l8_tx_valid
		.l8_tx_ready           (alt_e100s10_2_avalon_st_tx_l8_tx_ready),         //  output,    width = 1,             .l8_tx_ready
		.l8_tx_error           (alt_e100s10_2_avalon_st_tx_l8_tx_error),         //   input,    width = 1,             .l8_tx_error
		.l8_tx_empty           (alt_e100s10_2_avalon_st_tx_l8_tx_empty),         //   input,    width = 6,             .l8_tx_empty
		.l8_tx_data            (alt_e100s10_2_avalon_st_tx_l8_tx_data),          //   input,  width = 512,             .l8_tx_data
		.clk_rxmac             (alt_e100s10_2_avalon_st_rx_clk_rxmac),           //  output,    width = 1, avalon_st_rx.clk_rxmac
		.l8_rx_error           (alt_e100s10_2_avalon_st_rx_l8_rx_error),         //  output,    width = 6,             .l8_rx_error
		.l8_rx_valid           (alt_e100s10_2_avalon_st_rx_l8_rx_valid),         //  output,    width = 1,             .l8_rx_valid
		.l8_rx_startofpacket   (alt_e100s10_2_avalon_st_rx_l8_rx_startofpacket), //  output,    width = 1,             .l8_rx_startofpacket
		.l8_rx_endofpacket     (alt_e100s10_2_avalon_st_rx_l8_rx_endofpacket),   //  output,    width = 1,             .l8_rx_endofpacket
		.l8_rx_empty           (alt_e100s10_2_avalon_st_rx_l8_rx_empty),         //  output,    width = 6,             .l8_rx_empty
		.l8_rx_data            (alt_e100s10_2_avalon_st_rx_l8_rx_data),          //  output,  width = 512,             .l8_rx_data
		.tx_serial             (alt_e100s10_2_serial_lanes_tx_serial),           //  output,    width = 4, serial_lanes.tx_serial
		.rx_serial             (alt_e100s10_2_serial_lanes_rx_serial),           //   input,    width = 4,             .rx_serial
		.reconfig_clk          (alt_e100s10_2_reconfig_reconfig_clk),            //   input,    width = 1,     reconfig.reconfig_clk
		.reconfig_reset        (alt_e100s10_2_reconfig_reconfig_reset),          //   input,    width = 1,             .reconfig_reset
		.reconfig_write        (alt_e100s10_2_reconfig_reconfig_write),          //   input,    width = 1,             .reconfig_write
		.reconfig_read         (alt_e100s10_2_reconfig_reconfig_read),           //   input,    width = 1,             .reconfig_read
		.reconfig_address      (alt_e100s10_2_reconfig_reconfig_address),        //   input,   width = 13,             .reconfig_address
		.reconfig_writedata    (alt_e100s10_2_reconfig_reconfig_writedata),      //   input,   width = 32,             .reconfig_writedata
		.reconfig_readdata     (alt_e100s10_2_reconfig_reconfig_readdata),       //  output,   width = 32,             .reconfig_readdata
		.reconfig_waitrequest  (alt_e100s10_2_reconfig_reconfig_waitrequest),    //  output,    width = 1,             .reconfig_waitrequest
		.tx_lanes_stable       (alt_e100s10_2_other_tx_lanes_stable),            //  output,    width = 1,        other.tx_lanes_stable
		.rx_pcs_ready          (alt_e100s10_2_other_rx_pcs_ready),               //  output,    width = 1,             .rx_pcs_ready
		.rx_block_lock         (alt_e100s10_2_other_rx_block_lock),              //  output,    width = 1,             .rx_block_lock
		.rx_am_lock            (alt_e100s10_2_other_rx_am_lock),                 //  output,    width = 1,             .rx_am_lock
		.clk_ref               (alt_e100s10_2_other_clk_ref),                    //   input,    width = 1,             .clk_ref
		.csr_rst_n             (alt_e100s10_2_other_csr_rst_n),                  //   input,    width = 1,             .csr_rst_n
		.tx_rst_n              (alt_e100s10_2_other_tx_rst_n),                   //   input,    width = 1,             .tx_rst_n
		.rx_rst_n              (alt_e100s10_2_other_rx_rst_n),                   //   input,    width = 1,             .rx_rst_n
		.tx_serial_clk         (alt_e100s10_2_other_tx_serial_clk),              //   input,    width = 2,             .tx_serial_clk
		.tx_pll_locked         (alt_e100s10_2_other_tx_pll_locked),              //   input,    width = 2,             .tx_pll_locked
		.l8_txstatus_valid     (alt_e100s10_2_stats_l8_txstatus_valid),          //  output,    width = 1,        stats.l8_txstatus_valid
		.l8_txstatus_data      (alt_e100s10_2_stats_l8_txstatus_data),           //  output,   width = 40,             .l8_txstatus_data
		.l8_txstatus_error     (alt_e100s10_2_stats_l8_txstatus_error),          //  output,    width = 7,             .l8_txstatus_error
		.l8_rxstatus_valid     (alt_e100s10_2_stats_l8_rxstatus_valid),          //  output,    width = 1,             .l8_rxstatus_valid
		.l8_rxstatus_data      (alt_e100s10_2_stats_l8_rxstatus_data)            //  output,   width = 40,             .l8_rxstatus_data
	);

	DE10_Pro_QSYS_alt_e100s10_3 alt_e100s10_3 (
		.clk_status            (alt_e100s10_3_status_clk_status),                //   input,    width = 1,       status.clk_status
		.status_write          (alt_e100s10_3_status_status_write),              //   input,    width = 1,             .status_write
		.status_read           (alt_e100s10_3_status_status_read),               //   input,    width = 1,             .status_read
		.status_addr           (alt_e100s10_3_status_status_addr),               //   input,   width = 16,             .status_addr
		.status_writedata      (alt_e100s10_3_status_status_writedata),          //   input,   width = 32,             .status_writedata
		.status_readdata       (alt_e100s10_3_status_status_readdata),           //  output,   width = 32,             .status_readdata
		.status_readdata_valid (alt_e100s10_3_status_status_readdata_valid),     //  output,    width = 1,             .status_readdata_valid
		.status_waitrequest    (alt_e100s10_3_status_status_waitrequest),        //  output,    width = 1,             .status_waitrequest
		.clk_txmac             (alt_e100s10_3_avalon_st_tx_clk_txmac),           //  output,    width = 1, avalon_st_tx.clk_txmac
		.l8_tx_startofpacket   (alt_e100s10_3_avalon_st_tx_l8_tx_startofpacket), //   input,    width = 1,             .l8_tx_startofpacket
		.l8_tx_endofpacket     (alt_e100s10_3_avalon_st_tx_l8_tx_endofpacket),   //   input,    width = 1,             .l8_tx_endofpacket
		.l8_tx_valid           (alt_e100s10_3_avalon_st_tx_l8_tx_valid),         //   input,    width = 1,             .l8_tx_valid
		.l8_tx_ready           (alt_e100s10_3_avalon_st_tx_l8_tx_ready),         //  output,    width = 1,             .l8_tx_ready
		.l8_tx_error           (alt_e100s10_3_avalon_st_tx_l8_tx_error),         //   input,    width = 1,             .l8_tx_error
		.l8_tx_empty           (alt_e100s10_3_avalon_st_tx_l8_tx_empty),         //   input,    width = 6,             .l8_tx_empty
		.l8_tx_data            (alt_e100s10_3_avalon_st_tx_l8_tx_data),          //   input,  width = 512,             .l8_tx_data
		.clk_rxmac             (alt_e100s10_3_avalon_st_rx_clk_rxmac),           //  output,    width = 1, avalon_st_rx.clk_rxmac
		.l8_rx_error           (alt_e100s10_3_avalon_st_rx_l8_rx_error),         //  output,    width = 6,             .l8_rx_error
		.l8_rx_valid           (alt_e100s10_3_avalon_st_rx_l8_rx_valid),         //  output,    width = 1,             .l8_rx_valid
		.l8_rx_startofpacket   (alt_e100s10_3_avalon_st_rx_l8_rx_startofpacket), //  output,    width = 1,             .l8_rx_startofpacket
		.l8_rx_endofpacket     (alt_e100s10_3_avalon_st_rx_l8_rx_endofpacket),   //  output,    width = 1,             .l8_rx_endofpacket
		.l8_rx_empty           (alt_e100s10_3_avalon_st_rx_l8_rx_empty),         //  output,    width = 6,             .l8_rx_empty
		.l8_rx_data            (alt_e100s10_3_avalon_st_rx_l8_rx_data),          //  output,  width = 512,             .l8_rx_data
		.tx_serial             (alt_e100s10_3_serial_lanes_tx_serial),           //  output,    width = 4, serial_lanes.tx_serial
		.rx_serial             (alt_e100s10_3_serial_lanes_rx_serial),           //   input,    width = 4,             .rx_serial
		.reconfig_clk          (alt_e100s10_3_reconfig_reconfig_clk),            //   input,    width = 1,     reconfig.reconfig_clk
		.reconfig_reset        (alt_e100s10_3_reconfig_reconfig_reset),          //   input,    width = 1,             .reconfig_reset
		.reconfig_write        (alt_e100s10_3_reconfig_reconfig_write),          //   input,    width = 1,             .reconfig_write
		.reconfig_read         (alt_e100s10_3_reconfig_reconfig_read),           //   input,    width = 1,             .reconfig_read
		.reconfig_address      (alt_e100s10_3_reconfig_reconfig_address),        //   input,   width = 13,             .reconfig_address
		.reconfig_writedata    (alt_e100s10_3_reconfig_reconfig_writedata),      //   input,   width = 32,             .reconfig_writedata
		.reconfig_readdata     (alt_e100s10_3_reconfig_reconfig_readdata),       //  output,   width = 32,             .reconfig_readdata
		.reconfig_waitrequest  (alt_e100s10_3_reconfig_reconfig_waitrequest),    //  output,    width = 1,             .reconfig_waitrequest
		.tx_lanes_stable       (alt_e100s10_3_other_tx_lanes_stable),            //  output,    width = 1,        other.tx_lanes_stable
		.rx_pcs_ready          (alt_e100s10_3_other_rx_pcs_ready),               //  output,    width = 1,             .rx_pcs_ready
		.rx_block_lock         (alt_e100s10_3_other_rx_block_lock),              //  output,    width = 1,             .rx_block_lock
		.rx_am_lock            (alt_e100s10_3_other_rx_am_lock),                 //  output,    width = 1,             .rx_am_lock
		.clk_ref               (alt_e100s10_3_other_clk_ref),                    //   input,    width = 1,             .clk_ref
		.csr_rst_n             (alt_e100s10_3_other_csr_rst_n),                  //   input,    width = 1,             .csr_rst_n
		.tx_rst_n              (alt_e100s10_3_other_tx_rst_n),                   //   input,    width = 1,             .tx_rst_n
		.rx_rst_n              (alt_e100s10_3_other_rx_rst_n),                   //   input,    width = 1,             .rx_rst_n
		.tx_serial_clk         (alt_e100s10_3_other_tx_serial_clk),              //   input,    width = 2,             .tx_serial_clk
		.tx_pll_locked         (alt_e100s10_3_other_tx_pll_locked),              //   input,    width = 2,             .tx_pll_locked
		.l8_txstatus_valid     (alt_e100s10_3_stats_l8_txstatus_valid),          //  output,    width = 1,        stats.l8_txstatus_valid
		.l8_txstatus_data      (alt_e100s10_3_stats_l8_txstatus_data),           //  output,   width = 40,             .l8_txstatus_data
		.l8_txstatus_error     (alt_e100s10_3_stats_l8_txstatus_error),          //  output,    width = 7,             .l8_txstatus_error
		.l8_rxstatus_valid     (alt_e100s10_3_stats_l8_rxstatus_valid),          //  output,    width = 1,             .l8_rxstatus_valid
		.l8_rxstatus_data      (alt_e100s10_3_stats_l8_rxstatus_data)            //  output,   width = 40,             .l8_rxstatus_data
	);

	DE10_Pro_QSYS_button button (
		.clk        (iopll_0_outclk0_clk),                 //   input,   width = 1,                 clk.clk
		.in_port    (button_external_connection_export),   //   input,   width = 2, external_connection.export
		.irq        (irq_synchronizer_002_receiver_irq),   //  output,   width = 1,                 irq.irq
		.reset_n    (~rst_controller_001_reset_out_reset), //   input,   width = 1,               reset.reset_n
		.address    (),                                    //   input,   width = 2,                  s1.address
		.write_n    (),                                    //   input,   width = 1,                    .write_n
		.writedata  (),                                    //   input,  width = 32,                    .writedata
		.chipselect (),                                    //   input,   width = 1,                    .chipselect
		.readdata   ()                                     //  output,  width = 32,                    .readdata
	);

	DE10_Pro_QSYS_clock_in clock_in (
		.in_clk  (clk_clk),              //   input,  width = 1,  in_clk.clk
		.out_clk (clock_in_out_clk_clk)  //  output,  width = 1, out_clk.clk
	);

	DE10_Pro_QSYS_ddr4_local_reset_req ddr4_local_reset_req (
		.clk        (iopll_0_outclk0_clk),                                  //   input,   width = 1,                 clk.clk
		.out_port   (ddr4_local_reset_req_external_connection_export),      //  output,   width = 1, external_connection.export
		.reset_n    (~rst_controller_001_reset_out_reset),                  //   input,   width = 1,               reset.reset_n
		.address    (mm_interconnect_3_ddr4_local_reset_req_s1_address),    //   input,   width = 2,                  s1.address
		.write_n    (~mm_interconnect_3_ddr4_local_reset_req_s1_write),     //   input,   width = 1,                    .write_n
		.writedata  (mm_interconnect_3_ddr4_local_reset_req_s1_writedata),  //   input,  width = 32,                    .writedata
		.chipselect (mm_interconnect_3_ddr4_local_reset_req_s1_chipselect), //   input,   width = 1,                    .chipselect
		.readdata   (mm_interconnect_3_ddr4_local_reset_req_s1_readdata)    //  output,  width = 32,                    .readdata
	);

	DE10_Pro_QSYS_pio_0 ddr4_status (
		.clk      (iopll_0_outclk0_clk),                       //   input,   width = 1,                 clk.clk
		.in_port  (ddr4_status_external_connection_export),    //   input,  width = 12, external_connection.export
		.reset_n  (~rst_controller_001_reset_out_reset),       //   input,   width = 1,               reset.reset_n
		.address  (mm_interconnect_3_ddr4_status_s1_address),  //   input,   width = 2,                  s1.address
		.readdata (mm_interconnect_3_ddr4_status_s1_readdata)  //  output,  width = 32,                    .readdata
	);

	DE10_Pro_QSYS_emif_s10_ddr4 emif_s10_ddr4_a (
		.local_reset_req           (emif_s10_ddr4_a_local_reset_req_local_reset_req),            //   input,    width = 1,           local_reset_req.local_reset_req
		.local_reset_done          (emif_s10_ddr4_a_local_reset_status_local_reset_done),        //  output,    width = 1,        local_reset_status.local_reset_done
		.pll_ref_clk               (emif_s10_ddr4_a_pll_ref_clk_clk),                            //   input,    width = 1,               pll_ref_clk.clk
		.oct_rzqin                 (emif_s10_ddr4_a_oct_oct_rzqin),                              //   input,    width = 1,                       oct.oct_rzqin
		.mem_ck                    (emif_s10_ddr4_a_mem_mem_ck),                                 //  output,    width = 1,                       mem.mem_ck
		.mem_ck_n                  (emif_s10_ddr4_a_mem_mem_ck_n),                               //  output,    width = 1,                          .mem_ck_n
		.mem_a                     (emif_s10_ddr4_a_mem_mem_a),                                  //  output,   width = 17,                          .mem_a
		.mem_act_n                 (emif_s10_ddr4_a_mem_mem_act_n),                              //  output,    width = 1,                          .mem_act_n
		.mem_ba                    (emif_s10_ddr4_a_mem_mem_ba),                                 //  output,    width = 2,                          .mem_ba
		.mem_bg                    (emif_s10_ddr4_a_mem_mem_bg),                                 //  output,    width = 2,                          .mem_bg
		.mem_cke                   (emif_s10_ddr4_a_mem_mem_cke),                                //  output,    width = 1,                          .mem_cke
		.mem_cs_n                  (emif_s10_ddr4_a_mem_mem_cs_n),                               //  output,    width = 1,                          .mem_cs_n
		.mem_odt                   (emif_s10_ddr4_a_mem_mem_odt),                                //  output,    width = 1,                          .mem_odt
		.mem_reset_n               (emif_s10_ddr4_a_mem_mem_reset_n),                            //  output,    width = 1,                          .mem_reset_n
		.mem_par                   (emif_s10_ddr4_a_mem_mem_par),                                //  output,    width = 1,                          .mem_par
		.mem_alert_n               (emif_s10_ddr4_a_mem_mem_alert_n),                            //   input,    width = 1,                          .mem_alert_n
		.mem_dqs                   (emif_s10_ddr4_a_mem_mem_dqs),                                //   inout,    width = 9,                          .mem_dqs
		.mem_dqs_n                 (emif_s10_ddr4_a_mem_mem_dqs_n),                              //   inout,    width = 9,                          .mem_dqs_n
		.mem_dq                    (emif_s10_ddr4_a_mem_mem_dq),                                 //   inout,   width = 72,                          .mem_dq
		.mem_dbi_n                 (emif_s10_ddr4_a_mem_mem_dbi_n),                              //   inout,    width = 9,                          .mem_dbi_n
		.local_cal_success         (emif_s10_ddr4_a_status_local_cal_success),                   //  output,    width = 1,                    status.local_cal_success
		.local_cal_fail            (emif_s10_ddr4_a_status_local_cal_fail),                      //  output,    width = 1,                          .local_cal_fail
		.emif_usr_reset_n          (emif_s10_ddr4_a_emif_usr_reset_n_reset),                     //  output,    width = 1,          emif_usr_reset_n.reset_n
		.emif_usr_clk              (emif_s10_ddr4_a_emif_usr_clk_clk),                           //  output,    width = 1,              emif_usr_clk.clk
		.ctrl_ecc_user_interrupt_0 (),                                                           //  output,    width = 1, ctrl_ecc_user_interrupt_0.ctrl_ecc_user_interrupt
		.amm_ready_0               (mm_interconnect_2_emif_s10_ddr4_a_ctrl_amm_0_waitrequest),   //  output,    width = 1,                ctrl_amm_0.waitrequest_n
		.amm_read_0                (mm_interconnect_2_emif_s10_ddr4_a_ctrl_amm_0_read),          //   input,    width = 1,                          .read
		.amm_write_0               (mm_interconnect_2_emif_s10_ddr4_a_ctrl_amm_0_write),         //   input,    width = 1,                          .write
		.amm_address_0             (mm_interconnect_2_emif_s10_ddr4_a_ctrl_amm_0_address),       //   input,   width = 26,                          .address
		.amm_readdata_0            (mm_interconnect_2_emif_s10_ddr4_a_ctrl_amm_0_readdata),      //  output,  width = 512,                          .readdata
		.amm_writedata_0           (mm_interconnect_2_emif_s10_ddr4_a_ctrl_amm_0_writedata),     //   input,  width = 512,                          .writedata
		.amm_burstcount_0          (mm_interconnect_2_emif_s10_ddr4_a_ctrl_amm_0_burstcount),    //   input,    width = 7,                          .burstcount
		.amm_byteenable_0          (mm_interconnect_2_emif_s10_ddr4_a_ctrl_amm_0_byteenable),    //   input,   width = 64,                          .byteenable
		.amm_readdatavalid_0       (mm_interconnect_2_emif_s10_ddr4_a_ctrl_amm_0_readdatavalid)  //  output,    width = 1,                          .readdatavalid
	);

	DE10_Pro_QSYS_emif_s10_ddr4_b emif_s10_ddr4_b (
		.local_reset_req           (emif_s10_ddr4_b_local_reset_req_local_reset_req),            //   input,    width = 1,           local_reset_req.local_reset_req
		.local_reset_done          (emif_s10_ddr4_b_local_reset_status_local_reset_done),        //  output,    width = 1,        local_reset_status.local_reset_done
		.pll_ref_clk               (emif_s10_ddr4_b_pll_ref_clk_clk),                            //   input,    width = 1,               pll_ref_clk.clk
		.oct_rzqin                 (emif_s10_ddr4_b_oct_oct_rzqin),                              //   input,    width = 1,                       oct.oct_rzqin
		.mem_ck                    (emif_s10_ddr4_b_mem_mem_ck),                                 //  output,    width = 1,                       mem.mem_ck
		.mem_ck_n                  (emif_s10_ddr4_b_mem_mem_ck_n),                               //  output,    width = 1,                          .mem_ck_n
		.mem_a                     (emif_s10_ddr4_b_mem_mem_a),                                  //  output,   width = 17,                          .mem_a
		.mem_act_n                 (emif_s10_ddr4_b_mem_mem_act_n),                              //  output,    width = 1,                          .mem_act_n
		.mem_ba                    (emif_s10_ddr4_b_mem_mem_ba),                                 //  output,    width = 2,                          .mem_ba
		.mem_bg                    (emif_s10_ddr4_b_mem_mem_bg),                                 //  output,    width = 2,                          .mem_bg
		.mem_cke                   (emif_s10_ddr4_b_mem_mem_cke),                                //  output,    width = 1,                          .mem_cke
		.mem_cs_n                  (emif_s10_ddr4_b_mem_mem_cs_n),                               //  output,    width = 1,                          .mem_cs_n
		.mem_odt                   (emif_s10_ddr4_b_mem_mem_odt),                                //  output,    width = 1,                          .mem_odt
		.mem_reset_n               (emif_s10_ddr4_b_mem_mem_reset_n),                            //  output,    width = 1,                          .mem_reset_n
		.mem_par                   (emif_s10_ddr4_b_mem_mem_par),                                //  output,    width = 1,                          .mem_par
		.mem_alert_n               (emif_s10_ddr4_b_mem_mem_alert_n),                            //   input,    width = 1,                          .mem_alert_n
		.mem_dqs                   (emif_s10_ddr4_b_mem_mem_dqs),                                //   inout,    width = 9,                          .mem_dqs
		.mem_dqs_n                 (emif_s10_ddr4_b_mem_mem_dqs_n),                              //   inout,    width = 9,                          .mem_dqs_n
		.mem_dq                    (emif_s10_ddr4_b_mem_mem_dq),                                 //   inout,   width = 72,                          .mem_dq
		.mem_dbi_n                 (emif_s10_ddr4_b_mem_mem_dbi_n),                              //   inout,    width = 9,                          .mem_dbi_n
		.local_cal_success         (emif_s10_ddr4_b_status_local_cal_success),                   //  output,    width = 1,                    status.local_cal_success
		.local_cal_fail            (emif_s10_ddr4_b_status_local_cal_fail),                      //  output,    width = 1,                          .local_cal_fail
		.emif_usr_reset_n          (emif_s10_ddr4_b_emif_usr_reset_n_reset),                     //  output,    width = 1,          emif_usr_reset_n.reset_n
		.emif_usr_clk              (emif_s10_ddr4_b_emif_usr_clk_clk),                           //  output,    width = 1,              emif_usr_clk.clk
		.ctrl_ecc_user_interrupt_0 (),                                                           //  output,    width = 1, ctrl_ecc_user_interrupt_0.ctrl_ecc_user_interrupt
		.amm_ready_0               (mm_interconnect_2_emif_s10_ddr4_b_ctrl_amm_0_waitrequest),   //  output,    width = 1,                ctrl_amm_0.waitrequest_n
		.amm_read_0                (mm_interconnect_2_emif_s10_ddr4_b_ctrl_amm_0_read),          //   input,    width = 1,                          .read
		.amm_write_0               (mm_interconnect_2_emif_s10_ddr4_b_ctrl_amm_0_write),         //   input,    width = 1,                          .write
		.amm_address_0             (mm_interconnect_2_emif_s10_ddr4_b_ctrl_amm_0_address),       //   input,   width = 26,                          .address
		.amm_readdata_0            (mm_interconnect_2_emif_s10_ddr4_b_ctrl_amm_0_readdata),      //  output,  width = 512,                          .readdata
		.amm_writedata_0           (mm_interconnect_2_emif_s10_ddr4_b_ctrl_amm_0_writedata),     //   input,  width = 512,                          .writedata
		.amm_burstcount_0          (mm_interconnect_2_emif_s10_ddr4_b_ctrl_amm_0_burstcount),    //   input,    width = 7,                          .burstcount
		.amm_byteenable_0          (mm_interconnect_2_emif_s10_ddr4_b_ctrl_amm_0_byteenable),    //   input,   width = 64,                          .byteenable
		.amm_readdatavalid_0       (mm_interconnect_2_emif_s10_ddr4_b_ctrl_amm_0_readdatavalid)  //  output,    width = 1,                          .readdatavalid
	);

	DE10_Pro_QSYS_emif_s10_ddr4_c emif_s10_ddr4_c (
		.local_reset_req           (emif_s10_ddr4_c_local_reset_req_local_reset_req),            //   input,    width = 1,           local_reset_req.local_reset_req
		.local_reset_done          (emif_s10_ddr4_c_local_reset_status_local_reset_done),        //  output,    width = 1,        local_reset_status.local_reset_done
		.pll_ref_clk               (emif_s10_ddr4_c_pll_ref_clk_clk),                            //   input,    width = 1,               pll_ref_clk.clk
		.oct_rzqin                 (emif_s10_ddr4_c_oct_oct_rzqin),                              //   input,    width = 1,                       oct.oct_rzqin
		.mem_ck                    (emif_s10_ddr4_c_mem_mem_ck),                                 //  output,    width = 1,                       mem.mem_ck
		.mem_ck_n                  (emif_s10_ddr4_c_mem_mem_ck_n),                               //  output,    width = 1,                          .mem_ck_n
		.mem_a                     (emif_s10_ddr4_c_mem_mem_a),                                  //  output,   width = 17,                          .mem_a
		.mem_act_n                 (emif_s10_ddr4_c_mem_mem_act_n),                              //  output,    width = 1,                          .mem_act_n
		.mem_ba                    (emif_s10_ddr4_c_mem_mem_ba),                                 //  output,    width = 2,                          .mem_ba
		.mem_bg                    (emif_s10_ddr4_c_mem_mem_bg),                                 //  output,    width = 2,                          .mem_bg
		.mem_cke                   (emif_s10_ddr4_c_mem_mem_cke),                                //  output,    width = 1,                          .mem_cke
		.mem_cs_n                  (emif_s10_ddr4_c_mem_mem_cs_n),                               //  output,    width = 1,                          .mem_cs_n
		.mem_odt                   (emif_s10_ddr4_c_mem_mem_odt),                                //  output,    width = 1,                          .mem_odt
		.mem_reset_n               (emif_s10_ddr4_c_mem_mem_reset_n),                            //  output,    width = 1,                          .mem_reset_n
		.mem_par                   (emif_s10_ddr4_c_mem_mem_par),                                //  output,    width = 1,                          .mem_par
		.mem_alert_n               (emif_s10_ddr4_c_mem_mem_alert_n),                            //   input,    width = 1,                          .mem_alert_n
		.mem_dqs                   (emif_s10_ddr4_c_mem_mem_dqs),                                //   inout,    width = 9,                          .mem_dqs
		.mem_dqs_n                 (emif_s10_ddr4_c_mem_mem_dqs_n),                              //   inout,    width = 9,                          .mem_dqs_n
		.mem_dq                    (emif_s10_ddr4_c_mem_mem_dq),                                 //   inout,   width = 72,                          .mem_dq
		.mem_dbi_n                 (emif_s10_ddr4_c_mem_mem_dbi_n),                              //   inout,    width = 9,                          .mem_dbi_n
		.local_cal_success         (emif_s10_ddr4_c_status_local_cal_success),                   //  output,    width = 1,                    status.local_cal_success
		.local_cal_fail            (emif_s10_ddr4_c_status_local_cal_fail),                      //  output,    width = 1,                          .local_cal_fail
		.emif_usr_reset_n          (emif_s10_ddr4_c_emif_usr_reset_n_reset),                     //  output,    width = 1,          emif_usr_reset_n.reset_n
		.emif_usr_clk              (emif_s10_ddr4_c_emif_usr_clk_clk),                           //  output,    width = 1,              emif_usr_clk.clk
		.ctrl_ecc_user_interrupt_0 (),                                                           //  output,    width = 1, ctrl_ecc_user_interrupt_0.ctrl_ecc_user_interrupt
		.amm_ready_0               (mm_interconnect_2_emif_s10_ddr4_c_ctrl_amm_0_waitrequest),   //  output,    width = 1,                ctrl_amm_0.waitrequest_n
		.amm_read_0                (mm_interconnect_2_emif_s10_ddr4_c_ctrl_amm_0_read),          //   input,    width = 1,                          .read
		.amm_write_0               (mm_interconnect_2_emif_s10_ddr4_c_ctrl_amm_0_write),         //   input,    width = 1,                          .write
		.amm_address_0             (mm_interconnect_2_emif_s10_ddr4_c_ctrl_amm_0_address),       //   input,   width = 26,                          .address
		.amm_readdata_0            (mm_interconnect_2_emif_s10_ddr4_c_ctrl_amm_0_readdata),      //  output,  width = 512,                          .readdata
		.amm_writedata_0           (mm_interconnect_2_emif_s10_ddr4_c_ctrl_amm_0_writedata),     //   input,  width = 512,                          .writedata
		.amm_burstcount_0          (mm_interconnect_2_emif_s10_ddr4_c_ctrl_amm_0_burstcount),    //   input,    width = 7,                          .burstcount
		.amm_byteenable_0          (mm_interconnect_2_emif_s10_ddr4_c_ctrl_amm_0_byteenable),    //   input,   width = 64,                          .byteenable
		.amm_readdatavalid_0       (mm_interconnect_2_emif_s10_ddr4_c_ctrl_amm_0_readdatavalid)  //  output,    width = 1,                          .readdatavalid
	);

	DE10_Pro_QSYS_emif_s10_ddr4_d emif_s10_ddr4_d (
		.local_reset_req           (emif_s10_ddr4_d_local_reset_req_local_reset_req),            //   input,    width = 1,           local_reset_req.local_reset_req
		.local_reset_done          (emif_s10_ddr4_d_local_reset_status_local_reset_done),        //  output,    width = 1,        local_reset_status.local_reset_done
		.pll_ref_clk               (emif_s10_ddr4_d_pll_ref_clk_clk),                            //   input,    width = 1,               pll_ref_clk.clk
		.oct_rzqin                 (emif_s10_ddr4_d_oct_oct_rzqin),                              //   input,    width = 1,                       oct.oct_rzqin
		.mem_ck                    (emif_s10_ddr4_d_mem_mem_ck),                                 //  output,    width = 1,                       mem.mem_ck
		.mem_ck_n                  (emif_s10_ddr4_d_mem_mem_ck_n),                               //  output,    width = 1,                          .mem_ck_n
		.mem_a                     (emif_s10_ddr4_d_mem_mem_a),                                  //  output,   width = 17,                          .mem_a
		.mem_act_n                 (emif_s10_ddr4_d_mem_mem_act_n),                              //  output,    width = 1,                          .mem_act_n
		.mem_ba                    (emif_s10_ddr4_d_mem_mem_ba),                                 //  output,    width = 2,                          .mem_ba
		.mem_bg                    (emif_s10_ddr4_d_mem_mem_bg),                                 //  output,    width = 2,                          .mem_bg
		.mem_cke                   (emif_s10_ddr4_d_mem_mem_cke),                                //  output,    width = 1,                          .mem_cke
		.mem_cs_n                  (emif_s10_ddr4_d_mem_mem_cs_n),                               //  output,    width = 1,                          .mem_cs_n
		.mem_odt                   (emif_s10_ddr4_d_mem_mem_odt),                                //  output,    width = 1,                          .mem_odt
		.mem_reset_n               (emif_s10_ddr4_d_mem_mem_reset_n),                            //  output,    width = 1,                          .mem_reset_n
		.mem_par                   (emif_s10_ddr4_d_mem_mem_par),                                //  output,    width = 1,                          .mem_par
		.mem_alert_n               (emif_s10_ddr4_d_mem_mem_alert_n),                            //   input,    width = 1,                          .mem_alert_n
		.mem_dqs                   (emif_s10_ddr4_d_mem_mem_dqs),                                //   inout,    width = 9,                          .mem_dqs
		.mem_dqs_n                 (emif_s10_ddr4_d_mem_mem_dqs_n),                              //   inout,    width = 9,                          .mem_dqs_n
		.mem_dq                    (emif_s10_ddr4_d_mem_mem_dq),                                 //   inout,   width = 72,                          .mem_dq
		.mem_dbi_n                 (emif_s10_ddr4_d_mem_mem_dbi_n),                              //   inout,    width = 9,                          .mem_dbi_n
		.local_cal_success         (emif_s10_ddr4_d_status_local_cal_success),                   //  output,    width = 1,                    status.local_cal_success
		.local_cal_fail            (emif_s10_ddr4_d_status_local_cal_fail),                      //  output,    width = 1,                          .local_cal_fail
		.emif_usr_reset_n          (emif_s10_ddr4_d_emif_usr_reset_n_reset),                     //  output,    width = 1,          emif_usr_reset_n.reset_n
		.emif_usr_clk              (emif_s10_ddr4_d_emif_usr_clk_clk),                           //  output,    width = 1,              emif_usr_clk.clk
		.ctrl_ecc_user_interrupt_0 (),                                                           //  output,    width = 1, ctrl_ecc_user_interrupt_0.ctrl_ecc_user_interrupt
		.amm_ready_0               (mm_interconnect_2_emif_s10_ddr4_d_ctrl_amm_0_waitrequest),   //  output,    width = 1,                ctrl_amm_0.waitrequest_n
		.amm_read_0                (mm_interconnect_2_emif_s10_ddr4_d_ctrl_amm_0_read),          //   input,    width = 1,                          .read
		.amm_write_0               (mm_interconnect_2_emif_s10_ddr4_d_ctrl_amm_0_write),         //   input,    width = 1,                          .write
		.amm_address_0             (mm_interconnect_2_emif_s10_ddr4_d_ctrl_amm_0_address),       //   input,   width = 26,                          .address
		.amm_readdata_0            (mm_interconnect_2_emif_s10_ddr4_d_ctrl_amm_0_readdata),      //  output,  width = 512,                          .readdata
		.amm_writedata_0           (mm_interconnect_2_emif_s10_ddr4_d_ctrl_amm_0_writedata),     //   input,  width = 512,                          .writedata
		.amm_burstcount_0          (mm_interconnect_2_emif_s10_ddr4_d_ctrl_amm_0_burstcount),    //   input,    width = 7,                          .burstcount
		.amm_byteenable_0          (mm_interconnect_2_emif_s10_ddr4_d_ctrl_amm_0_byteenable),    //   input,   width = 64,                          .byteenable
		.amm_readdatavalid_0       (mm_interconnect_2_emif_s10_ddr4_d_ctrl_amm_0_readdatavalid)  //  output,    width = 1,                          .readdatavalid
	);

	DE10_Pro_QSYS_iopll_0 iopll_0 (
		.rst      (reset_in_out_reset_reset), //   input,  width = 1,   reset.reset
		.refclk   (clock_in_out_clk_clk),     //   input,  width = 1,  refclk.clk
		.locked   (iopll_0_locked_export),    //  output,  width = 1,  locked.export
		.outclk_0 (iopll_0_outclk0_clk),      //  output,  width = 1, outclk0.clk
		.outclk_1 (iopll_0_outclk1_clk),      //  output,  width = 1, outclk1.clk
		.outclk_2 (iopll_0_outclk2_clk)       //  output,  width = 1, outclk2.clk
	);

	DE10_Pro_QSYS_jtag_uart_0 jtag_uart_0 (
		.av_chipselect  (mm_interconnect_3_jtag_uart_0_avalon_jtag_slave_chipselect),  //   input,   width = 1, avalon_jtag_slave.chipselect
		.av_address     (mm_interconnect_3_jtag_uart_0_avalon_jtag_slave_address),     //   input,   width = 1,                  .address
		.av_read_n      (~mm_interconnect_3_jtag_uart_0_avalon_jtag_slave_read),       //   input,   width = 1,                  .read_n
		.av_readdata    (mm_interconnect_3_jtag_uart_0_avalon_jtag_slave_readdata),    //  output,  width = 32,                  .readdata
		.av_write_n     (~mm_interconnect_3_jtag_uart_0_avalon_jtag_slave_write),      //   input,   width = 1,                  .write_n
		.av_writedata   (mm_interconnect_3_jtag_uart_0_avalon_jtag_slave_writedata),   //   input,  width = 32,                  .writedata
		.av_waitrequest (mm_interconnect_3_jtag_uart_0_avalon_jtag_slave_waitrequest), //  output,   width = 1,                  .waitrequest
		.clk            (iopll_0_outclk0_clk),                                         //   input,   width = 1,               clk.clk
		.av_irq         (irq_synchronizer_receiver_irq),                               //  output,   width = 1,               irq.irq
		.rst_n          (~rst_controller_003_reset_out_reset)                          //   input,   width = 1,             reset.reset_n
	);

	DE10_Pro_QSYS_jtag_uart_1 jtag_uart_1 (
		.clk            (iopll_0_outclk2_clk),                                         //   input,   width = 1,               clk.clk
		.rst_n          (~rst_controller_reset_out_reset),                             //   input,   width = 1,             reset.reset_n
		.av_chipselect  (mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_chipselect),  //   input,   width = 1, avalon_jtag_slave.chipselect
		.av_address     (mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_address),     //   input,   width = 1,                  .address
		.av_read_n      (~mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_read),       //   input,   width = 1,                  .read_n
		.av_readdata    (mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_readdata),    //  output,  width = 32,                  .readdata
		.av_write_n     (~mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_write),      //   input,   width = 1,                  .write_n
		.av_writedata   (mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_writedata),   //   input,  width = 32,                  .writedata
		.av_waitrequest (mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_waitrequest), //  output,   width = 1,                  .waitrequest
		.av_irq         ()                                                             //  output,   width = 1,               irq.irq
	);

	DE10_Pro_QSYS_mm_clock_crossing_bridge_50m mm_clock_crossing_bridge_50m (
		.m0_waitrequest   (mm_clock_crossing_bridge_50m_m0_waitrequest),                     //   input,   width = 1,       m0.waitrequest
		.m0_readdata      (mm_clock_crossing_bridge_50m_m0_readdata),                        //   input,  width = 32,         .readdata
		.m0_readdatavalid (mm_clock_crossing_bridge_50m_m0_readdatavalid),                   //   input,   width = 1,         .readdatavalid
		.m0_burstcount    (mm_clock_crossing_bridge_50m_m0_burstcount),                      //  output,   width = 1,         .burstcount
		.m0_writedata     (mm_clock_crossing_bridge_50m_m0_writedata),                       //  output,  width = 32,         .writedata
		.m0_address       (mm_clock_crossing_bridge_50m_m0_address),                         //  output,   width = 7,         .address
		.m0_write         (mm_clock_crossing_bridge_50m_m0_write),                           //  output,   width = 1,         .write
		.m0_read          (mm_clock_crossing_bridge_50m_m0_read),                            //  output,   width = 1,         .read
		.m0_byteenable    (mm_clock_crossing_bridge_50m_m0_byteenable),                      //  output,   width = 4,         .byteenable
		.m0_debugaccess   (mm_clock_crossing_bridge_50m_m0_debugaccess),                     //  output,   width = 1,         .debugaccess
		.m0_clk           (iopll_0_outclk0_clk),                                             //   input,   width = 1,   m0_clk.clk
		.m0_reset         (rst_controller_001_reset_out_reset),                              //   input,   width = 1, m0_reset.reset
		.s0_waitrequest   (mm_interconnect_1_mm_clock_crossing_bridge_50m_s0_waitrequest),   //  output,   width = 1,       s0.waitrequest
		.s0_readdata      (mm_interconnect_1_mm_clock_crossing_bridge_50m_s0_readdata),      //  output,  width = 32,         .readdata
		.s0_readdatavalid (mm_interconnect_1_mm_clock_crossing_bridge_50m_s0_readdatavalid), //  output,   width = 1,         .readdatavalid
		.s0_burstcount    (mm_interconnect_1_mm_clock_crossing_bridge_50m_s0_burstcount),    //   input,   width = 1,         .burstcount
		.s0_writedata     (mm_interconnect_1_mm_clock_crossing_bridge_50m_s0_writedata),     //   input,  width = 32,         .writedata
		.s0_address       (mm_interconnect_1_mm_clock_crossing_bridge_50m_s0_address),       //   input,   width = 7,         .address
		.s0_write         (mm_interconnect_1_mm_clock_crossing_bridge_50m_s0_write),         //   input,   width = 1,         .write
		.s0_read          (mm_interconnect_1_mm_clock_crossing_bridge_50m_s0_read),          //   input,   width = 1,         .read
		.s0_byteenable    (mm_interconnect_1_mm_clock_crossing_bridge_50m_s0_byteenable),    //   input,   width = 4,         .byteenable
		.s0_debugaccess   (mm_interconnect_1_mm_clock_crossing_bridge_50m_s0_debugaccess),   //   input,   width = 1,         .debugaccess
		.s0_clk           (iopll_0_outclk1_clk),                                             //   input,   width = 1,   s0_clk.clk
		.s0_reset         (rst_controller_002_reset_out_reset)                               //   input,   width = 1, s0_reset.reset
	);

	DE10_Pro_QSYS_nios2_gen2_0 nios2_gen2_0 (
		.clk                                 (iopll_0_outclk1_clk),                                        //   input,   width = 1,                       clk.clk
		.dummy_ci_port                       (),                                                           //  output,   width = 1, custom_instruction_master.readra
		.d_address                           (nios2_gen2_0_data_master_address),                           //  output,  width = 31,               data_master.address
		.d_byteenable                        (nios2_gen2_0_data_master_byteenable),                        //  output,   width = 4,                          .byteenable
		.d_read                              (nios2_gen2_0_data_master_read),                              //  output,   width = 1,                          .read
		.d_readdata                          (nios2_gen2_0_data_master_readdata),                          //   input,  width = 32,                          .readdata
		.d_waitrequest                       (nios2_gen2_0_data_master_waitrequest),                       //   input,   width = 1,                          .waitrequest
		.d_write                             (nios2_gen2_0_data_master_write),                             //  output,   width = 1,                          .write
		.d_writedata                         (nios2_gen2_0_data_master_writedata),                         //  output,  width = 32,                          .writedata
		.d_readdatavalid                     (nios2_gen2_0_data_master_readdatavalid),                     //   input,   width = 1,                          .readdatavalid
		.debug_mem_slave_debugaccess_to_roms (nios2_gen2_0_data_master_debugaccess),                       //  output,   width = 1,                          .debugaccess
		.debug_mem_slave_address             (mm_interconnect_1_nios2_gen2_0_debug_mem_slave_address),     //   input,   width = 9,           debug_mem_slave.address
		.debug_mem_slave_byteenable          (mm_interconnect_1_nios2_gen2_0_debug_mem_slave_byteenable),  //   input,   width = 4,                          .byteenable
		.debug_mem_slave_debugaccess         (mm_interconnect_1_nios2_gen2_0_debug_mem_slave_debugaccess), //   input,   width = 1,                          .debugaccess
		.debug_mem_slave_read                (mm_interconnect_1_nios2_gen2_0_debug_mem_slave_read),        //   input,   width = 1,                          .read
		.debug_mem_slave_readdata            (mm_interconnect_1_nios2_gen2_0_debug_mem_slave_readdata),    //  output,  width = 32,                          .readdata
		.debug_mem_slave_waitrequest         (mm_interconnect_1_nios2_gen2_0_debug_mem_slave_waitrequest), //  output,   width = 1,                          .waitrequest
		.debug_mem_slave_write               (mm_interconnect_1_nios2_gen2_0_debug_mem_slave_write),       //   input,   width = 1,                          .write
		.debug_mem_slave_writedata           (mm_interconnect_1_nios2_gen2_0_debug_mem_slave_writedata),   //   input,  width = 32,                          .writedata
		.debug_reset_request                 (nios2_gen2_0_debug_reset_request_reset),                     //  output,   width = 1,       debug_reset_request.reset
		.i_address                           (nios2_gen2_0_instruction_master_address),                    //  output,  width = 31,        instruction_master.address
		.i_read                              (nios2_gen2_0_instruction_master_read),                       //  output,   width = 1,                          .read
		.i_readdata                          (nios2_gen2_0_instruction_master_readdata),                   //   input,  width = 32,                          .readdata
		.i_waitrequest                       (nios2_gen2_0_instruction_master_waitrequest),                //   input,   width = 1,                          .waitrequest
		.i_readdatavalid                     (nios2_gen2_0_instruction_master_readdatavalid),              //   input,   width = 1,                          .readdatavalid
		.irq                                 (nios2_gen2_0_irq_irq),                                       //   input,  width = 32,                       irq.irq
		.reset_n                             (~rst_controller_004_reset_out_reset),                        //   input,   width = 1,                     reset.reset_n
		.reset_req                           (rst_controller_004_reset_out_reset_req)                      //   input,   width = 1,                          .reset_req
	);

	DE10_Pro_QSYS_onchip_memory2_0 onchip_memory2_0 (
		.clk        (iopll_0_outclk1_clk),                              //   input,   width = 1,   clk1.clk
		.reset      (rst_controller_004_reset_out_reset),               //   input,   width = 1, reset1.reset
		.reset_req  (rst_controller_004_reset_out_reset_req),           //   input,   width = 1,       .reset_req
		.address    (mm_interconnect_1_onchip_memory2_0_s1_address),    //   input,  width = 16,     s1.address
		.clken      (mm_interconnect_1_onchip_memory2_0_s1_clken),      //   input,   width = 1,       .clken
		.chipselect (mm_interconnect_1_onchip_memory2_0_s1_chipselect), //   input,   width = 1,       .chipselect
		.write      (mm_interconnect_1_onchip_memory2_0_s1_write),      //   input,   width = 1,       .write
		.readdata   (mm_interconnect_1_onchip_memory2_0_s1_readdata),   //  output,  width = 32,       .readdata
		.writedata  (mm_interconnect_1_onchip_memory2_0_s1_writedata),  //   input,  width = 32,       .writedata
		.byteenable (mm_interconnect_1_onchip_memory2_0_s1_byteenable)  //   input,   width = 4,       .byteenable
	);

	DE10_Pro_QSYS_pio_3 power_max_pio (
		.clk      (iopll_0_outclk0_clk),                         //   input,   width = 1,       clk.clk
		.reset_n  (~rst_controller_001_reset_out_reset),         //   input,   width = 1,     reset.reset_n
		.address  (mm_interconnect_3_power_max_pio_s1_address),  //   input,   width = 2,        s1.address
		.readdata (mm_interconnect_3_power_max_pio_s1_readdata), //  output,  width = 32,          .readdata
		.in_port  (powerreader_0_power_max_power_max)            //   input,  width = 24, power_max.power_max
	);

	DE10_Pro_QSYS_pio_2 power_min_pio (
		.clk      (iopll_0_outclk0_clk),                         //   input,   width = 1,       clk.clk
		.reset_n  (~rst_controller_001_reset_out_reset),         //   input,   width = 1,     reset.reset_n
		.address  (mm_interconnect_3_power_min_pio_s1_address),  //   input,   width = 2,        s1.address
		.readdata (mm_interconnect_3_power_min_pio_s1_readdata), //  output,  width = 32,          .readdata
		.in_port  (powerreader_0_power_min_power_min)            //   input,  width = 24, power_min.power_min
	);

	DE10_Pro_QSYS_reset_in reset_in (
		.clk       (clock_in_out_clk_clk),     //   input,  width = 1,       clk.clk
		.in_reset  (reset_reset),              //   input,  width = 1,  in_reset.reset
		.out_reset (reset_in_out_reset_reset)  //  output,  width = 1, out_reset.reset
	);

	DE10_Pro_QSYS_sysid_qsys_0 sysid_qsys_0 (
		.clock    (iopll_0_outclk0_clk),                                   //   input,   width = 1,           clk.clk
		.readdata (mm_interconnect_3_sysid_qsys_0_control_slave_readdata), //  output,  width = 32, control_slave.readdata
		.address  (mm_interconnect_3_sysid_qsys_0_control_slave_address),  //   input,   width = 1,              .address
		.reset_n  (~rst_controller_001_reset_out_reset)                    //   input,   width = 1,         reset.reset_n
	);

	DE10_Pro_QSYS_pio_1 temp_pio (
		.clk      (iopll_0_outclk0_clk),                    //   input,   width = 1,                 clk.clk
		.reset_n  (~rst_controller_001_reset_out_reset),    //   input,   width = 1,               reset.reset_n
		.address  (mm_interconnect_3_temp_pio_s1_address),  //   input,   width = 2,                  s1.address
		.readdata (mm_interconnect_3_temp_pio_s1_readdata), //  output,  width = 32,                    .readdata
		.in_port  (tempreader_0_temp_out_export)            //   input,   width = 8, external_connection.export
	);

	DE10_Pro_QSYS_timer_0 timer_0 (
		.clk        (iopll_0_outclk0_clk),                     //   input,   width = 1,   clk.clk
		.irq        (irq_synchronizer_001_receiver_irq),       //  output,   width = 1,   irq.irq
		.reset_n    (~rst_controller_001_reset_out_reset),     //   input,   width = 1, reset.reset_n
		.address    (mm_interconnect_3_timer_0_s1_address),    //   input,   width = 3,    s1.address
		.writedata  (mm_interconnect_3_timer_0_s1_writedata),  //   input,  width = 16,      .writedata
		.readdata   (mm_interconnect_3_timer_0_s1_readdata),   //  output,  width = 16,      .readdata
		.chipselect (mm_interconnect_3_timer_0_s1_chipselect), //   input,   width = 1,      .chipselect
		.write_n    (~mm_interconnect_3_timer_0_s1_write)      //   input,   width = 1,      .write_n
	);

	DE10_Pro_QSYS_altera_mm_interconnect_191_uoukggi mm_interconnect_0 (
		.Pebbles_0_avalon_master_address                                      (pebbles_0_avalon_master_address),                             //   input,   width = 3,                                        Pebbles_0_avalon_master.address
		.Pebbles_0_avalon_master_waitrequest                                  (pebbles_0_avalon_master_waitrequest),                         //  output,   width = 1,                                                               .waitrequest
		.Pebbles_0_avalon_master_read                                         (pebbles_0_avalon_master_read),                                //   input,   width = 1,                                                               .read
		.Pebbles_0_avalon_master_readdata                                     (pebbles_0_avalon_master_readdata),                            //  output,  width = 32,                                                               .readdata
		.Pebbles_0_avalon_master_write                                        (pebbles_0_avalon_master_write),                               //   input,   width = 1,                                                               .write
		.Pebbles_0_avalon_master_writedata                                    (pebbles_0_avalon_master_writedata),                           //   input,  width = 32,                                                               .writedata
		.jtag_uart_1_avalon_jtag_slave_address                                (mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_address),     //  output,   width = 1,                                  jtag_uart_1_avalon_jtag_slave.address
		.jtag_uart_1_avalon_jtag_slave_write                                  (mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_write),       //  output,   width = 1,                                                               .write
		.jtag_uart_1_avalon_jtag_slave_read                                   (mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_read),        //  output,   width = 1,                                                               .read
		.jtag_uart_1_avalon_jtag_slave_readdata                               (mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_readdata),    //   input,  width = 32,                                                               .readdata
		.jtag_uart_1_avalon_jtag_slave_writedata                              (mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_writedata),   //  output,  width = 32,                                                               .writedata
		.jtag_uart_1_avalon_jtag_slave_waitrequest                            (mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_waitrequest), //   input,   width = 1,                                                               .waitrequest
		.jtag_uart_1_avalon_jtag_slave_chipselect                             (mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_chipselect),  //  output,   width = 1,                                                               .chipselect
		.Pebbles_0_avalon_master_translator_reset_reset_bridge_in_reset_reset (rst_controller_005_reset_out_reset),                          //   input,   width = 1, Pebbles_0_avalon_master_translator_reset_reset_bridge_in_reset.reset
		.iopll_0_outclk2_clk                                                  (iopll_0_outclk2_clk)                                          //   input,   width = 1,                                                iopll_0_outclk2.clk
	);

	DE10_Pro_QSYS_altera_mm_interconnect_191_euo5c3i mm_interconnect_1 (
		.nios2_gen2_0_data_master_address                             (nios2_gen2_0_data_master_address),                                          //   input,  width = 31,                               nios2_gen2_0_data_master.address
		.nios2_gen2_0_data_master_waitrequest                         (nios2_gen2_0_data_master_waitrequest),                                      //  output,   width = 1,                                                       .waitrequest
		.nios2_gen2_0_data_master_byteenable                          (nios2_gen2_0_data_master_byteenable),                                       //   input,   width = 4,                                                       .byteenable
		.nios2_gen2_0_data_master_read                                (nios2_gen2_0_data_master_read),                                             //   input,   width = 1,                                                       .read
		.nios2_gen2_0_data_master_readdata                            (nios2_gen2_0_data_master_readdata),                                         //  output,  width = 32,                                                       .readdata
		.nios2_gen2_0_data_master_readdatavalid                       (nios2_gen2_0_data_master_readdatavalid),                                    //  output,   width = 1,                                                       .readdatavalid
		.nios2_gen2_0_data_master_write                               (nios2_gen2_0_data_master_write),                                            //   input,   width = 1,                                                       .write
		.nios2_gen2_0_data_master_writedata                           (nios2_gen2_0_data_master_writedata),                                        //   input,  width = 32,                                                       .writedata
		.nios2_gen2_0_data_master_debugaccess                         (nios2_gen2_0_data_master_debugaccess),                                      //   input,   width = 1,                                                       .debugaccess
		.nios2_gen2_0_instruction_master_address                      (nios2_gen2_0_instruction_master_address),                                   //   input,  width = 31,                        nios2_gen2_0_instruction_master.address
		.nios2_gen2_0_instruction_master_waitrequest                  (nios2_gen2_0_instruction_master_waitrequest),                               //  output,   width = 1,                                                       .waitrequest
		.nios2_gen2_0_instruction_master_read                         (nios2_gen2_0_instruction_master_read),                                      //   input,   width = 1,                                                       .read
		.nios2_gen2_0_instruction_master_readdata                     (nios2_gen2_0_instruction_master_readdata),                                  //  output,  width = 32,                                                       .readdata
		.nios2_gen2_0_instruction_master_readdatavalid                (nios2_gen2_0_instruction_master_readdatavalid),                             //  output,   width = 1,                                                       .readdatavalid
		.address_span_extender_ddr4_cntl_write                        (mm_interconnect_1_address_span_extender_ddr4_cntl_write),                   //  output,   width = 1,                        address_span_extender_ddr4_cntl.write
		.address_span_extender_ddr4_cntl_read                         (mm_interconnect_1_address_span_extender_ddr4_cntl_read),                    //  output,   width = 1,                                                       .read
		.address_span_extender_ddr4_cntl_readdata                     (mm_interconnect_1_address_span_extender_ddr4_cntl_readdata),                //   input,  width = 64,                                                       .readdata
		.address_span_extender_ddr4_cntl_writedata                    (mm_interconnect_1_address_span_extender_ddr4_cntl_writedata),               //  output,  width = 64,                                                       .writedata
		.address_span_extender_ddr4_cntl_byteenable                   (mm_interconnect_1_address_span_extender_ddr4_cntl_byteenable),              //  output,   width = 8,                                                       .byteenable
		.nios2_gen2_0_debug_mem_slave_address                         (mm_interconnect_1_nios2_gen2_0_debug_mem_slave_address),                    //  output,   width = 9,                           nios2_gen2_0_debug_mem_slave.address
		.nios2_gen2_0_debug_mem_slave_write                           (mm_interconnect_1_nios2_gen2_0_debug_mem_slave_write),                      //  output,   width = 1,                                                       .write
		.nios2_gen2_0_debug_mem_slave_read                            (mm_interconnect_1_nios2_gen2_0_debug_mem_slave_read),                       //  output,   width = 1,                                                       .read
		.nios2_gen2_0_debug_mem_slave_readdata                        (mm_interconnect_1_nios2_gen2_0_debug_mem_slave_readdata),                   //   input,  width = 32,                                                       .readdata
		.nios2_gen2_0_debug_mem_slave_writedata                       (mm_interconnect_1_nios2_gen2_0_debug_mem_slave_writedata),                  //  output,  width = 32,                                                       .writedata
		.nios2_gen2_0_debug_mem_slave_byteenable                      (mm_interconnect_1_nios2_gen2_0_debug_mem_slave_byteenable),                 //  output,   width = 4,                                                       .byteenable
		.nios2_gen2_0_debug_mem_slave_waitrequest                     (mm_interconnect_1_nios2_gen2_0_debug_mem_slave_waitrequest),                //   input,   width = 1,                                                       .waitrequest
		.nios2_gen2_0_debug_mem_slave_debugaccess                     (mm_interconnect_1_nios2_gen2_0_debug_mem_slave_debugaccess),                //  output,   width = 1,                                                       .debugaccess
		.mm_clock_crossing_bridge_50m_s0_address                      (mm_interconnect_1_mm_clock_crossing_bridge_50m_s0_address),                 //  output,   width = 7,                        mm_clock_crossing_bridge_50m_s0.address
		.mm_clock_crossing_bridge_50m_s0_write                        (mm_interconnect_1_mm_clock_crossing_bridge_50m_s0_write),                   //  output,   width = 1,                                                       .write
		.mm_clock_crossing_bridge_50m_s0_read                         (mm_interconnect_1_mm_clock_crossing_bridge_50m_s0_read),                    //  output,   width = 1,                                                       .read
		.mm_clock_crossing_bridge_50m_s0_readdata                     (mm_interconnect_1_mm_clock_crossing_bridge_50m_s0_readdata),                //   input,  width = 32,                                                       .readdata
		.mm_clock_crossing_bridge_50m_s0_writedata                    (mm_interconnect_1_mm_clock_crossing_bridge_50m_s0_writedata),               //  output,  width = 32,                                                       .writedata
		.mm_clock_crossing_bridge_50m_s0_burstcount                   (mm_interconnect_1_mm_clock_crossing_bridge_50m_s0_burstcount),              //  output,   width = 1,                                                       .burstcount
		.mm_clock_crossing_bridge_50m_s0_byteenable                   (mm_interconnect_1_mm_clock_crossing_bridge_50m_s0_byteenable),              //  output,   width = 4,                                                       .byteenable
		.mm_clock_crossing_bridge_50m_s0_readdatavalid                (mm_interconnect_1_mm_clock_crossing_bridge_50m_s0_readdatavalid),           //   input,   width = 1,                                                       .readdatavalid
		.mm_clock_crossing_bridge_50m_s0_waitrequest                  (mm_interconnect_1_mm_clock_crossing_bridge_50m_s0_waitrequest),             //   input,   width = 1,                                                       .waitrequest
		.mm_clock_crossing_bridge_50m_s0_debugaccess                  (mm_interconnect_1_mm_clock_crossing_bridge_50m_s0_debugaccess),             //  output,   width = 1,                                                       .debugaccess
		.onchip_memory2_0_s1_address                                  (mm_interconnect_1_onchip_memory2_0_s1_address),                             //  output,  width = 16,                                    onchip_memory2_0_s1.address
		.onchip_memory2_0_s1_write                                    (mm_interconnect_1_onchip_memory2_0_s1_write),                               //  output,   width = 1,                                                       .write
		.onchip_memory2_0_s1_readdata                                 (mm_interconnect_1_onchip_memory2_0_s1_readdata),                            //   input,  width = 32,                                                       .readdata
		.onchip_memory2_0_s1_writedata                                (mm_interconnect_1_onchip_memory2_0_s1_writedata),                           //  output,  width = 32,                                                       .writedata
		.onchip_memory2_0_s1_byteenable                               (mm_interconnect_1_onchip_memory2_0_s1_byteenable),                          //  output,   width = 4,                                                       .byteenable
		.onchip_memory2_0_s1_chipselect                               (mm_interconnect_1_onchip_memory2_0_s1_chipselect),                          //  output,   width = 1,                                                       .chipselect
		.onchip_memory2_0_s1_clken                                    (mm_interconnect_1_onchip_memory2_0_s1_clken),                               //  output,   width = 1,                                                       .clken
		.address_span_extender_ddr4_windowed_slave_address            (mm_interconnect_1_address_span_extender_ddr4_windowed_slave_address),       //  output,  width = 28,              address_span_extender_ddr4_windowed_slave.address
		.address_span_extender_ddr4_windowed_slave_write              (mm_interconnect_1_address_span_extender_ddr4_windowed_slave_write),         //  output,   width = 1,                                                       .write
		.address_span_extender_ddr4_windowed_slave_read               (mm_interconnect_1_address_span_extender_ddr4_windowed_slave_read),          //  output,   width = 1,                                                       .read
		.address_span_extender_ddr4_windowed_slave_readdata           (mm_interconnect_1_address_span_extender_ddr4_windowed_slave_readdata),      //   input,  width = 32,                                                       .readdata
		.address_span_extender_ddr4_windowed_slave_writedata          (mm_interconnect_1_address_span_extender_ddr4_windowed_slave_writedata),     //  output,  width = 32,                                                       .writedata
		.address_span_extender_ddr4_windowed_slave_burstcount         (mm_interconnect_1_address_span_extender_ddr4_windowed_slave_burstcount),    //  output,   width = 1,                                                       .burstcount
		.address_span_extender_ddr4_windowed_slave_byteenable         (mm_interconnect_1_address_span_extender_ddr4_windowed_slave_byteenable),    //  output,   width = 4,                                                       .byteenable
		.address_span_extender_ddr4_windowed_slave_readdatavalid      (mm_interconnect_1_address_span_extender_ddr4_windowed_slave_readdatavalid), //   input,   width = 1,                                                       .readdatavalid
		.address_span_extender_ddr4_windowed_slave_waitrequest        (mm_interconnect_1_address_span_extender_ddr4_windowed_slave_waitrequest),   //   input,   width = 1,                                                       .waitrequest
		.nios2_gen2_0_reset_reset_bridge_in_reset_reset               (rst_controller_004_reset_out_reset),                                        //   input,   width = 1,               nios2_gen2_0_reset_reset_bridge_in_reset.reset
		.address_span_extender_ddr4_reset_reset_bridge_in_reset_reset (rst_controller_002_reset_out_reset),                                        //   input,   width = 1, address_span_extender_ddr4_reset_reset_bridge_in_reset.reset
		.iopll_0_outclk1_clk                                          (iopll_0_outclk1_clk)                                                        //   input,   width = 1,                                        iopll_0_outclk1.clk
	);

	DE10_Pro_QSYS_altera_mm_interconnect_191_6msup2y mm_interconnect_2 (
		.address_span_extender_ddr4_expanded_master_address                      (address_span_extender_ddr4_expanded_master_address),         //   input,   width = 34,                        address_span_extender_ddr4_expanded_master.address
		.address_span_extender_ddr4_expanded_master_waitrequest                  (address_span_extender_ddr4_expanded_master_waitrequest),     //  output,    width = 1,                                                                  .waitrequest
		.address_span_extender_ddr4_expanded_master_burstcount                   (address_span_extender_ddr4_expanded_master_burstcount),      //   input,    width = 1,                                                                  .burstcount
		.address_span_extender_ddr4_expanded_master_byteenable                   (address_span_extender_ddr4_expanded_master_byteenable),      //   input,    width = 4,                                                                  .byteenable
		.address_span_extender_ddr4_expanded_master_read                         (address_span_extender_ddr4_expanded_master_read),            //   input,    width = 1,                                                                  .read
		.address_span_extender_ddr4_expanded_master_readdata                     (address_span_extender_ddr4_expanded_master_readdata),        //  output,   width = 32,                                                                  .readdata
		.address_span_extender_ddr4_expanded_master_readdatavalid                (address_span_extender_ddr4_expanded_master_readdatavalid),   //  output,    width = 1,                                                                  .readdatavalid
		.address_span_extender_ddr4_expanded_master_write                        (address_span_extender_ddr4_expanded_master_write),           //   input,    width = 1,                                                                  .write
		.address_span_extender_ddr4_expanded_master_writedata                    (address_span_extender_ddr4_expanded_master_writedata),       //   input,   width = 32,                                                                  .writedata
		.emif_s10_ddr4_a_ctrl_amm_0_address                                      (mm_interconnect_2_emif_s10_ddr4_a_ctrl_amm_0_address),       //  output,   width = 26,                                        emif_s10_ddr4_a_ctrl_amm_0.address
		.emif_s10_ddr4_a_ctrl_amm_0_write                                        (mm_interconnect_2_emif_s10_ddr4_a_ctrl_amm_0_write),         //  output,    width = 1,                                                                  .write
		.emif_s10_ddr4_a_ctrl_amm_0_read                                         (mm_interconnect_2_emif_s10_ddr4_a_ctrl_amm_0_read),          //  output,    width = 1,                                                                  .read
		.emif_s10_ddr4_a_ctrl_amm_0_readdata                                     (mm_interconnect_2_emif_s10_ddr4_a_ctrl_amm_0_readdata),      //   input,  width = 512,                                                                  .readdata
		.emif_s10_ddr4_a_ctrl_amm_0_writedata                                    (mm_interconnect_2_emif_s10_ddr4_a_ctrl_amm_0_writedata),     //  output,  width = 512,                                                                  .writedata
		.emif_s10_ddr4_a_ctrl_amm_0_burstcount                                   (mm_interconnect_2_emif_s10_ddr4_a_ctrl_amm_0_burstcount),    //  output,    width = 7,                                                                  .burstcount
		.emif_s10_ddr4_a_ctrl_amm_0_byteenable                                   (mm_interconnect_2_emif_s10_ddr4_a_ctrl_amm_0_byteenable),    //  output,   width = 64,                                                                  .byteenable
		.emif_s10_ddr4_a_ctrl_amm_0_readdatavalid                                (mm_interconnect_2_emif_s10_ddr4_a_ctrl_amm_0_readdatavalid), //   input,    width = 1,                                                                  .readdatavalid
		.emif_s10_ddr4_a_ctrl_amm_0_waitrequest                                  (~mm_interconnect_2_emif_s10_ddr4_a_ctrl_amm_0_waitrequest),  //   input,    width = 1,                                                                  .waitrequest
		.emif_s10_ddr4_b_ctrl_amm_0_address                                      (mm_interconnect_2_emif_s10_ddr4_b_ctrl_amm_0_address),       //  output,   width = 26,                                        emif_s10_ddr4_b_ctrl_amm_0.address
		.emif_s10_ddr4_b_ctrl_amm_0_write                                        (mm_interconnect_2_emif_s10_ddr4_b_ctrl_amm_0_write),         //  output,    width = 1,                                                                  .write
		.emif_s10_ddr4_b_ctrl_amm_0_read                                         (mm_interconnect_2_emif_s10_ddr4_b_ctrl_amm_0_read),          //  output,    width = 1,                                                                  .read
		.emif_s10_ddr4_b_ctrl_amm_0_readdata                                     (mm_interconnect_2_emif_s10_ddr4_b_ctrl_amm_0_readdata),      //   input,  width = 512,                                                                  .readdata
		.emif_s10_ddr4_b_ctrl_amm_0_writedata                                    (mm_interconnect_2_emif_s10_ddr4_b_ctrl_amm_0_writedata),     //  output,  width = 512,                                                                  .writedata
		.emif_s10_ddr4_b_ctrl_amm_0_burstcount                                   (mm_interconnect_2_emif_s10_ddr4_b_ctrl_amm_0_burstcount),    //  output,    width = 7,                                                                  .burstcount
		.emif_s10_ddr4_b_ctrl_amm_0_byteenable                                   (mm_interconnect_2_emif_s10_ddr4_b_ctrl_amm_0_byteenable),    //  output,   width = 64,                                                                  .byteenable
		.emif_s10_ddr4_b_ctrl_amm_0_readdatavalid                                (mm_interconnect_2_emif_s10_ddr4_b_ctrl_amm_0_readdatavalid), //   input,    width = 1,                                                                  .readdatavalid
		.emif_s10_ddr4_b_ctrl_amm_0_waitrequest                                  (~mm_interconnect_2_emif_s10_ddr4_b_ctrl_amm_0_waitrequest),  //   input,    width = 1,                                                                  .waitrequest
		.emif_s10_ddr4_c_ctrl_amm_0_address                                      (mm_interconnect_2_emif_s10_ddr4_c_ctrl_amm_0_address),       //  output,   width = 26,                                        emif_s10_ddr4_c_ctrl_amm_0.address
		.emif_s10_ddr4_c_ctrl_amm_0_write                                        (mm_interconnect_2_emif_s10_ddr4_c_ctrl_amm_0_write),         //  output,    width = 1,                                                                  .write
		.emif_s10_ddr4_c_ctrl_amm_0_read                                         (mm_interconnect_2_emif_s10_ddr4_c_ctrl_amm_0_read),          //  output,    width = 1,                                                                  .read
		.emif_s10_ddr4_c_ctrl_amm_0_readdata                                     (mm_interconnect_2_emif_s10_ddr4_c_ctrl_amm_0_readdata),      //   input,  width = 512,                                                                  .readdata
		.emif_s10_ddr4_c_ctrl_amm_0_writedata                                    (mm_interconnect_2_emif_s10_ddr4_c_ctrl_amm_0_writedata),     //  output,  width = 512,                                                                  .writedata
		.emif_s10_ddr4_c_ctrl_amm_0_burstcount                                   (mm_interconnect_2_emif_s10_ddr4_c_ctrl_amm_0_burstcount),    //  output,    width = 7,                                                                  .burstcount
		.emif_s10_ddr4_c_ctrl_amm_0_byteenable                                   (mm_interconnect_2_emif_s10_ddr4_c_ctrl_amm_0_byteenable),    //  output,   width = 64,                                                                  .byteenable
		.emif_s10_ddr4_c_ctrl_amm_0_readdatavalid                                (mm_interconnect_2_emif_s10_ddr4_c_ctrl_amm_0_readdatavalid), //   input,    width = 1,                                                                  .readdatavalid
		.emif_s10_ddr4_c_ctrl_amm_0_waitrequest                                  (~mm_interconnect_2_emif_s10_ddr4_c_ctrl_amm_0_waitrequest),  //   input,    width = 1,                                                                  .waitrequest
		.emif_s10_ddr4_d_ctrl_amm_0_address                                      (mm_interconnect_2_emif_s10_ddr4_d_ctrl_amm_0_address),       //  output,   width = 26,                                        emif_s10_ddr4_d_ctrl_amm_0.address
		.emif_s10_ddr4_d_ctrl_amm_0_write                                        (mm_interconnect_2_emif_s10_ddr4_d_ctrl_amm_0_write),         //  output,    width = 1,                                                                  .write
		.emif_s10_ddr4_d_ctrl_amm_0_read                                         (mm_interconnect_2_emif_s10_ddr4_d_ctrl_amm_0_read),          //  output,    width = 1,                                                                  .read
		.emif_s10_ddr4_d_ctrl_amm_0_readdata                                     (mm_interconnect_2_emif_s10_ddr4_d_ctrl_amm_0_readdata),      //   input,  width = 512,                                                                  .readdata
		.emif_s10_ddr4_d_ctrl_amm_0_writedata                                    (mm_interconnect_2_emif_s10_ddr4_d_ctrl_amm_0_writedata),     //  output,  width = 512,                                                                  .writedata
		.emif_s10_ddr4_d_ctrl_amm_0_burstcount                                   (mm_interconnect_2_emif_s10_ddr4_d_ctrl_amm_0_burstcount),    //  output,    width = 7,                                                                  .burstcount
		.emif_s10_ddr4_d_ctrl_amm_0_byteenable                                   (mm_interconnect_2_emif_s10_ddr4_d_ctrl_amm_0_byteenable),    //  output,   width = 64,                                                                  .byteenable
		.emif_s10_ddr4_d_ctrl_amm_0_readdatavalid                                (mm_interconnect_2_emif_s10_ddr4_d_ctrl_amm_0_readdatavalid), //   input,    width = 1,                                                                  .readdatavalid
		.emif_s10_ddr4_d_ctrl_amm_0_waitrequest                                  (~mm_interconnect_2_emif_s10_ddr4_d_ctrl_amm_0_waitrequest),  //   input,    width = 1,                                                                  .waitrequest
		.address_span_extender_ddr4_reset_reset_bridge_in_reset_reset            (rst_controller_002_reset_out_reset),                         //   input,    width = 1,            address_span_extender_ddr4_reset_reset_bridge_in_reset.reset
		.emif_s10_ddr4_a_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset (rst_controller_006_reset_out_reset),                         //   input,    width = 1, emif_s10_ddr4_a_ctrl_amm_0_translator_reset_reset_bridge_in_reset.reset
		.emif_s10_ddr4_b_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset (rst_controller_007_reset_out_reset),                         //   input,    width = 1, emif_s10_ddr4_b_ctrl_amm_0_translator_reset_reset_bridge_in_reset.reset
		.emif_s10_ddr4_c_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset (rst_controller_008_reset_out_reset),                         //   input,    width = 1, emif_s10_ddr4_c_ctrl_amm_0_translator_reset_reset_bridge_in_reset.reset
		.emif_s10_ddr4_d_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset (rst_controller_009_reset_out_reset),                         //   input,    width = 1, emif_s10_ddr4_d_ctrl_amm_0_translator_reset_reset_bridge_in_reset.reset
		.iopll_0_outclk1_clk                                                     (iopll_0_outclk1_clk),                                        //   input,    width = 1,                                                   iopll_0_outclk1.clk
		.emif_s10_ddr4_a_emif_usr_clk_clk                                        (emif_s10_ddr4_a_emif_usr_clk_clk),                           //   input,    width = 1,                                      emif_s10_ddr4_a_emif_usr_clk.clk
		.emif_s10_ddr4_b_emif_usr_clk_clk                                        (emif_s10_ddr4_b_emif_usr_clk_clk),                           //   input,    width = 1,                                      emif_s10_ddr4_b_emif_usr_clk.clk
		.emif_s10_ddr4_c_emif_usr_clk_clk                                        (emif_s10_ddr4_c_emif_usr_clk_clk),                           //   input,    width = 1,                                      emif_s10_ddr4_c_emif_usr_clk.clk
		.emif_s10_ddr4_d_emif_usr_clk_clk                                        (emif_s10_ddr4_d_emif_usr_clk_clk)                            //   input,    width = 1,                                      emif_s10_ddr4_d_emif_usr_clk.clk
	);

	DE10_Pro_QSYS_altera_mm_interconnect_191_ur3xlvq mm_interconnect_3 (
		.mm_clock_crossing_bridge_50m_m0_address                           (mm_clock_crossing_bridge_50m_m0_address),                     //   input,   width = 7,                             mm_clock_crossing_bridge_50m_m0.address
		.mm_clock_crossing_bridge_50m_m0_waitrequest                       (mm_clock_crossing_bridge_50m_m0_waitrequest),                 //  output,   width = 1,                                                            .waitrequest
		.mm_clock_crossing_bridge_50m_m0_burstcount                        (mm_clock_crossing_bridge_50m_m0_burstcount),                  //   input,   width = 1,                                                            .burstcount
		.mm_clock_crossing_bridge_50m_m0_byteenable                        (mm_clock_crossing_bridge_50m_m0_byteenable),                  //   input,   width = 4,                                                            .byteenable
		.mm_clock_crossing_bridge_50m_m0_read                              (mm_clock_crossing_bridge_50m_m0_read),                        //   input,   width = 1,                                                            .read
		.mm_clock_crossing_bridge_50m_m0_readdata                          (mm_clock_crossing_bridge_50m_m0_readdata),                    //  output,  width = 32,                                                            .readdata
		.mm_clock_crossing_bridge_50m_m0_readdatavalid                     (mm_clock_crossing_bridge_50m_m0_readdatavalid),               //  output,   width = 1,                                                            .readdatavalid
		.mm_clock_crossing_bridge_50m_m0_write                             (mm_clock_crossing_bridge_50m_m0_write),                       //   input,   width = 1,                                                            .write
		.mm_clock_crossing_bridge_50m_m0_writedata                         (mm_clock_crossing_bridge_50m_m0_writedata),                   //   input,  width = 32,                                                            .writedata
		.mm_clock_crossing_bridge_50m_m0_debugaccess                       (mm_clock_crossing_bridge_50m_m0_debugaccess),                 //   input,   width = 1,                                                            .debugaccess
		.jtag_uart_0_avalon_jtag_slave_address                             (mm_interconnect_3_jtag_uart_0_avalon_jtag_slave_address),     //  output,   width = 1,                               jtag_uart_0_avalon_jtag_slave.address
		.jtag_uart_0_avalon_jtag_slave_write                               (mm_interconnect_3_jtag_uart_0_avalon_jtag_slave_write),       //  output,   width = 1,                                                            .write
		.jtag_uart_0_avalon_jtag_slave_read                                (mm_interconnect_3_jtag_uart_0_avalon_jtag_slave_read),        //  output,   width = 1,                                                            .read
		.jtag_uart_0_avalon_jtag_slave_readdata                            (mm_interconnect_3_jtag_uart_0_avalon_jtag_slave_readdata),    //   input,  width = 32,                                                            .readdata
		.jtag_uart_0_avalon_jtag_slave_writedata                           (mm_interconnect_3_jtag_uart_0_avalon_jtag_slave_writedata),   //  output,  width = 32,                                                            .writedata
		.jtag_uart_0_avalon_jtag_slave_waitrequest                         (mm_interconnect_3_jtag_uart_0_avalon_jtag_slave_waitrequest), //   input,   width = 1,                                                            .waitrequest
		.jtag_uart_0_avalon_jtag_slave_chipselect                          (mm_interconnect_3_jtag_uart_0_avalon_jtag_slave_chipselect),  //  output,   width = 1,                                                            .chipselect
		.sysid_qsys_0_control_slave_address                                (mm_interconnect_3_sysid_qsys_0_control_slave_address),        //  output,   width = 1,                                  sysid_qsys_0_control_slave.address
		.sysid_qsys_0_control_slave_readdata                               (mm_interconnect_3_sysid_qsys_0_control_slave_readdata),       //   input,  width = 32,                                                            .readdata
		.ddr4_local_reset_req_s1_address                                   (mm_interconnect_3_ddr4_local_reset_req_s1_address),           //  output,   width = 2,                                     ddr4_local_reset_req_s1.address
		.ddr4_local_reset_req_s1_write                                     (mm_interconnect_3_ddr4_local_reset_req_s1_write),             //  output,   width = 1,                                                            .write
		.ddr4_local_reset_req_s1_readdata                                  (mm_interconnect_3_ddr4_local_reset_req_s1_readdata),          //   input,  width = 32,                                                            .readdata
		.ddr4_local_reset_req_s1_writedata                                 (mm_interconnect_3_ddr4_local_reset_req_s1_writedata),         //  output,  width = 32,                                                            .writedata
		.ddr4_local_reset_req_s1_chipselect                                (mm_interconnect_3_ddr4_local_reset_req_s1_chipselect),        //  output,   width = 1,                                                            .chipselect
		.ddr4_status_s1_address                                            (mm_interconnect_3_ddr4_status_s1_address),                    //  output,   width = 2,                                              ddr4_status_s1.address
		.ddr4_status_s1_readdata                                           (mm_interconnect_3_ddr4_status_s1_readdata),                   //   input,  width = 32,                                                            .readdata
		.timer_0_s1_address                                                (mm_interconnect_3_timer_0_s1_address),                        //  output,   width = 3,                                                  timer_0_s1.address
		.timer_0_s1_write                                                  (mm_interconnect_3_timer_0_s1_write),                          //  output,   width = 1,                                                            .write
		.timer_0_s1_readdata                                               (mm_interconnect_3_timer_0_s1_readdata),                       //   input,  width = 16,                                                            .readdata
		.timer_0_s1_writedata                                              (mm_interconnect_3_timer_0_s1_writedata),                      //  output,  width = 16,                                                            .writedata
		.timer_0_s1_chipselect                                             (mm_interconnect_3_timer_0_s1_chipselect),                     //  output,   width = 1,                                                            .chipselect
		.temp_pio_s1_address                                               (mm_interconnect_3_temp_pio_s1_address),                       //  output,   width = 2,                                                 temp_pio_s1.address
		.temp_pio_s1_readdata                                              (mm_interconnect_3_temp_pio_s1_readdata),                      //   input,  width = 32,                                                            .readdata
		.power_min_pio_s1_address                                          (mm_interconnect_3_power_min_pio_s1_address),                  //  output,   width = 2,                                            power_min_pio_s1.address
		.power_min_pio_s1_readdata                                         (mm_interconnect_3_power_min_pio_s1_readdata),                 //   input,  width = 32,                                                            .readdata
		.power_max_pio_s1_address                                          (mm_interconnect_3_power_max_pio_s1_address),                  //  output,   width = 2,                                            power_max_pio_s1.address
		.power_max_pio_s1_readdata                                         (mm_interconnect_3_power_max_pio_s1_readdata),                 //   input,  width = 32,                                                            .readdata
		.mm_clock_crossing_bridge_50m_m0_reset_reset_bridge_in_reset_reset (rst_controller_001_reset_out_reset),                          //   input,   width = 1, mm_clock_crossing_bridge_50m_m0_reset_reset_bridge_in_reset.reset
		.jtag_uart_0_reset_reset_bridge_in_reset_reset                     (rst_controller_003_reset_out_reset),                          //   input,   width = 1,                     jtag_uart_0_reset_reset_bridge_in_reset.reset
		.iopll_0_outclk0_clk                                               (iopll_0_outclk0_clk)                                          //   input,   width = 1,                                             iopll_0_outclk0.clk
	);

	DE10_Pro_QSYS_altera_irq_mapper_191_65fmoqq irq_mapper (
		.clk           (iopll_0_outclk1_clk),                //   input,   width = 1,       clk.clk
		.reset         (rst_controller_004_reset_out_reset), //   input,   width = 1, clk_reset.reset
		.receiver0_irq (irq_mapper_receiver0_irq),           //   input,   width = 1, receiver0.irq
		.receiver1_irq (irq_mapper_receiver1_irq),           //   input,   width = 1, receiver1.irq
		.receiver2_irq (irq_mapper_receiver2_irq),           //   input,   width = 1, receiver2.irq
		.sender_irq    (nios2_gen2_0_irq_irq)                //  output,  width = 32,    sender.irq
	);

	DE10_Pro_QSYS_altera_irq_clock_crosser_191_4qcttxy #(
		.IRQ_WIDTH (1)
	) irq_synchronizer (
		.receiver_clk   (iopll_0_outclk0_clk),                //   input,  width = 1,       receiver_clk.clk
		.sender_clk     (iopll_0_outclk1_clk),                //   input,  width = 1,         sender_clk.clk
		.receiver_reset (rst_controller_003_reset_out_reset), //   input,  width = 1, receiver_clk_reset.reset
		.sender_reset   (rst_controller_004_reset_out_reset), //   input,  width = 1,   sender_clk_reset.reset
		.receiver_irq   (irq_synchronizer_receiver_irq),      //   input,  width = 1,           receiver.irq
		.sender_irq     (irq_mapper_receiver0_irq)            //  output,  width = 1,             sender.irq
	);

	DE10_Pro_QSYS_altera_irq_clock_crosser_191_4qcttxy #(
		.IRQ_WIDTH (1)
	) irq_synchronizer_001 (
		.receiver_clk   (iopll_0_outclk0_clk),                //   input,  width = 1,       receiver_clk.clk
		.sender_clk     (iopll_0_outclk1_clk),                //   input,  width = 1,         sender_clk.clk
		.receiver_reset (rst_controller_001_reset_out_reset), //   input,  width = 1, receiver_clk_reset.reset
		.sender_reset   (rst_controller_004_reset_out_reset), //   input,  width = 1,   sender_clk_reset.reset
		.receiver_irq   (irq_synchronizer_001_receiver_irq),  //   input,  width = 1,           receiver.irq
		.sender_irq     (irq_mapper_receiver1_irq)            //  output,  width = 1,             sender.irq
	);

	DE10_Pro_QSYS_altera_irq_clock_crosser_191_4qcttxy #(
		.IRQ_WIDTH (1)
	) irq_synchronizer_002 (
		.receiver_clk   (iopll_0_outclk0_clk),                //   input,  width = 1,       receiver_clk.clk
		.sender_clk     (iopll_0_outclk1_clk),                //   input,  width = 1,         sender_clk.clk
		.receiver_reset (rst_controller_001_reset_out_reset), //   input,  width = 1, receiver_clk_reset.reset
		.sender_reset   (rst_controller_004_reset_out_reset), //   input,  width = 1,   sender_clk_reset.reset
		.receiver_irq   (irq_synchronizer_002_receiver_irq),  //   input,  width = 1,           receiver.irq
		.sender_irq     (irq_mapper_receiver2_irq)            //  output,  width = 1,             sender.irq
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (reset_in_out_reset_reset),       //   input,  width = 1, reset_in0.reset
		.clk            (iopll_0_outclk2_clk),            //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_reset_out_reset), //  output,  width = 1, reset_out.reset
		.reset_req      (),                               // (terminated),                       
		.reset_req_in0  (1'b0),                           // (terminated),                       
		.reset_in1      (1'b0),                           // (terminated),                       
		.reset_req_in1  (1'b0),                           // (terminated),                       
		.reset_in2      (1'b0),                           // (terminated),                       
		.reset_req_in2  (1'b0),                           // (terminated),                       
		.reset_in3      (1'b0),                           // (terminated),                       
		.reset_req_in3  (1'b0),                           // (terminated),                       
		.reset_in4      (1'b0),                           // (terminated),                       
		.reset_req_in4  (1'b0),                           // (terminated),                       
		.reset_in5      (1'b0),                           // (terminated),                       
		.reset_req_in5  (1'b0),                           // (terminated),                       
		.reset_in6      (1'b0),                           // (terminated),                       
		.reset_req_in6  (1'b0),                           // (terminated),                       
		.reset_in7      (1'b0),                           // (terminated),                       
		.reset_req_in7  (1'b0),                           // (terminated),                       
		.reset_in8      (1'b0),                           // (terminated),                       
		.reset_req_in8  (1'b0),                           // (terminated),                       
		.reset_in9      (1'b0),                           // (terminated),                       
		.reset_req_in9  (1'b0),                           // (terminated),                       
		.reset_in10     (1'b0),                           // (terminated),                       
		.reset_req_in10 (1'b0),                           // (terminated),                       
		.reset_in11     (1'b0),                           // (terminated),                       
		.reset_req_in11 (1'b0),                           // (terminated),                       
		.reset_in12     (1'b0),                           // (terminated),                       
		.reset_req_in12 (1'b0),                           // (terminated),                       
		.reset_in13     (1'b0),                           // (terminated),                       
		.reset_req_in13 (1'b0),                           // (terminated),                       
		.reset_in14     (1'b0),                           // (terminated),                       
		.reset_req_in14 (1'b0),                           // (terminated),                       
		.reset_in15     (1'b0),                           // (terminated),                       
		.reset_req_in15 (1'b0)                            // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_001 (
		.reset_in0      (reset_in_out_reset_reset),           //   input,  width = 1, reset_in0.reset
		.clk            (iopll_0_outclk0_clk),                //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_001_reset_out_reset), //  output,  width = 1, reset_out.reset
		.reset_req      (),                                   // (terminated),                       
		.reset_req_in0  (1'b0),                               // (terminated),                       
		.reset_in1      (1'b0),                               // (terminated),                       
		.reset_req_in1  (1'b0),                               // (terminated),                       
		.reset_in2      (1'b0),                               // (terminated),                       
		.reset_req_in2  (1'b0),                               // (terminated),                       
		.reset_in3      (1'b0),                               // (terminated),                       
		.reset_req_in3  (1'b0),                               // (terminated),                       
		.reset_in4      (1'b0),                               // (terminated),                       
		.reset_req_in4  (1'b0),                               // (terminated),                       
		.reset_in5      (1'b0),                               // (terminated),                       
		.reset_req_in5  (1'b0),                               // (terminated),                       
		.reset_in6      (1'b0),                               // (terminated),                       
		.reset_req_in6  (1'b0),                               // (terminated),                       
		.reset_in7      (1'b0),                               // (terminated),                       
		.reset_req_in7  (1'b0),                               // (terminated),                       
		.reset_in8      (1'b0),                               // (terminated),                       
		.reset_req_in8  (1'b0),                               // (terminated),                       
		.reset_in9      (1'b0),                               // (terminated),                       
		.reset_req_in9  (1'b0),                               // (terminated),                       
		.reset_in10     (1'b0),                               // (terminated),                       
		.reset_req_in10 (1'b0),                               // (terminated),                       
		.reset_in11     (1'b0),                               // (terminated),                       
		.reset_req_in11 (1'b0),                               // (terminated),                       
		.reset_in12     (1'b0),                               // (terminated),                       
		.reset_req_in12 (1'b0),                               // (terminated),                       
		.reset_in13     (1'b0),                               // (terminated),                       
		.reset_req_in13 (1'b0),                               // (terminated),                       
		.reset_in14     (1'b0),                               // (terminated),                       
		.reset_req_in14 (1'b0),                               // (terminated),                       
		.reset_in15     (1'b0),                               // (terminated),                       
		.reset_req_in15 (1'b0)                                // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_002 (
		.reset_in0      (reset_in_out_reset_reset),           //   input,  width = 1, reset_in0.reset
		.clk            (iopll_0_outclk1_clk),                //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_002_reset_out_reset), //  output,  width = 1, reset_out.reset
		.reset_req      (),                                   // (terminated),                       
		.reset_req_in0  (1'b0),                               // (terminated),                       
		.reset_in1      (1'b0),                               // (terminated),                       
		.reset_req_in1  (1'b0),                               // (terminated),                       
		.reset_in2      (1'b0),                               // (terminated),                       
		.reset_req_in2  (1'b0),                               // (terminated),                       
		.reset_in3      (1'b0),                               // (terminated),                       
		.reset_req_in3  (1'b0),                               // (terminated),                       
		.reset_in4      (1'b0),                               // (terminated),                       
		.reset_req_in4  (1'b0),                               // (terminated),                       
		.reset_in5      (1'b0),                               // (terminated),                       
		.reset_req_in5  (1'b0),                               // (terminated),                       
		.reset_in6      (1'b0),                               // (terminated),                       
		.reset_req_in6  (1'b0),                               // (terminated),                       
		.reset_in7      (1'b0),                               // (terminated),                       
		.reset_req_in7  (1'b0),                               // (terminated),                       
		.reset_in8      (1'b0),                               // (terminated),                       
		.reset_req_in8  (1'b0),                               // (terminated),                       
		.reset_in9      (1'b0),                               // (terminated),                       
		.reset_req_in9  (1'b0),                               // (terminated),                       
		.reset_in10     (1'b0),                               // (terminated),                       
		.reset_req_in10 (1'b0),                               // (terminated),                       
		.reset_in11     (1'b0),                               // (terminated),                       
		.reset_req_in11 (1'b0),                               // (terminated),                       
		.reset_in12     (1'b0),                               // (terminated),                       
		.reset_req_in12 (1'b0),                               // (terminated),                       
		.reset_in13     (1'b0),                               // (terminated),                       
		.reset_req_in13 (1'b0),                               // (terminated),                       
		.reset_in14     (1'b0),                               // (terminated),                       
		.reset_req_in14 (1'b0),                               // (terminated),                       
		.reset_in15     (1'b0),                               // (terminated),                       
		.reset_req_in15 (1'b0)                                // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (2),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_003 (
		.reset_in0      (nios2_gen2_0_debug_reset_request_reset), //   input,  width = 1, reset_in0.reset
		.reset_in1      (reset_in_out_reset_reset),               //   input,  width = 1, reset_in1.reset
		.clk            (iopll_0_outclk0_clk),                    //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_003_reset_out_reset),     //  output,  width = 1, reset_out.reset
		.reset_req      (),                                       // (terminated),                       
		.reset_req_in0  (1'b0),                                   // (terminated),                       
		.reset_req_in1  (1'b0),                                   // (terminated),                       
		.reset_in2      (1'b0),                                   // (terminated),                       
		.reset_req_in2  (1'b0),                                   // (terminated),                       
		.reset_in3      (1'b0),                                   // (terminated),                       
		.reset_req_in3  (1'b0),                                   // (terminated),                       
		.reset_in4      (1'b0),                                   // (terminated),                       
		.reset_req_in4  (1'b0),                                   // (terminated),                       
		.reset_in5      (1'b0),                                   // (terminated),                       
		.reset_req_in5  (1'b0),                                   // (terminated),                       
		.reset_in6      (1'b0),                                   // (terminated),                       
		.reset_req_in6  (1'b0),                                   // (terminated),                       
		.reset_in7      (1'b0),                                   // (terminated),                       
		.reset_req_in7  (1'b0),                                   // (terminated),                       
		.reset_in8      (1'b0),                                   // (terminated),                       
		.reset_req_in8  (1'b0),                                   // (terminated),                       
		.reset_in9      (1'b0),                                   // (terminated),                       
		.reset_req_in9  (1'b0),                                   // (terminated),                       
		.reset_in10     (1'b0),                                   // (terminated),                       
		.reset_req_in10 (1'b0),                                   // (terminated),                       
		.reset_in11     (1'b0),                                   // (terminated),                       
		.reset_req_in11 (1'b0),                                   // (terminated),                       
		.reset_in12     (1'b0),                                   // (terminated),                       
		.reset_req_in12 (1'b0),                                   // (terminated),                       
		.reset_in13     (1'b0),                                   // (terminated),                       
		.reset_req_in13 (1'b0),                                   // (terminated),                       
		.reset_in14     (1'b0),                                   // (terminated),                       
		.reset_req_in14 (1'b0),                                   // (terminated),                       
		.reset_in15     (1'b0),                                   // (terminated),                       
		.reset_req_in15 (1'b0)                                    // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (2),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (1),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_004 (
		.reset_in0      (nios2_gen2_0_debug_reset_request_reset), //   input,  width = 1, reset_in0.reset
		.reset_in1      (reset_in_out_reset_reset),               //   input,  width = 1, reset_in1.reset
		.clk            (iopll_0_outclk1_clk),                    //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_004_reset_out_reset),     //  output,  width = 1, reset_out.reset
		.reset_req      (rst_controller_004_reset_out_reset_req), //  output,  width = 1,          .reset_req
		.reset_req_in0  (1'b0),                                   // (terminated),                       
		.reset_req_in1  (1'b0),                                   // (terminated),                       
		.reset_in2      (1'b0),                                   // (terminated),                       
		.reset_req_in2  (1'b0),                                   // (terminated),                       
		.reset_in3      (1'b0),                                   // (terminated),                       
		.reset_req_in3  (1'b0),                                   // (terminated),                       
		.reset_in4      (1'b0),                                   // (terminated),                       
		.reset_req_in4  (1'b0),                                   // (terminated),                       
		.reset_in5      (1'b0),                                   // (terminated),                       
		.reset_req_in5  (1'b0),                                   // (terminated),                       
		.reset_in6      (1'b0),                                   // (terminated),                       
		.reset_req_in6  (1'b0),                                   // (terminated),                       
		.reset_in7      (1'b0),                                   // (terminated),                       
		.reset_req_in7  (1'b0),                                   // (terminated),                       
		.reset_in8      (1'b0),                                   // (terminated),                       
		.reset_req_in8  (1'b0),                                   // (terminated),                       
		.reset_in9      (1'b0),                                   // (terminated),                       
		.reset_req_in9  (1'b0),                                   // (terminated),                       
		.reset_in10     (1'b0),                                   // (terminated),                       
		.reset_req_in10 (1'b0),                                   // (terminated),                       
		.reset_in11     (1'b0),                                   // (terminated),                       
		.reset_req_in11 (1'b0),                                   // (terminated),                       
		.reset_in12     (1'b0),                                   // (terminated),                       
		.reset_req_in12 (1'b0),                                   // (terminated),                       
		.reset_in13     (1'b0),                                   // (terminated),                       
		.reset_req_in13 (1'b0),                                   // (terminated),                       
		.reset_in14     (1'b0),                                   // (terminated),                       
		.reset_req_in14 (1'b0),                                   // (terminated),                       
		.reset_in15     (1'b0),                                   // (terminated),                       
		.reset_req_in15 (1'b0)                                    // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("both"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_005 (
		.reset_in0      (reset_in_out_reset_reset),           //   input,  width = 1, reset_in0.reset
		.clk            (iopll_0_outclk2_clk),                //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_005_reset_out_reset), //  output,  width = 1, reset_out.reset
		.reset_req      (),                                   // (terminated),                       
		.reset_req_in0  (1'b0),                               // (terminated),                       
		.reset_in1      (1'b0),                               // (terminated),                       
		.reset_req_in1  (1'b0),                               // (terminated),                       
		.reset_in2      (1'b0),                               // (terminated),                       
		.reset_req_in2  (1'b0),                               // (terminated),                       
		.reset_in3      (1'b0),                               // (terminated),                       
		.reset_req_in3  (1'b0),                               // (terminated),                       
		.reset_in4      (1'b0),                               // (terminated),                       
		.reset_req_in4  (1'b0),                               // (terminated),                       
		.reset_in5      (1'b0),                               // (terminated),                       
		.reset_req_in5  (1'b0),                               // (terminated),                       
		.reset_in6      (1'b0),                               // (terminated),                       
		.reset_req_in6  (1'b0),                               // (terminated),                       
		.reset_in7      (1'b0),                               // (terminated),                       
		.reset_req_in7  (1'b0),                               // (terminated),                       
		.reset_in8      (1'b0),                               // (terminated),                       
		.reset_req_in8  (1'b0),                               // (terminated),                       
		.reset_in9      (1'b0),                               // (terminated),                       
		.reset_req_in9  (1'b0),                               // (terminated),                       
		.reset_in10     (1'b0),                               // (terminated),                       
		.reset_req_in10 (1'b0),                               // (terminated),                       
		.reset_in11     (1'b0),                               // (terminated),                       
		.reset_req_in11 (1'b0),                               // (terminated),                       
		.reset_in12     (1'b0),                               // (terminated),                       
		.reset_req_in12 (1'b0),                               // (terminated),                       
		.reset_in13     (1'b0),                               // (terminated),                       
		.reset_req_in13 (1'b0),                               // (terminated),                       
		.reset_in14     (1'b0),                               // (terminated),                       
		.reset_req_in14 (1'b0),                               // (terminated),                       
		.reset_in15     (1'b0),                               // (terminated),                       
		.reset_req_in15 (1'b0)                                // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_006 (
		.reset_in0      (~emif_s10_ddr4_a_emif_usr_reset_n_reset), //   input,  width = 1, reset_in0.reset
		.clk            (emif_s10_ddr4_a_emif_usr_clk_clk),        //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_006_reset_out_reset),      //  output,  width = 1, reset_out.reset
		.reset_req      (),                                        // (terminated),                       
		.reset_req_in0  (1'b0),                                    // (terminated),                       
		.reset_in1      (1'b0),                                    // (terminated),                       
		.reset_req_in1  (1'b0),                                    // (terminated),                       
		.reset_in2      (1'b0),                                    // (terminated),                       
		.reset_req_in2  (1'b0),                                    // (terminated),                       
		.reset_in3      (1'b0),                                    // (terminated),                       
		.reset_req_in3  (1'b0),                                    // (terminated),                       
		.reset_in4      (1'b0),                                    // (terminated),                       
		.reset_req_in4  (1'b0),                                    // (terminated),                       
		.reset_in5      (1'b0),                                    // (terminated),                       
		.reset_req_in5  (1'b0),                                    // (terminated),                       
		.reset_in6      (1'b0),                                    // (terminated),                       
		.reset_req_in6  (1'b0),                                    // (terminated),                       
		.reset_in7      (1'b0),                                    // (terminated),                       
		.reset_req_in7  (1'b0),                                    // (terminated),                       
		.reset_in8      (1'b0),                                    // (terminated),                       
		.reset_req_in8  (1'b0),                                    // (terminated),                       
		.reset_in9      (1'b0),                                    // (terminated),                       
		.reset_req_in9  (1'b0),                                    // (terminated),                       
		.reset_in10     (1'b0),                                    // (terminated),                       
		.reset_req_in10 (1'b0),                                    // (terminated),                       
		.reset_in11     (1'b0),                                    // (terminated),                       
		.reset_req_in11 (1'b0),                                    // (terminated),                       
		.reset_in12     (1'b0),                                    // (terminated),                       
		.reset_req_in12 (1'b0),                                    // (terminated),                       
		.reset_in13     (1'b0),                                    // (terminated),                       
		.reset_req_in13 (1'b0),                                    // (terminated),                       
		.reset_in14     (1'b0),                                    // (terminated),                       
		.reset_req_in14 (1'b0),                                    // (terminated),                       
		.reset_in15     (1'b0),                                    // (terminated),                       
		.reset_req_in15 (1'b0)                                     // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_007 (
		.reset_in0      (~emif_s10_ddr4_b_emif_usr_reset_n_reset), //   input,  width = 1, reset_in0.reset
		.clk            (emif_s10_ddr4_b_emif_usr_clk_clk),        //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_007_reset_out_reset),      //  output,  width = 1, reset_out.reset
		.reset_req      (),                                        // (terminated),                       
		.reset_req_in0  (1'b0),                                    // (terminated),                       
		.reset_in1      (1'b0),                                    // (terminated),                       
		.reset_req_in1  (1'b0),                                    // (terminated),                       
		.reset_in2      (1'b0),                                    // (terminated),                       
		.reset_req_in2  (1'b0),                                    // (terminated),                       
		.reset_in3      (1'b0),                                    // (terminated),                       
		.reset_req_in3  (1'b0),                                    // (terminated),                       
		.reset_in4      (1'b0),                                    // (terminated),                       
		.reset_req_in4  (1'b0),                                    // (terminated),                       
		.reset_in5      (1'b0),                                    // (terminated),                       
		.reset_req_in5  (1'b0),                                    // (terminated),                       
		.reset_in6      (1'b0),                                    // (terminated),                       
		.reset_req_in6  (1'b0),                                    // (terminated),                       
		.reset_in7      (1'b0),                                    // (terminated),                       
		.reset_req_in7  (1'b0),                                    // (terminated),                       
		.reset_in8      (1'b0),                                    // (terminated),                       
		.reset_req_in8  (1'b0),                                    // (terminated),                       
		.reset_in9      (1'b0),                                    // (terminated),                       
		.reset_req_in9  (1'b0),                                    // (terminated),                       
		.reset_in10     (1'b0),                                    // (terminated),                       
		.reset_req_in10 (1'b0),                                    // (terminated),                       
		.reset_in11     (1'b0),                                    // (terminated),                       
		.reset_req_in11 (1'b0),                                    // (terminated),                       
		.reset_in12     (1'b0),                                    // (terminated),                       
		.reset_req_in12 (1'b0),                                    // (terminated),                       
		.reset_in13     (1'b0),                                    // (terminated),                       
		.reset_req_in13 (1'b0),                                    // (terminated),                       
		.reset_in14     (1'b0),                                    // (terminated),                       
		.reset_req_in14 (1'b0),                                    // (terminated),                       
		.reset_in15     (1'b0),                                    // (terminated),                       
		.reset_req_in15 (1'b0)                                     // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_008 (
		.reset_in0      (~emif_s10_ddr4_c_emif_usr_reset_n_reset), //   input,  width = 1, reset_in0.reset
		.clk            (emif_s10_ddr4_c_emif_usr_clk_clk),        //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_008_reset_out_reset),      //  output,  width = 1, reset_out.reset
		.reset_req      (),                                        // (terminated),                       
		.reset_req_in0  (1'b0),                                    // (terminated),                       
		.reset_in1      (1'b0),                                    // (terminated),                       
		.reset_req_in1  (1'b0),                                    // (terminated),                       
		.reset_in2      (1'b0),                                    // (terminated),                       
		.reset_req_in2  (1'b0),                                    // (terminated),                       
		.reset_in3      (1'b0),                                    // (terminated),                       
		.reset_req_in3  (1'b0),                                    // (terminated),                       
		.reset_in4      (1'b0),                                    // (terminated),                       
		.reset_req_in4  (1'b0),                                    // (terminated),                       
		.reset_in5      (1'b0),                                    // (terminated),                       
		.reset_req_in5  (1'b0),                                    // (terminated),                       
		.reset_in6      (1'b0),                                    // (terminated),                       
		.reset_req_in6  (1'b0),                                    // (terminated),                       
		.reset_in7      (1'b0),                                    // (terminated),                       
		.reset_req_in7  (1'b0),                                    // (terminated),                       
		.reset_in8      (1'b0),                                    // (terminated),                       
		.reset_req_in8  (1'b0),                                    // (terminated),                       
		.reset_in9      (1'b0),                                    // (terminated),                       
		.reset_req_in9  (1'b0),                                    // (terminated),                       
		.reset_in10     (1'b0),                                    // (terminated),                       
		.reset_req_in10 (1'b0),                                    // (terminated),                       
		.reset_in11     (1'b0),                                    // (terminated),                       
		.reset_req_in11 (1'b0),                                    // (terminated),                       
		.reset_in12     (1'b0),                                    // (terminated),                       
		.reset_req_in12 (1'b0),                                    // (terminated),                       
		.reset_in13     (1'b0),                                    // (terminated),                       
		.reset_req_in13 (1'b0),                                    // (terminated),                       
		.reset_in14     (1'b0),                                    // (terminated),                       
		.reset_req_in14 (1'b0),                                    // (terminated),                       
		.reset_in15     (1'b0),                                    // (terminated),                       
		.reset_req_in15 (1'b0)                                     // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_009 (
		.reset_in0      (~emif_s10_ddr4_d_emif_usr_reset_n_reset), //   input,  width = 1, reset_in0.reset
		.clk            (emif_s10_ddr4_d_emif_usr_clk_clk),        //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_009_reset_out_reset),      //  output,  width = 1, reset_out.reset
		.reset_req      (),                                        // (terminated),                       
		.reset_req_in0  (1'b0),                                    // (terminated),                       
		.reset_in1      (1'b0),                                    // (terminated),                       
		.reset_req_in1  (1'b0),                                    // (terminated),                       
		.reset_in2      (1'b0),                                    // (terminated),                       
		.reset_req_in2  (1'b0),                                    // (terminated),                       
		.reset_in3      (1'b0),                                    // (terminated),                       
		.reset_req_in3  (1'b0),                                    // (terminated),                       
		.reset_in4      (1'b0),                                    // (terminated),                       
		.reset_req_in4  (1'b0),                                    // (terminated),                       
		.reset_in5      (1'b0),                                    // (terminated),                       
		.reset_req_in5  (1'b0),                                    // (terminated),                       
		.reset_in6      (1'b0),                                    // (terminated),                       
		.reset_req_in6  (1'b0),                                    // (terminated),                       
		.reset_in7      (1'b0),                                    // (terminated),                       
		.reset_req_in7  (1'b0),                                    // (terminated),                       
		.reset_in8      (1'b0),                                    // (terminated),                       
		.reset_req_in8  (1'b0),                                    // (terminated),                       
		.reset_in9      (1'b0),                                    // (terminated),                       
		.reset_req_in9  (1'b0),                                    // (terminated),                       
		.reset_in10     (1'b0),                                    // (terminated),                       
		.reset_req_in10 (1'b0),                                    // (terminated),                       
		.reset_in11     (1'b0),                                    // (terminated),                       
		.reset_req_in11 (1'b0),                                    // (terminated),                       
		.reset_in12     (1'b0),                                    // (terminated),                       
		.reset_req_in12 (1'b0),                                    // (terminated),                       
		.reset_in13     (1'b0),                                    // (terminated),                       
		.reset_req_in13 (1'b0),                                    // (terminated),                       
		.reset_in14     (1'b0),                                    // (terminated),                       
		.reset_req_in14 (1'b0),                                    // (terminated),                       
		.reset_in15     (1'b0),                                    // (terminated),                       
		.reset_req_in15 (1'b0)                                     // (terminated),                       
	);

endmodule
