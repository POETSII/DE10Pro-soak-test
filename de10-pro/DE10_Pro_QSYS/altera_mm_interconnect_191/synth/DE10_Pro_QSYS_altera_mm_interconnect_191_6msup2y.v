// DE10_Pro_QSYS_altera_mm_interconnect_191_6msup2y.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 19.2 57

`timescale 1 ps / 1 ps
module DE10_Pro_QSYS_altera_mm_interconnect_191_6msup2y (
		input  wire [33:0]  address_span_extender_ddr4_expanded_master_address,                      //                        address_span_extender_ddr4_expanded_master.address
		output wire         address_span_extender_ddr4_expanded_master_waitrequest,                  //                                                                  .waitrequest
		input  wire [0:0]   address_span_extender_ddr4_expanded_master_burstcount,                   //                                                                  .burstcount
		input  wire [3:0]   address_span_extender_ddr4_expanded_master_byteenable,                   //                                                                  .byteenable
		input  wire         address_span_extender_ddr4_expanded_master_read,                         //                                                                  .read
		output wire [31:0]  address_span_extender_ddr4_expanded_master_readdata,                     //                                                                  .readdata
		output wire         address_span_extender_ddr4_expanded_master_readdatavalid,                //                                                                  .readdatavalid
		input  wire         address_span_extender_ddr4_expanded_master_write,                        //                                                                  .write
		input  wire [31:0]  address_span_extender_ddr4_expanded_master_writedata,                    //                                                                  .writedata
		output wire [25:0]  emif_s10_ddr4_a_ctrl_amm_0_address,                                      //                                        emif_s10_ddr4_a_ctrl_amm_0.address
		output wire         emif_s10_ddr4_a_ctrl_amm_0_write,                                        //                                                                  .write
		output wire         emif_s10_ddr4_a_ctrl_amm_0_read,                                         //                                                                  .read
		input  wire [511:0] emif_s10_ddr4_a_ctrl_amm_0_readdata,                                     //                                                                  .readdata
		output wire [511:0] emif_s10_ddr4_a_ctrl_amm_0_writedata,                                    //                                                                  .writedata
		output wire [6:0]   emif_s10_ddr4_a_ctrl_amm_0_burstcount,                                   //                                                                  .burstcount
		output wire [63:0]  emif_s10_ddr4_a_ctrl_amm_0_byteenable,                                   //                                                                  .byteenable
		input  wire         emif_s10_ddr4_a_ctrl_amm_0_readdatavalid,                                //                                                                  .readdatavalid
		input  wire         emif_s10_ddr4_a_ctrl_amm_0_waitrequest,                                  //                                                                  .waitrequest
		output wire [25:0]  emif_s10_ddr4_b_ctrl_amm_0_address,                                      //                                        emif_s10_ddr4_b_ctrl_amm_0.address
		output wire         emif_s10_ddr4_b_ctrl_amm_0_write,                                        //                                                                  .write
		output wire         emif_s10_ddr4_b_ctrl_amm_0_read,                                         //                                                                  .read
		input  wire [511:0] emif_s10_ddr4_b_ctrl_amm_0_readdata,                                     //                                                                  .readdata
		output wire [511:0] emif_s10_ddr4_b_ctrl_amm_0_writedata,                                    //                                                                  .writedata
		output wire [6:0]   emif_s10_ddr4_b_ctrl_amm_0_burstcount,                                   //                                                                  .burstcount
		output wire [63:0]  emif_s10_ddr4_b_ctrl_amm_0_byteenable,                                   //                                                                  .byteenable
		input  wire         emif_s10_ddr4_b_ctrl_amm_0_readdatavalid,                                //                                                                  .readdatavalid
		input  wire         emif_s10_ddr4_b_ctrl_amm_0_waitrequest,                                  //                                                                  .waitrequest
		output wire [25:0]  emif_s10_ddr4_c_ctrl_amm_0_address,                                      //                                        emif_s10_ddr4_c_ctrl_amm_0.address
		output wire         emif_s10_ddr4_c_ctrl_amm_0_write,                                        //                                                                  .write
		output wire         emif_s10_ddr4_c_ctrl_amm_0_read,                                         //                                                                  .read
		input  wire [511:0] emif_s10_ddr4_c_ctrl_amm_0_readdata,                                     //                                                                  .readdata
		output wire [511:0] emif_s10_ddr4_c_ctrl_amm_0_writedata,                                    //                                                                  .writedata
		output wire [6:0]   emif_s10_ddr4_c_ctrl_amm_0_burstcount,                                   //                                                                  .burstcount
		output wire [63:0]  emif_s10_ddr4_c_ctrl_amm_0_byteenable,                                   //                                                                  .byteenable
		input  wire         emif_s10_ddr4_c_ctrl_amm_0_readdatavalid,                                //                                                                  .readdatavalid
		input  wire         emif_s10_ddr4_c_ctrl_amm_0_waitrequest,                                  //                                                                  .waitrequest
		output wire [25:0]  emif_s10_ddr4_d_ctrl_amm_0_address,                                      //                                        emif_s10_ddr4_d_ctrl_amm_0.address
		output wire         emif_s10_ddr4_d_ctrl_amm_0_write,                                        //                                                                  .write
		output wire         emif_s10_ddr4_d_ctrl_amm_0_read,                                         //                                                                  .read
		input  wire [511:0] emif_s10_ddr4_d_ctrl_amm_0_readdata,                                     //                                                                  .readdata
		output wire [511:0] emif_s10_ddr4_d_ctrl_amm_0_writedata,                                    //                                                                  .writedata
		output wire [6:0]   emif_s10_ddr4_d_ctrl_amm_0_burstcount,                                   //                                                                  .burstcount
		output wire [63:0]  emif_s10_ddr4_d_ctrl_amm_0_byteenable,                                   //                                                                  .byteenable
		input  wire         emif_s10_ddr4_d_ctrl_amm_0_readdatavalid,                                //                                                                  .readdatavalid
		input  wire         emif_s10_ddr4_d_ctrl_amm_0_waitrequest,                                  //                                                                  .waitrequest
		input  wire         address_span_extender_ddr4_reset_reset_bridge_in_reset_reset,            //            address_span_extender_ddr4_reset_reset_bridge_in_reset.reset
		input  wire         emif_s10_ddr4_a_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset, // emif_s10_ddr4_a_ctrl_amm_0_translator_reset_reset_bridge_in_reset.reset
		input  wire         emif_s10_ddr4_b_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset, // emif_s10_ddr4_b_ctrl_amm_0_translator_reset_reset_bridge_in_reset.reset
		input  wire         emif_s10_ddr4_c_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset, // emif_s10_ddr4_c_ctrl_amm_0_translator_reset_reset_bridge_in_reset.reset
		input  wire         emif_s10_ddr4_d_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset, // emif_s10_ddr4_d_ctrl_amm_0_translator_reset_reset_bridge_in_reset.reset
		input  wire         iopll_0_outclk1_clk,                                                     //                                                   iopll_0_outclk1.clk
		input  wire         emif_s10_ddr4_a_emif_usr_clk_clk,                                        //                                      emif_s10_ddr4_a_emif_usr_clk.clk
		input  wire         emif_s10_ddr4_b_emif_usr_clk_clk,                                        //                                      emif_s10_ddr4_b_emif_usr_clk.clk
		input  wire         emif_s10_ddr4_c_emif_usr_clk_clk,                                        //                                      emif_s10_ddr4_c_emif_usr_clk.clk
		input  wire         emif_s10_ddr4_d_emif_usr_clk_clk                                         //                                      emif_s10_ddr4_d_emif_usr_clk.clk
	);

	wire          address_span_extender_ddr4_expanded_master_translator_avalon_universal_master_0_waitrequest;   // address_span_extender_ddr4_expanded_master_agent:av_waitrequest -> address_span_extender_ddr4_expanded_master_translator:uav_waitrequest
	wire   [31:0] address_span_extender_ddr4_expanded_master_translator_avalon_universal_master_0_readdata;      // address_span_extender_ddr4_expanded_master_agent:av_readdata -> address_span_extender_ddr4_expanded_master_translator:uav_readdata
	wire          address_span_extender_ddr4_expanded_master_translator_avalon_universal_master_0_debugaccess;   // address_span_extender_ddr4_expanded_master_translator:uav_debugaccess -> address_span_extender_ddr4_expanded_master_agent:av_debugaccess
	wire   [33:0] address_span_extender_ddr4_expanded_master_translator_avalon_universal_master_0_address;       // address_span_extender_ddr4_expanded_master_translator:uav_address -> address_span_extender_ddr4_expanded_master_agent:av_address
	wire          address_span_extender_ddr4_expanded_master_translator_avalon_universal_master_0_read;          // address_span_extender_ddr4_expanded_master_translator:uav_read -> address_span_extender_ddr4_expanded_master_agent:av_read
	wire    [3:0] address_span_extender_ddr4_expanded_master_translator_avalon_universal_master_0_byteenable;    // address_span_extender_ddr4_expanded_master_translator:uav_byteenable -> address_span_extender_ddr4_expanded_master_agent:av_byteenable
	wire          address_span_extender_ddr4_expanded_master_translator_avalon_universal_master_0_readdatavalid; // address_span_extender_ddr4_expanded_master_agent:av_readdatavalid -> address_span_extender_ddr4_expanded_master_translator:uav_readdatavalid
	wire          address_span_extender_ddr4_expanded_master_translator_avalon_universal_master_0_lock;          // address_span_extender_ddr4_expanded_master_translator:uav_lock -> address_span_extender_ddr4_expanded_master_agent:av_lock
	wire          address_span_extender_ddr4_expanded_master_translator_avalon_universal_master_0_write;         // address_span_extender_ddr4_expanded_master_translator:uav_write -> address_span_extender_ddr4_expanded_master_agent:av_write
	wire   [31:0] address_span_extender_ddr4_expanded_master_translator_avalon_universal_master_0_writedata;     // address_span_extender_ddr4_expanded_master_translator:uav_writedata -> address_span_extender_ddr4_expanded_master_agent:av_writedata
	wire    [2:0] address_span_extender_ddr4_expanded_master_translator_avalon_universal_master_0_burstcount;    // address_span_extender_ddr4_expanded_master_translator:uav_burstcount -> address_span_extender_ddr4_expanded_master_agent:av_burstcount
	wire  [511:0] emif_s10_ddr4_a_ctrl_amm_0_agent_m0_readdata;                                                  // emif_s10_ddr4_a_ctrl_amm_0_translator:uav_readdata -> emif_s10_ddr4_a_ctrl_amm_0_agent:m0_readdata
	wire          emif_s10_ddr4_a_ctrl_amm_0_agent_m0_waitrequest;                                               // emif_s10_ddr4_a_ctrl_amm_0_translator:uav_waitrequest -> emif_s10_ddr4_a_ctrl_amm_0_agent:m0_waitrequest
	wire          emif_s10_ddr4_a_ctrl_amm_0_agent_m0_debugaccess;                                               // emif_s10_ddr4_a_ctrl_amm_0_agent:m0_debugaccess -> emif_s10_ddr4_a_ctrl_amm_0_translator:uav_debugaccess
	wire   [33:0] emif_s10_ddr4_a_ctrl_amm_0_agent_m0_address;                                                   // emif_s10_ddr4_a_ctrl_amm_0_agent:m0_address -> emif_s10_ddr4_a_ctrl_amm_0_translator:uav_address
	wire   [63:0] emif_s10_ddr4_a_ctrl_amm_0_agent_m0_byteenable;                                                // emif_s10_ddr4_a_ctrl_amm_0_agent:m0_byteenable -> emif_s10_ddr4_a_ctrl_amm_0_translator:uav_byteenable
	wire          emif_s10_ddr4_a_ctrl_amm_0_agent_m0_read;                                                      // emif_s10_ddr4_a_ctrl_amm_0_agent:m0_read -> emif_s10_ddr4_a_ctrl_amm_0_translator:uav_read
	wire          emif_s10_ddr4_a_ctrl_amm_0_agent_m0_readdatavalid;                                             // emif_s10_ddr4_a_ctrl_amm_0_translator:uav_readdatavalid -> emif_s10_ddr4_a_ctrl_amm_0_agent:m0_readdatavalid
	wire          emif_s10_ddr4_a_ctrl_amm_0_agent_m0_lock;                                                      // emif_s10_ddr4_a_ctrl_amm_0_agent:m0_lock -> emif_s10_ddr4_a_ctrl_amm_0_translator:uav_lock
	wire  [511:0] emif_s10_ddr4_a_ctrl_amm_0_agent_m0_writedata;                                                 // emif_s10_ddr4_a_ctrl_amm_0_agent:m0_writedata -> emif_s10_ddr4_a_ctrl_amm_0_translator:uav_writedata
	wire          emif_s10_ddr4_a_ctrl_amm_0_agent_m0_write;                                                     // emif_s10_ddr4_a_ctrl_amm_0_agent:m0_write -> emif_s10_ddr4_a_ctrl_amm_0_translator:uav_write
	wire   [12:0] emif_s10_ddr4_a_ctrl_amm_0_agent_m0_burstcount;                                                // emif_s10_ddr4_a_ctrl_amm_0_agent:m0_burstcount -> emif_s10_ddr4_a_ctrl_amm_0_translator:uav_burstcount
	wire          emif_s10_ddr4_a_ctrl_amm_0_agent_rf_source_valid;                                              // emif_s10_ddr4_a_ctrl_amm_0_agent:rf_source_valid -> emif_s10_ddr4_a_ctrl_amm_0_agent_rsp_fifo:in_valid
	wire  [665:0] emif_s10_ddr4_a_ctrl_amm_0_agent_rf_source_data;                                               // emif_s10_ddr4_a_ctrl_amm_0_agent:rf_source_data -> emif_s10_ddr4_a_ctrl_amm_0_agent_rsp_fifo:in_data
	wire          emif_s10_ddr4_a_ctrl_amm_0_agent_rf_source_ready;                                              // emif_s10_ddr4_a_ctrl_amm_0_agent_rsp_fifo:in_ready -> emif_s10_ddr4_a_ctrl_amm_0_agent:rf_source_ready
	wire          emif_s10_ddr4_a_ctrl_amm_0_agent_rf_source_startofpacket;                                      // emif_s10_ddr4_a_ctrl_amm_0_agent:rf_source_startofpacket -> emif_s10_ddr4_a_ctrl_amm_0_agent_rsp_fifo:in_startofpacket
	wire          emif_s10_ddr4_a_ctrl_amm_0_agent_rf_source_endofpacket;                                        // emif_s10_ddr4_a_ctrl_amm_0_agent:rf_source_endofpacket -> emif_s10_ddr4_a_ctrl_amm_0_agent_rsp_fifo:in_endofpacket
	wire          emif_s10_ddr4_a_ctrl_amm_0_agent_rsp_fifo_out_valid;                                           // emif_s10_ddr4_a_ctrl_amm_0_agent_rsp_fifo:out_valid -> emif_s10_ddr4_a_ctrl_amm_0_agent:rf_sink_valid
	wire  [665:0] emif_s10_ddr4_a_ctrl_amm_0_agent_rsp_fifo_out_data;                                            // emif_s10_ddr4_a_ctrl_amm_0_agent_rsp_fifo:out_data -> emif_s10_ddr4_a_ctrl_amm_0_agent:rf_sink_data
	wire          emif_s10_ddr4_a_ctrl_amm_0_agent_rsp_fifo_out_ready;                                           // emif_s10_ddr4_a_ctrl_amm_0_agent:rf_sink_ready -> emif_s10_ddr4_a_ctrl_amm_0_agent_rsp_fifo:out_ready
	wire          emif_s10_ddr4_a_ctrl_amm_0_agent_rsp_fifo_out_startofpacket;                                   // emif_s10_ddr4_a_ctrl_amm_0_agent_rsp_fifo:out_startofpacket -> emif_s10_ddr4_a_ctrl_amm_0_agent:rf_sink_startofpacket
	wire          emif_s10_ddr4_a_ctrl_amm_0_agent_rsp_fifo_out_endofpacket;                                     // emif_s10_ddr4_a_ctrl_amm_0_agent_rsp_fifo:out_endofpacket -> emif_s10_ddr4_a_ctrl_amm_0_agent:rf_sink_endofpacket
	wire          emif_s10_ddr4_a_ctrl_amm_0_agent_rdata_fifo_src_valid;                                         // emif_s10_ddr4_a_ctrl_amm_0_agent:rdata_fifo_src_valid -> emif_s10_ddr4_a_ctrl_amm_0_agent_rdata_fifo:in_valid
	wire  [513:0] emif_s10_ddr4_a_ctrl_amm_0_agent_rdata_fifo_src_data;                                          // emif_s10_ddr4_a_ctrl_amm_0_agent:rdata_fifo_src_data -> emif_s10_ddr4_a_ctrl_amm_0_agent_rdata_fifo:in_data
	wire          emif_s10_ddr4_a_ctrl_amm_0_agent_rdata_fifo_src_ready;                                         // emif_s10_ddr4_a_ctrl_amm_0_agent_rdata_fifo:in_ready -> emif_s10_ddr4_a_ctrl_amm_0_agent:rdata_fifo_src_ready
	wire          emif_s10_ddr4_a_ctrl_amm_0_agent_rdata_fifo_out_valid;                                         // emif_s10_ddr4_a_ctrl_amm_0_agent_rdata_fifo:out_valid -> emif_s10_ddr4_a_ctrl_amm_0_agent:rdata_fifo_sink_valid
	wire  [513:0] emif_s10_ddr4_a_ctrl_amm_0_agent_rdata_fifo_out_data;                                          // emif_s10_ddr4_a_ctrl_amm_0_agent_rdata_fifo:out_data -> emif_s10_ddr4_a_ctrl_amm_0_agent:rdata_fifo_sink_data
	wire          emif_s10_ddr4_a_ctrl_amm_0_agent_rdata_fifo_out_ready;                                         // emif_s10_ddr4_a_ctrl_amm_0_agent:rdata_fifo_sink_ready -> emif_s10_ddr4_a_ctrl_amm_0_agent_rdata_fifo:out_ready
	wire  [511:0] emif_s10_ddr4_b_ctrl_amm_0_agent_m0_readdata;                                                  // emif_s10_ddr4_b_ctrl_amm_0_translator:uav_readdata -> emif_s10_ddr4_b_ctrl_amm_0_agent:m0_readdata
	wire          emif_s10_ddr4_b_ctrl_amm_0_agent_m0_waitrequest;                                               // emif_s10_ddr4_b_ctrl_amm_0_translator:uav_waitrequest -> emif_s10_ddr4_b_ctrl_amm_0_agent:m0_waitrequest
	wire          emif_s10_ddr4_b_ctrl_amm_0_agent_m0_debugaccess;                                               // emif_s10_ddr4_b_ctrl_amm_0_agent:m0_debugaccess -> emif_s10_ddr4_b_ctrl_amm_0_translator:uav_debugaccess
	wire   [33:0] emif_s10_ddr4_b_ctrl_amm_0_agent_m0_address;                                                   // emif_s10_ddr4_b_ctrl_amm_0_agent:m0_address -> emif_s10_ddr4_b_ctrl_amm_0_translator:uav_address
	wire   [63:0] emif_s10_ddr4_b_ctrl_amm_0_agent_m0_byteenable;                                                // emif_s10_ddr4_b_ctrl_amm_0_agent:m0_byteenable -> emif_s10_ddr4_b_ctrl_amm_0_translator:uav_byteenable
	wire          emif_s10_ddr4_b_ctrl_amm_0_agent_m0_read;                                                      // emif_s10_ddr4_b_ctrl_amm_0_agent:m0_read -> emif_s10_ddr4_b_ctrl_amm_0_translator:uav_read
	wire          emif_s10_ddr4_b_ctrl_amm_0_agent_m0_readdatavalid;                                             // emif_s10_ddr4_b_ctrl_amm_0_translator:uav_readdatavalid -> emif_s10_ddr4_b_ctrl_amm_0_agent:m0_readdatavalid
	wire          emif_s10_ddr4_b_ctrl_amm_0_agent_m0_lock;                                                      // emif_s10_ddr4_b_ctrl_amm_0_agent:m0_lock -> emif_s10_ddr4_b_ctrl_amm_0_translator:uav_lock
	wire  [511:0] emif_s10_ddr4_b_ctrl_amm_0_agent_m0_writedata;                                                 // emif_s10_ddr4_b_ctrl_amm_0_agent:m0_writedata -> emif_s10_ddr4_b_ctrl_amm_0_translator:uav_writedata
	wire          emif_s10_ddr4_b_ctrl_amm_0_agent_m0_write;                                                     // emif_s10_ddr4_b_ctrl_amm_0_agent:m0_write -> emif_s10_ddr4_b_ctrl_amm_0_translator:uav_write
	wire   [12:0] emif_s10_ddr4_b_ctrl_amm_0_agent_m0_burstcount;                                                // emif_s10_ddr4_b_ctrl_amm_0_agent:m0_burstcount -> emif_s10_ddr4_b_ctrl_amm_0_translator:uav_burstcount
	wire          emif_s10_ddr4_b_ctrl_amm_0_agent_rf_source_valid;                                              // emif_s10_ddr4_b_ctrl_amm_0_agent:rf_source_valid -> emif_s10_ddr4_b_ctrl_amm_0_agent_rsp_fifo:in_valid
	wire  [665:0] emif_s10_ddr4_b_ctrl_amm_0_agent_rf_source_data;                                               // emif_s10_ddr4_b_ctrl_amm_0_agent:rf_source_data -> emif_s10_ddr4_b_ctrl_amm_0_agent_rsp_fifo:in_data
	wire          emif_s10_ddr4_b_ctrl_amm_0_agent_rf_source_ready;                                              // emif_s10_ddr4_b_ctrl_amm_0_agent_rsp_fifo:in_ready -> emif_s10_ddr4_b_ctrl_amm_0_agent:rf_source_ready
	wire          emif_s10_ddr4_b_ctrl_amm_0_agent_rf_source_startofpacket;                                      // emif_s10_ddr4_b_ctrl_amm_0_agent:rf_source_startofpacket -> emif_s10_ddr4_b_ctrl_amm_0_agent_rsp_fifo:in_startofpacket
	wire          emif_s10_ddr4_b_ctrl_amm_0_agent_rf_source_endofpacket;                                        // emif_s10_ddr4_b_ctrl_amm_0_agent:rf_source_endofpacket -> emif_s10_ddr4_b_ctrl_amm_0_agent_rsp_fifo:in_endofpacket
	wire          emif_s10_ddr4_b_ctrl_amm_0_agent_rsp_fifo_out_valid;                                           // emif_s10_ddr4_b_ctrl_amm_0_agent_rsp_fifo:out_valid -> emif_s10_ddr4_b_ctrl_amm_0_agent:rf_sink_valid
	wire  [665:0] emif_s10_ddr4_b_ctrl_amm_0_agent_rsp_fifo_out_data;                                            // emif_s10_ddr4_b_ctrl_amm_0_agent_rsp_fifo:out_data -> emif_s10_ddr4_b_ctrl_amm_0_agent:rf_sink_data
	wire          emif_s10_ddr4_b_ctrl_amm_0_agent_rsp_fifo_out_ready;                                           // emif_s10_ddr4_b_ctrl_amm_0_agent:rf_sink_ready -> emif_s10_ddr4_b_ctrl_amm_0_agent_rsp_fifo:out_ready
	wire          emif_s10_ddr4_b_ctrl_amm_0_agent_rsp_fifo_out_startofpacket;                                   // emif_s10_ddr4_b_ctrl_amm_0_agent_rsp_fifo:out_startofpacket -> emif_s10_ddr4_b_ctrl_amm_0_agent:rf_sink_startofpacket
	wire          emif_s10_ddr4_b_ctrl_amm_0_agent_rsp_fifo_out_endofpacket;                                     // emif_s10_ddr4_b_ctrl_amm_0_agent_rsp_fifo:out_endofpacket -> emif_s10_ddr4_b_ctrl_amm_0_agent:rf_sink_endofpacket
	wire          emif_s10_ddr4_b_ctrl_amm_0_agent_rdata_fifo_src_valid;                                         // emif_s10_ddr4_b_ctrl_amm_0_agent:rdata_fifo_src_valid -> emif_s10_ddr4_b_ctrl_amm_0_agent_rdata_fifo:in_valid
	wire  [513:0] emif_s10_ddr4_b_ctrl_amm_0_agent_rdata_fifo_src_data;                                          // emif_s10_ddr4_b_ctrl_amm_0_agent:rdata_fifo_src_data -> emif_s10_ddr4_b_ctrl_amm_0_agent_rdata_fifo:in_data
	wire          emif_s10_ddr4_b_ctrl_amm_0_agent_rdata_fifo_src_ready;                                         // emif_s10_ddr4_b_ctrl_amm_0_agent_rdata_fifo:in_ready -> emif_s10_ddr4_b_ctrl_amm_0_agent:rdata_fifo_src_ready
	wire          emif_s10_ddr4_b_ctrl_amm_0_agent_rdata_fifo_out_valid;                                         // emif_s10_ddr4_b_ctrl_amm_0_agent_rdata_fifo:out_valid -> emif_s10_ddr4_b_ctrl_amm_0_agent:rdata_fifo_sink_valid
	wire  [513:0] emif_s10_ddr4_b_ctrl_amm_0_agent_rdata_fifo_out_data;                                          // emif_s10_ddr4_b_ctrl_amm_0_agent_rdata_fifo:out_data -> emif_s10_ddr4_b_ctrl_amm_0_agent:rdata_fifo_sink_data
	wire          emif_s10_ddr4_b_ctrl_amm_0_agent_rdata_fifo_out_ready;                                         // emif_s10_ddr4_b_ctrl_amm_0_agent:rdata_fifo_sink_ready -> emif_s10_ddr4_b_ctrl_amm_0_agent_rdata_fifo:out_ready
	wire  [511:0] emif_s10_ddr4_c_ctrl_amm_0_agent_m0_readdata;                                                  // emif_s10_ddr4_c_ctrl_amm_0_translator:uav_readdata -> emif_s10_ddr4_c_ctrl_amm_0_agent:m0_readdata
	wire          emif_s10_ddr4_c_ctrl_amm_0_agent_m0_waitrequest;                                               // emif_s10_ddr4_c_ctrl_amm_0_translator:uav_waitrequest -> emif_s10_ddr4_c_ctrl_amm_0_agent:m0_waitrequest
	wire          emif_s10_ddr4_c_ctrl_amm_0_agent_m0_debugaccess;                                               // emif_s10_ddr4_c_ctrl_amm_0_agent:m0_debugaccess -> emif_s10_ddr4_c_ctrl_amm_0_translator:uav_debugaccess
	wire   [33:0] emif_s10_ddr4_c_ctrl_amm_0_agent_m0_address;                                                   // emif_s10_ddr4_c_ctrl_amm_0_agent:m0_address -> emif_s10_ddr4_c_ctrl_amm_0_translator:uav_address
	wire   [63:0] emif_s10_ddr4_c_ctrl_amm_0_agent_m0_byteenable;                                                // emif_s10_ddr4_c_ctrl_amm_0_agent:m0_byteenable -> emif_s10_ddr4_c_ctrl_amm_0_translator:uav_byteenable
	wire          emif_s10_ddr4_c_ctrl_amm_0_agent_m0_read;                                                      // emif_s10_ddr4_c_ctrl_amm_0_agent:m0_read -> emif_s10_ddr4_c_ctrl_amm_0_translator:uav_read
	wire          emif_s10_ddr4_c_ctrl_amm_0_agent_m0_readdatavalid;                                             // emif_s10_ddr4_c_ctrl_amm_0_translator:uav_readdatavalid -> emif_s10_ddr4_c_ctrl_amm_0_agent:m0_readdatavalid
	wire          emif_s10_ddr4_c_ctrl_amm_0_agent_m0_lock;                                                      // emif_s10_ddr4_c_ctrl_amm_0_agent:m0_lock -> emif_s10_ddr4_c_ctrl_amm_0_translator:uav_lock
	wire  [511:0] emif_s10_ddr4_c_ctrl_amm_0_agent_m0_writedata;                                                 // emif_s10_ddr4_c_ctrl_amm_0_agent:m0_writedata -> emif_s10_ddr4_c_ctrl_amm_0_translator:uav_writedata
	wire          emif_s10_ddr4_c_ctrl_amm_0_agent_m0_write;                                                     // emif_s10_ddr4_c_ctrl_amm_0_agent:m0_write -> emif_s10_ddr4_c_ctrl_amm_0_translator:uav_write
	wire   [12:0] emif_s10_ddr4_c_ctrl_amm_0_agent_m0_burstcount;                                                // emif_s10_ddr4_c_ctrl_amm_0_agent:m0_burstcount -> emif_s10_ddr4_c_ctrl_amm_0_translator:uav_burstcount
	wire          emif_s10_ddr4_c_ctrl_amm_0_agent_rf_source_valid;                                              // emif_s10_ddr4_c_ctrl_amm_0_agent:rf_source_valid -> emif_s10_ddr4_c_ctrl_amm_0_agent_rsp_fifo:in_valid
	wire  [665:0] emif_s10_ddr4_c_ctrl_amm_0_agent_rf_source_data;                                               // emif_s10_ddr4_c_ctrl_amm_0_agent:rf_source_data -> emif_s10_ddr4_c_ctrl_amm_0_agent_rsp_fifo:in_data
	wire          emif_s10_ddr4_c_ctrl_amm_0_agent_rf_source_ready;                                              // emif_s10_ddr4_c_ctrl_amm_0_agent_rsp_fifo:in_ready -> emif_s10_ddr4_c_ctrl_amm_0_agent:rf_source_ready
	wire          emif_s10_ddr4_c_ctrl_amm_0_agent_rf_source_startofpacket;                                      // emif_s10_ddr4_c_ctrl_amm_0_agent:rf_source_startofpacket -> emif_s10_ddr4_c_ctrl_amm_0_agent_rsp_fifo:in_startofpacket
	wire          emif_s10_ddr4_c_ctrl_amm_0_agent_rf_source_endofpacket;                                        // emif_s10_ddr4_c_ctrl_amm_0_agent:rf_source_endofpacket -> emif_s10_ddr4_c_ctrl_amm_0_agent_rsp_fifo:in_endofpacket
	wire          emif_s10_ddr4_c_ctrl_amm_0_agent_rsp_fifo_out_valid;                                           // emif_s10_ddr4_c_ctrl_amm_0_agent_rsp_fifo:out_valid -> emif_s10_ddr4_c_ctrl_amm_0_agent:rf_sink_valid
	wire  [665:0] emif_s10_ddr4_c_ctrl_amm_0_agent_rsp_fifo_out_data;                                            // emif_s10_ddr4_c_ctrl_amm_0_agent_rsp_fifo:out_data -> emif_s10_ddr4_c_ctrl_amm_0_agent:rf_sink_data
	wire          emif_s10_ddr4_c_ctrl_amm_0_agent_rsp_fifo_out_ready;                                           // emif_s10_ddr4_c_ctrl_amm_0_agent:rf_sink_ready -> emif_s10_ddr4_c_ctrl_amm_0_agent_rsp_fifo:out_ready
	wire          emif_s10_ddr4_c_ctrl_amm_0_agent_rsp_fifo_out_startofpacket;                                   // emif_s10_ddr4_c_ctrl_amm_0_agent_rsp_fifo:out_startofpacket -> emif_s10_ddr4_c_ctrl_amm_0_agent:rf_sink_startofpacket
	wire          emif_s10_ddr4_c_ctrl_amm_0_agent_rsp_fifo_out_endofpacket;                                     // emif_s10_ddr4_c_ctrl_amm_0_agent_rsp_fifo:out_endofpacket -> emif_s10_ddr4_c_ctrl_amm_0_agent:rf_sink_endofpacket
	wire          emif_s10_ddr4_c_ctrl_amm_0_agent_rdata_fifo_src_valid;                                         // emif_s10_ddr4_c_ctrl_amm_0_agent:rdata_fifo_src_valid -> emif_s10_ddr4_c_ctrl_amm_0_agent_rdata_fifo:in_valid
	wire  [513:0] emif_s10_ddr4_c_ctrl_amm_0_agent_rdata_fifo_src_data;                                          // emif_s10_ddr4_c_ctrl_amm_0_agent:rdata_fifo_src_data -> emif_s10_ddr4_c_ctrl_amm_0_agent_rdata_fifo:in_data
	wire          emif_s10_ddr4_c_ctrl_amm_0_agent_rdata_fifo_src_ready;                                         // emif_s10_ddr4_c_ctrl_amm_0_agent_rdata_fifo:in_ready -> emif_s10_ddr4_c_ctrl_amm_0_agent:rdata_fifo_src_ready
	wire          emif_s10_ddr4_c_ctrl_amm_0_agent_rdata_fifo_out_valid;                                         // emif_s10_ddr4_c_ctrl_amm_0_agent_rdata_fifo:out_valid -> emif_s10_ddr4_c_ctrl_amm_0_agent:rdata_fifo_sink_valid
	wire  [513:0] emif_s10_ddr4_c_ctrl_amm_0_agent_rdata_fifo_out_data;                                          // emif_s10_ddr4_c_ctrl_amm_0_agent_rdata_fifo:out_data -> emif_s10_ddr4_c_ctrl_amm_0_agent:rdata_fifo_sink_data
	wire          emif_s10_ddr4_c_ctrl_amm_0_agent_rdata_fifo_out_ready;                                         // emif_s10_ddr4_c_ctrl_amm_0_agent:rdata_fifo_sink_ready -> emif_s10_ddr4_c_ctrl_amm_0_agent_rdata_fifo:out_ready
	wire  [511:0] emif_s10_ddr4_d_ctrl_amm_0_agent_m0_readdata;                                                  // emif_s10_ddr4_d_ctrl_amm_0_translator:uav_readdata -> emif_s10_ddr4_d_ctrl_amm_0_agent:m0_readdata
	wire          emif_s10_ddr4_d_ctrl_amm_0_agent_m0_waitrequest;                                               // emif_s10_ddr4_d_ctrl_amm_0_translator:uav_waitrequest -> emif_s10_ddr4_d_ctrl_amm_0_agent:m0_waitrequest
	wire          emif_s10_ddr4_d_ctrl_amm_0_agent_m0_debugaccess;                                               // emif_s10_ddr4_d_ctrl_amm_0_agent:m0_debugaccess -> emif_s10_ddr4_d_ctrl_amm_0_translator:uav_debugaccess
	wire   [33:0] emif_s10_ddr4_d_ctrl_amm_0_agent_m0_address;                                                   // emif_s10_ddr4_d_ctrl_amm_0_agent:m0_address -> emif_s10_ddr4_d_ctrl_amm_0_translator:uav_address
	wire   [63:0] emif_s10_ddr4_d_ctrl_amm_0_agent_m0_byteenable;                                                // emif_s10_ddr4_d_ctrl_amm_0_agent:m0_byteenable -> emif_s10_ddr4_d_ctrl_amm_0_translator:uav_byteenable
	wire          emif_s10_ddr4_d_ctrl_amm_0_agent_m0_read;                                                      // emif_s10_ddr4_d_ctrl_amm_0_agent:m0_read -> emif_s10_ddr4_d_ctrl_amm_0_translator:uav_read
	wire          emif_s10_ddr4_d_ctrl_amm_0_agent_m0_readdatavalid;                                             // emif_s10_ddr4_d_ctrl_amm_0_translator:uav_readdatavalid -> emif_s10_ddr4_d_ctrl_amm_0_agent:m0_readdatavalid
	wire          emif_s10_ddr4_d_ctrl_amm_0_agent_m0_lock;                                                      // emif_s10_ddr4_d_ctrl_amm_0_agent:m0_lock -> emif_s10_ddr4_d_ctrl_amm_0_translator:uav_lock
	wire  [511:0] emif_s10_ddr4_d_ctrl_amm_0_agent_m0_writedata;                                                 // emif_s10_ddr4_d_ctrl_amm_0_agent:m0_writedata -> emif_s10_ddr4_d_ctrl_amm_0_translator:uav_writedata
	wire          emif_s10_ddr4_d_ctrl_amm_0_agent_m0_write;                                                     // emif_s10_ddr4_d_ctrl_amm_0_agent:m0_write -> emif_s10_ddr4_d_ctrl_amm_0_translator:uav_write
	wire   [12:0] emif_s10_ddr4_d_ctrl_amm_0_agent_m0_burstcount;                                                // emif_s10_ddr4_d_ctrl_amm_0_agent:m0_burstcount -> emif_s10_ddr4_d_ctrl_amm_0_translator:uav_burstcount
	wire          emif_s10_ddr4_d_ctrl_amm_0_agent_rf_source_valid;                                              // emif_s10_ddr4_d_ctrl_amm_0_agent:rf_source_valid -> emif_s10_ddr4_d_ctrl_amm_0_agent_rsp_fifo:in_valid
	wire  [665:0] emif_s10_ddr4_d_ctrl_amm_0_agent_rf_source_data;                                               // emif_s10_ddr4_d_ctrl_amm_0_agent:rf_source_data -> emif_s10_ddr4_d_ctrl_amm_0_agent_rsp_fifo:in_data
	wire          emif_s10_ddr4_d_ctrl_amm_0_agent_rf_source_ready;                                              // emif_s10_ddr4_d_ctrl_amm_0_agent_rsp_fifo:in_ready -> emif_s10_ddr4_d_ctrl_amm_0_agent:rf_source_ready
	wire          emif_s10_ddr4_d_ctrl_amm_0_agent_rf_source_startofpacket;                                      // emif_s10_ddr4_d_ctrl_amm_0_agent:rf_source_startofpacket -> emif_s10_ddr4_d_ctrl_amm_0_agent_rsp_fifo:in_startofpacket
	wire          emif_s10_ddr4_d_ctrl_amm_0_agent_rf_source_endofpacket;                                        // emif_s10_ddr4_d_ctrl_amm_0_agent:rf_source_endofpacket -> emif_s10_ddr4_d_ctrl_amm_0_agent_rsp_fifo:in_endofpacket
	wire          emif_s10_ddr4_d_ctrl_amm_0_agent_rsp_fifo_out_valid;                                           // emif_s10_ddr4_d_ctrl_amm_0_agent_rsp_fifo:out_valid -> emif_s10_ddr4_d_ctrl_amm_0_agent:rf_sink_valid
	wire  [665:0] emif_s10_ddr4_d_ctrl_amm_0_agent_rsp_fifo_out_data;                                            // emif_s10_ddr4_d_ctrl_amm_0_agent_rsp_fifo:out_data -> emif_s10_ddr4_d_ctrl_amm_0_agent:rf_sink_data
	wire          emif_s10_ddr4_d_ctrl_amm_0_agent_rsp_fifo_out_ready;                                           // emif_s10_ddr4_d_ctrl_amm_0_agent:rf_sink_ready -> emif_s10_ddr4_d_ctrl_amm_0_agent_rsp_fifo:out_ready
	wire          emif_s10_ddr4_d_ctrl_amm_0_agent_rsp_fifo_out_startofpacket;                                   // emif_s10_ddr4_d_ctrl_amm_0_agent_rsp_fifo:out_startofpacket -> emif_s10_ddr4_d_ctrl_amm_0_agent:rf_sink_startofpacket
	wire          emif_s10_ddr4_d_ctrl_amm_0_agent_rsp_fifo_out_endofpacket;                                     // emif_s10_ddr4_d_ctrl_amm_0_agent_rsp_fifo:out_endofpacket -> emif_s10_ddr4_d_ctrl_amm_0_agent:rf_sink_endofpacket
	wire          emif_s10_ddr4_d_ctrl_amm_0_agent_rdata_fifo_src_valid;                                         // emif_s10_ddr4_d_ctrl_amm_0_agent:rdata_fifo_src_valid -> emif_s10_ddr4_d_ctrl_amm_0_agent_rdata_fifo:in_valid
	wire  [513:0] emif_s10_ddr4_d_ctrl_amm_0_agent_rdata_fifo_src_data;                                          // emif_s10_ddr4_d_ctrl_amm_0_agent:rdata_fifo_src_data -> emif_s10_ddr4_d_ctrl_amm_0_agent_rdata_fifo:in_data
	wire          emif_s10_ddr4_d_ctrl_amm_0_agent_rdata_fifo_src_ready;                                         // emif_s10_ddr4_d_ctrl_amm_0_agent_rdata_fifo:in_ready -> emif_s10_ddr4_d_ctrl_amm_0_agent:rdata_fifo_src_ready
	wire          emif_s10_ddr4_d_ctrl_amm_0_agent_rdata_fifo_out_valid;                                         // emif_s10_ddr4_d_ctrl_amm_0_agent_rdata_fifo:out_valid -> emif_s10_ddr4_d_ctrl_amm_0_agent:rdata_fifo_sink_valid
	wire  [513:0] emif_s10_ddr4_d_ctrl_amm_0_agent_rdata_fifo_out_data;                                          // emif_s10_ddr4_d_ctrl_amm_0_agent_rdata_fifo:out_data -> emif_s10_ddr4_d_ctrl_amm_0_agent:rdata_fifo_sink_data
	wire          emif_s10_ddr4_d_ctrl_amm_0_agent_rdata_fifo_out_ready;                                         // emif_s10_ddr4_d_ctrl_amm_0_agent:rdata_fifo_sink_ready -> emif_s10_ddr4_d_ctrl_amm_0_agent_rdata_fifo:out_ready
	wire          address_span_extender_ddr4_expanded_master_agent_cp_valid;                                     // address_span_extender_ddr4_expanded_master_agent:cp_valid -> router:sink_valid
	wire  [124:0] address_span_extender_ddr4_expanded_master_agent_cp_data;                                      // address_span_extender_ddr4_expanded_master_agent:cp_data -> router:sink_data
	wire          address_span_extender_ddr4_expanded_master_agent_cp_ready;                                     // router:sink_ready -> address_span_extender_ddr4_expanded_master_agent:cp_ready
	wire          address_span_extender_ddr4_expanded_master_agent_cp_startofpacket;                             // address_span_extender_ddr4_expanded_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          address_span_extender_ddr4_expanded_master_agent_cp_endofpacket;                               // address_span_extender_ddr4_expanded_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          emif_s10_ddr4_a_ctrl_amm_0_agent_rp_valid;                                                     // emif_s10_ddr4_a_ctrl_amm_0_agent:rp_valid -> router_001:sink_valid
	wire  [664:0] emif_s10_ddr4_a_ctrl_amm_0_agent_rp_data;                                                      // emif_s10_ddr4_a_ctrl_amm_0_agent:rp_data -> router_001:sink_data
	wire          emif_s10_ddr4_a_ctrl_amm_0_agent_rp_ready;                                                     // router_001:sink_ready -> emif_s10_ddr4_a_ctrl_amm_0_agent:rp_ready
	wire          emif_s10_ddr4_a_ctrl_amm_0_agent_rp_startofpacket;                                             // emif_s10_ddr4_a_ctrl_amm_0_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire          emif_s10_ddr4_a_ctrl_amm_0_agent_rp_endofpacket;                                               // emif_s10_ddr4_a_ctrl_amm_0_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire          emif_s10_ddr4_b_ctrl_amm_0_agent_rp_valid;                                                     // emif_s10_ddr4_b_ctrl_amm_0_agent:rp_valid -> router_002:sink_valid
	wire  [664:0] emif_s10_ddr4_b_ctrl_amm_0_agent_rp_data;                                                      // emif_s10_ddr4_b_ctrl_amm_0_agent:rp_data -> router_002:sink_data
	wire          emif_s10_ddr4_b_ctrl_amm_0_agent_rp_ready;                                                     // router_002:sink_ready -> emif_s10_ddr4_b_ctrl_amm_0_agent:rp_ready
	wire          emif_s10_ddr4_b_ctrl_amm_0_agent_rp_startofpacket;                                             // emif_s10_ddr4_b_ctrl_amm_0_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          emif_s10_ddr4_b_ctrl_amm_0_agent_rp_endofpacket;                                               // emif_s10_ddr4_b_ctrl_amm_0_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          emif_s10_ddr4_c_ctrl_amm_0_agent_rp_valid;                                                     // emif_s10_ddr4_c_ctrl_amm_0_agent:rp_valid -> router_003:sink_valid
	wire  [664:0] emif_s10_ddr4_c_ctrl_amm_0_agent_rp_data;                                                      // emif_s10_ddr4_c_ctrl_amm_0_agent:rp_data -> router_003:sink_data
	wire          emif_s10_ddr4_c_ctrl_amm_0_agent_rp_ready;                                                     // router_003:sink_ready -> emif_s10_ddr4_c_ctrl_amm_0_agent:rp_ready
	wire          emif_s10_ddr4_c_ctrl_amm_0_agent_rp_startofpacket;                                             // emif_s10_ddr4_c_ctrl_amm_0_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          emif_s10_ddr4_c_ctrl_amm_0_agent_rp_endofpacket;                                               // emif_s10_ddr4_c_ctrl_amm_0_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          emif_s10_ddr4_d_ctrl_amm_0_agent_rp_valid;                                                     // emif_s10_ddr4_d_ctrl_amm_0_agent:rp_valid -> router_004:sink_valid
	wire  [664:0] emif_s10_ddr4_d_ctrl_amm_0_agent_rp_data;                                                      // emif_s10_ddr4_d_ctrl_amm_0_agent:rp_data -> router_004:sink_data
	wire          emif_s10_ddr4_d_ctrl_amm_0_agent_rp_ready;                                                     // router_004:sink_ready -> emif_s10_ddr4_d_ctrl_amm_0_agent:rp_ready
	wire          emif_s10_ddr4_d_ctrl_amm_0_agent_rp_startofpacket;                                             // emif_s10_ddr4_d_ctrl_amm_0_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          emif_s10_ddr4_d_ctrl_amm_0_agent_rp_endofpacket;                                               // emif_s10_ddr4_d_ctrl_amm_0_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_src_valid;                                                                              // router:src_valid -> address_span_extender_ddr4_expanded_master_limiter:cmd_sink_valid
	wire  [124:0] router_src_data;                                                                               // router:src_data -> address_span_extender_ddr4_expanded_master_limiter:cmd_sink_data
	wire          router_src_ready;                                                                              // address_span_extender_ddr4_expanded_master_limiter:cmd_sink_ready -> router:src_ready
	wire    [3:0] router_src_channel;                                                                            // router:src_channel -> address_span_extender_ddr4_expanded_master_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                                      // router:src_startofpacket -> address_span_extender_ddr4_expanded_master_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                                        // router:src_endofpacket -> address_span_extender_ddr4_expanded_master_limiter:cmd_sink_endofpacket
	wire  [124:0] address_span_extender_ddr4_expanded_master_limiter_cmd_src_data;                               // address_span_extender_ddr4_expanded_master_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          address_span_extender_ddr4_expanded_master_limiter_cmd_src_ready;                              // cmd_demux:sink_ready -> address_span_extender_ddr4_expanded_master_limiter:cmd_src_ready
	wire    [3:0] address_span_extender_ddr4_expanded_master_limiter_cmd_src_channel;                            // address_span_extender_ddr4_expanded_master_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          address_span_extender_ddr4_expanded_master_limiter_cmd_src_startofpacket;                      // address_span_extender_ddr4_expanded_master_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          address_span_extender_ddr4_expanded_master_limiter_cmd_src_endofpacket;                        // address_span_extender_ddr4_expanded_master_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                                             // rsp_mux:src_valid -> address_span_extender_ddr4_expanded_master_limiter:rsp_sink_valid
	wire  [124:0] rsp_mux_src_data;                                                                              // rsp_mux:src_data -> address_span_extender_ddr4_expanded_master_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                                             // address_span_extender_ddr4_expanded_master_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire    [3:0] rsp_mux_src_channel;                                                                           // rsp_mux:src_channel -> address_span_extender_ddr4_expanded_master_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                                                     // rsp_mux:src_startofpacket -> address_span_extender_ddr4_expanded_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                                                       // rsp_mux:src_endofpacket -> address_span_extender_ddr4_expanded_master_limiter:rsp_sink_endofpacket
	wire          address_span_extender_ddr4_expanded_master_limiter_rsp_src_valid;                              // address_span_extender_ddr4_expanded_master_limiter:rsp_src_valid -> address_span_extender_ddr4_expanded_master_agent:rp_valid
	wire  [124:0] address_span_extender_ddr4_expanded_master_limiter_rsp_src_data;                               // address_span_extender_ddr4_expanded_master_limiter:rsp_src_data -> address_span_extender_ddr4_expanded_master_agent:rp_data
	wire          address_span_extender_ddr4_expanded_master_limiter_rsp_src_ready;                              // address_span_extender_ddr4_expanded_master_agent:rp_ready -> address_span_extender_ddr4_expanded_master_limiter:rsp_src_ready
	wire    [3:0] address_span_extender_ddr4_expanded_master_limiter_rsp_src_channel;                            // address_span_extender_ddr4_expanded_master_limiter:rsp_src_channel -> address_span_extender_ddr4_expanded_master_agent:rp_channel
	wire          address_span_extender_ddr4_expanded_master_limiter_rsp_src_startofpacket;                      // address_span_extender_ddr4_expanded_master_limiter:rsp_src_startofpacket -> address_span_extender_ddr4_expanded_master_agent:rp_startofpacket
	wire          address_span_extender_ddr4_expanded_master_limiter_rsp_src_endofpacket;                        // address_span_extender_ddr4_expanded_master_limiter:rsp_src_endofpacket -> address_span_extender_ddr4_expanded_master_agent:rp_endofpacket
	wire          cmd_mux_src_valid;                                                                             // cmd_mux:src_valid -> emif_s10_ddr4_a_ctrl_amm_0_cmd_width_adapter:in_valid
	wire  [124:0] cmd_mux_src_data;                                                                              // cmd_mux:src_data -> emif_s10_ddr4_a_ctrl_amm_0_cmd_width_adapter:in_data
	wire          cmd_mux_src_ready;                                                                             // emif_s10_ddr4_a_ctrl_amm_0_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire    [3:0] cmd_mux_src_channel;                                                                           // cmd_mux:src_channel -> emif_s10_ddr4_a_ctrl_amm_0_cmd_width_adapter:in_channel
	wire          cmd_mux_src_startofpacket;                                                                     // cmd_mux:src_startofpacket -> emif_s10_ddr4_a_ctrl_amm_0_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                                                       // cmd_mux:src_endofpacket -> emif_s10_ddr4_a_ctrl_amm_0_cmd_width_adapter:in_endofpacket
	wire          emif_s10_ddr4_a_ctrl_amm_0_cmd_width_adapter_src_valid;                                        // emif_s10_ddr4_a_ctrl_amm_0_cmd_width_adapter:out_valid -> emif_s10_ddr4_a_ctrl_amm_0_agent:cp_valid
	wire  [664:0] emif_s10_ddr4_a_ctrl_amm_0_cmd_width_adapter_src_data;                                         // emif_s10_ddr4_a_ctrl_amm_0_cmd_width_adapter:out_data -> emif_s10_ddr4_a_ctrl_amm_0_agent:cp_data
	wire          emif_s10_ddr4_a_ctrl_amm_0_cmd_width_adapter_src_ready;                                        // emif_s10_ddr4_a_ctrl_amm_0_agent:cp_ready -> emif_s10_ddr4_a_ctrl_amm_0_cmd_width_adapter:out_ready
	wire    [3:0] emif_s10_ddr4_a_ctrl_amm_0_cmd_width_adapter_src_channel;                                      // emif_s10_ddr4_a_ctrl_amm_0_cmd_width_adapter:out_channel -> emif_s10_ddr4_a_ctrl_amm_0_agent:cp_channel
	wire          emif_s10_ddr4_a_ctrl_amm_0_cmd_width_adapter_src_startofpacket;                                // emif_s10_ddr4_a_ctrl_amm_0_cmd_width_adapter:out_startofpacket -> emif_s10_ddr4_a_ctrl_amm_0_agent:cp_startofpacket
	wire          emif_s10_ddr4_a_ctrl_amm_0_cmd_width_adapter_src_endofpacket;                                  // emif_s10_ddr4_a_ctrl_amm_0_cmd_width_adapter:out_endofpacket -> emif_s10_ddr4_a_ctrl_amm_0_agent:cp_endofpacket
	wire          cmd_mux_001_src_valid;                                                                         // cmd_mux_001:src_valid -> emif_s10_ddr4_b_ctrl_amm_0_cmd_width_adapter:in_valid
	wire  [124:0] cmd_mux_001_src_data;                                                                          // cmd_mux_001:src_data -> emif_s10_ddr4_b_ctrl_amm_0_cmd_width_adapter:in_data
	wire          cmd_mux_001_src_ready;                                                                         // emif_s10_ddr4_b_ctrl_amm_0_cmd_width_adapter:in_ready -> cmd_mux_001:src_ready
	wire    [3:0] cmd_mux_001_src_channel;                                                                       // cmd_mux_001:src_channel -> emif_s10_ddr4_b_ctrl_amm_0_cmd_width_adapter:in_channel
	wire          cmd_mux_001_src_startofpacket;                                                                 // cmd_mux_001:src_startofpacket -> emif_s10_ddr4_b_ctrl_amm_0_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                                   // cmd_mux_001:src_endofpacket -> emif_s10_ddr4_b_ctrl_amm_0_cmd_width_adapter:in_endofpacket
	wire          emif_s10_ddr4_b_ctrl_amm_0_cmd_width_adapter_src_valid;                                        // emif_s10_ddr4_b_ctrl_amm_0_cmd_width_adapter:out_valid -> emif_s10_ddr4_b_ctrl_amm_0_agent:cp_valid
	wire  [664:0] emif_s10_ddr4_b_ctrl_amm_0_cmd_width_adapter_src_data;                                         // emif_s10_ddr4_b_ctrl_amm_0_cmd_width_adapter:out_data -> emif_s10_ddr4_b_ctrl_amm_0_agent:cp_data
	wire          emif_s10_ddr4_b_ctrl_amm_0_cmd_width_adapter_src_ready;                                        // emif_s10_ddr4_b_ctrl_amm_0_agent:cp_ready -> emif_s10_ddr4_b_ctrl_amm_0_cmd_width_adapter:out_ready
	wire    [3:0] emif_s10_ddr4_b_ctrl_amm_0_cmd_width_adapter_src_channel;                                      // emif_s10_ddr4_b_ctrl_amm_0_cmd_width_adapter:out_channel -> emif_s10_ddr4_b_ctrl_amm_0_agent:cp_channel
	wire          emif_s10_ddr4_b_ctrl_amm_0_cmd_width_adapter_src_startofpacket;                                // emif_s10_ddr4_b_ctrl_amm_0_cmd_width_adapter:out_startofpacket -> emif_s10_ddr4_b_ctrl_amm_0_agent:cp_startofpacket
	wire          emif_s10_ddr4_b_ctrl_amm_0_cmd_width_adapter_src_endofpacket;                                  // emif_s10_ddr4_b_ctrl_amm_0_cmd_width_adapter:out_endofpacket -> emif_s10_ddr4_b_ctrl_amm_0_agent:cp_endofpacket
	wire          cmd_mux_002_src_valid;                                                                         // cmd_mux_002:src_valid -> emif_s10_ddr4_c_ctrl_amm_0_cmd_width_adapter:in_valid
	wire  [124:0] cmd_mux_002_src_data;                                                                          // cmd_mux_002:src_data -> emif_s10_ddr4_c_ctrl_amm_0_cmd_width_adapter:in_data
	wire          cmd_mux_002_src_ready;                                                                         // emif_s10_ddr4_c_ctrl_amm_0_cmd_width_adapter:in_ready -> cmd_mux_002:src_ready
	wire    [3:0] cmd_mux_002_src_channel;                                                                       // cmd_mux_002:src_channel -> emif_s10_ddr4_c_ctrl_amm_0_cmd_width_adapter:in_channel
	wire          cmd_mux_002_src_startofpacket;                                                                 // cmd_mux_002:src_startofpacket -> emif_s10_ddr4_c_ctrl_amm_0_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                                   // cmd_mux_002:src_endofpacket -> emif_s10_ddr4_c_ctrl_amm_0_cmd_width_adapter:in_endofpacket
	wire          emif_s10_ddr4_c_ctrl_amm_0_cmd_width_adapter_src_valid;                                        // emif_s10_ddr4_c_ctrl_amm_0_cmd_width_adapter:out_valid -> emif_s10_ddr4_c_ctrl_amm_0_agent:cp_valid
	wire  [664:0] emif_s10_ddr4_c_ctrl_amm_0_cmd_width_adapter_src_data;                                         // emif_s10_ddr4_c_ctrl_amm_0_cmd_width_adapter:out_data -> emif_s10_ddr4_c_ctrl_amm_0_agent:cp_data
	wire          emif_s10_ddr4_c_ctrl_amm_0_cmd_width_adapter_src_ready;                                        // emif_s10_ddr4_c_ctrl_amm_0_agent:cp_ready -> emif_s10_ddr4_c_ctrl_amm_0_cmd_width_adapter:out_ready
	wire    [3:0] emif_s10_ddr4_c_ctrl_amm_0_cmd_width_adapter_src_channel;                                      // emif_s10_ddr4_c_ctrl_amm_0_cmd_width_adapter:out_channel -> emif_s10_ddr4_c_ctrl_amm_0_agent:cp_channel
	wire          emif_s10_ddr4_c_ctrl_amm_0_cmd_width_adapter_src_startofpacket;                                // emif_s10_ddr4_c_ctrl_amm_0_cmd_width_adapter:out_startofpacket -> emif_s10_ddr4_c_ctrl_amm_0_agent:cp_startofpacket
	wire          emif_s10_ddr4_c_ctrl_amm_0_cmd_width_adapter_src_endofpacket;                                  // emif_s10_ddr4_c_ctrl_amm_0_cmd_width_adapter:out_endofpacket -> emif_s10_ddr4_c_ctrl_amm_0_agent:cp_endofpacket
	wire          cmd_mux_003_src_valid;                                                                         // cmd_mux_003:src_valid -> emif_s10_ddr4_d_ctrl_amm_0_cmd_width_adapter:in_valid
	wire  [124:0] cmd_mux_003_src_data;                                                                          // cmd_mux_003:src_data -> emif_s10_ddr4_d_ctrl_amm_0_cmd_width_adapter:in_data
	wire          cmd_mux_003_src_ready;                                                                         // emif_s10_ddr4_d_ctrl_amm_0_cmd_width_adapter:in_ready -> cmd_mux_003:src_ready
	wire    [3:0] cmd_mux_003_src_channel;                                                                       // cmd_mux_003:src_channel -> emif_s10_ddr4_d_ctrl_amm_0_cmd_width_adapter:in_channel
	wire          cmd_mux_003_src_startofpacket;                                                                 // cmd_mux_003:src_startofpacket -> emif_s10_ddr4_d_ctrl_amm_0_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                                   // cmd_mux_003:src_endofpacket -> emif_s10_ddr4_d_ctrl_amm_0_cmd_width_adapter:in_endofpacket
	wire          emif_s10_ddr4_d_ctrl_amm_0_cmd_width_adapter_src_valid;                                        // emif_s10_ddr4_d_ctrl_amm_0_cmd_width_adapter:out_valid -> emif_s10_ddr4_d_ctrl_amm_0_agent:cp_valid
	wire  [664:0] emif_s10_ddr4_d_ctrl_amm_0_cmd_width_adapter_src_data;                                         // emif_s10_ddr4_d_ctrl_amm_0_cmd_width_adapter:out_data -> emif_s10_ddr4_d_ctrl_amm_0_agent:cp_data
	wire          emif_s10_ddr4_d_ctrl_amm_0_cmd_width_adapter_src_ready;                                        // emif_s10_ddr4_d_ctrl_amm_0_agent:cp_ready -> emif_s10_ddr4_d_ctrl_amm_0_cmd_width_adapter:out_ready
	wire    [3:0] emif_s10_ddr4_d_ctrl_amm_0_cmd_width_adapter_src_channel;                                      // emif_s10_ddr4_d_ctrl_amm_0_cmd_width_adapter:out_channel -> emif_s10_ddr4_d_ctrl_amm_0_agent:cp_channel
	wire          emif_s10_ddr4_d_ctrl_amm_0_cmd_width_adapter_src_startofpacket;                                // emif_s10_ddr4_d_ctrl_amm_0_cmd_width_adapter:out_startofpacket -> emif_s10_ddr4_d_ctrl_amm_0_agent:cp_startofpacket
	wire          emif_s10_ddr4_d_ctrl_amm_0_cmd_width_adapter_src_endofpacket;                                  // emif_s10_ddr4_d_ctrl_amm_0_cmd_width_adapter:out_endofpacket -> emif_s10_ddr4_d_ctrl_amm_0_agent:cp_endofpacket
	wire          router_001_src_valid;                                                                          // router_001:src_valid -> emif_s10_ddr4_a_ctrl_amm_0_rsp_width_adapter:in_valid
	wire  [664:0] router_001_src_data;                                                                           // router_001:src_data -> emif_s10_ddr4_a_ctrl_amm_0_rsp_width_adapter:in_data
	wire          router_001_src_ready;                                                                          // emif_s10_ddr4_a_ctrl_amm_0_rsp_width_adapter:in_ready -> router_001:src_ready
	wire    [3:0] router_001_src_channel;                                                                        // router_001:src_channel -> emif_s10_ddr4_a_ctrl_amm_0_rsp_width_adapter:in_channel
	wire          router_001_src_startofpacket;                                                                  // router_001:src_startofpacket -> emif_s10_ddr4_a_ctrl_amm_0_rsp_width_adapter:in_startofpacket
	wire          router_001_src_endofpacket;                                                                    // router_001:src_endofpacket -> emif_s10_ddr4_a_ctrl_amm_0_rsp_width_adapter:in_endofpacket
	wire          emif_s10_ddr4_a_ctrl_amm_0_rsp_width_adapter_src_valid;                                        // emif_s10_ddr4_a_ctrl_amm_0_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire  [124:0] emif_s10_ddr4_a_ctrl_amm_0_rsp_width_adapter_src_data;                                         // emif_s10_ddr4_a_ctrl_amm_0_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire          emif_s10_ddr4_a_ctrl_amm_0_rsp_width_adapter_src_ready;                                        // rsp_demux:sink_ready -> emif_s10_ddr4_a_ctrl_amm_0_rsp_width_adapter:out_ready
	wire    [3:0] emif_s10_ddr4_a_ctrl_amm_0_rsp_width_adapter_src_channel;                                      // emif_s10_ddr4_a_ctrl_amm_0_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire          emif_s10_ddr4_a_ctrl_amm_0_rsp_width_adapter_src_startofpacket;                                // emif_s10_ddr4_a_ctrl_amm_0_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire          emif_s10_ddr4_a_ctrl_amm_0_rsp_width_adapter_src_endofpacket;                                  // emif_s10_ddr4_a_ctrl_amm_0_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire          router_002_src_valid;                                                                          // router_002:src_valid -> emif_s10_ddr4_b_ctrl_amm_0_rsp_width_adapter:in_valid
	wire  [664:0] router_002_src_data;                                                                           // router_002:src_data -> emif_s10_ddr4_b_ctrl_amm_0_rsp_width_adapter:in_data
	wire          router_002_src_ready;                                                                          // emif_s10_ddr4_b_ctrl_amm_0_rsp_width_adapter:in_ready -> router_002:src_ready
	wire    [3:0] router_002_src_channel;                                                                        // router_002:src_channel -> emif_s10_ddr4_b_ctrl_amm_0_rsp_width_adapter:in_channel
	wire          router_002_src_startofpacket;                                                                  // router_002:src_startofpacket -> emif_s10_ddr4_b_ctrl_amm_0_rsp_width_adapter:in_startofpacket
	wire          router_002_src_endofpacket;                                                                    // router_002:src_endofpacket -> emif_s10_ddr4_b_ctrl_amm_0_rsp_width_adapter:in_endofpacket
	wire          emif_s10_ddr4_b_ctrl_amm_0_rsp_width_adapter_src_valid;                                        // emif_s10_ddr4_b_ctrl_amm_0_rsp_width_adapter:out_valid -> rsp_demux_001:sink_valid
	wire  [124:0] emif_s10_ddr4_b_ctrl_amm_0_rsp_width_adapter_src_data;                                         // emif_s10_ddr4_b_ctrl_amm_0_rsp_width_adapter:out_data -> rsp_demux_001:sink_data
	wire          emif_s10_ddr4_b_ctrl_amm_0_rsp_width_adapter_src_ready;                                        // rsp_demux_001:sink_ready -> emif_s10_ddr4_b_ctrl_amm_0_rsp_width_adapter:out_ready
	wire    [3:0] emif_s10_ddr4_b_ctrl_amm_0_rsp_width_adapter_src_channel;                                      // emif_s10_ddr4_b_ctrl_amm_0_rsp_width_adapter:out_channel -> rsp_demux_001:sink_channel
	wire          emif_s10_ddr4_b_ctrl_amm_0_rsp_width_adapter_src_startofpacket;                                // emif_s10_ddr4_b_ctrl_amm_0_rsp_width_adapter:out_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          emif_s10_ddr4_b_ctrl_amm_0_rsp_width_adapter_src_endofpacket;                                  // emif_s10_ddr4_b_ctrl_amm_0_rsp_width_adapter:out_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          router_003_src_valid;                                                                          // router_003:src_valid -> emif_s10_ddr4_c_ctrl_amm_0_rsp_width_adapter:in_valid
	wire  [664:0] router_003_src_data;                                                                           // router_003:src_data -> emif_s10_ddr4_c_ctrl_amm_0_rsp_width_adapter:in_data
	wire          router_003_src_ready;                                                                          // emif_s10_ddr4_c_ctrl_amm_0_rsp_width_adapter:in_ready -> router_003:src_ready
	wire    [3:0] router_003_src_channel;                                                                        // router_003:src_channel -> emif_s10_ddr4_c_ctrl_amm_0_rsp_width_adapter:in_channel
	wire          router_003_src_startofpacket;                                                                  // router_003:src_startofpacket -> emif_s10_ddr4_c_ctrl_amm_0_rsp_width_adapter:in_startofpacket
	wire          router_003_src_endofpacket;                                                                    // router_003:src_endofpacket -> emif_s10_ddr4_c_ctrl_amm_0_rsp_width_adapter:in_endofpacket
	wire          emif_s10_ddr4_c_ctrl_amm_0_rsp_width_adapter_src_valid;                                        // emif_s10_ddr4_c_ctrl_amm_0_rsp_width_adapter:out_valid -> rsp_demux_002:sink_valid
	wire  [124:0] emif_s10_ddr4_c_ctrl_amm_0_rsp_width_adapter_src_data;                                         // emif_s10_ddr4_c_ctrl_amm_0_rsp_width_adapter:out_data -> rsp_demux_002:sink_data
	wire          emif_s10_ddr4_c_ctrl_amm_0_rsp_width_adapter_src_ready;                                        // rsp_demux_002:sink_ready -> emif_s10_ddr4_c_ctrl_amm_0_rsp_width_adapter:out_ready
	wire    [3:0] emif_s10_ddr4_c_ctrl_amm_0_rsp_width_adapter_src_channel;                                      // emif_s10_ddr4_c_ctrl_amm_0_rsp_width_adapter:out_channel -> rsp_demux_002:sink_channel
	wire          emif_s10_ddr4_c_ctrl_amm_0_rsp_width_adapter_src_startofpacket;                                // emif_s10_ddr4_c_ctrl_amm_0_rsp_width_adapter:out_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          emif_s10_ddr4_c_ctrl_amm_0_rsp_width_adapter_src_endofpacket;                                  // emif_s10_ddr4_c_ctrl_amm_0_rsp_width_adapter:out_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          router_004_src_valid;                                                                          // router_004:src_valid -> emif_s10_ddr4_d_ctrl_amm_0_rsp_width_adapter:in_valid
	wire  [664:0] router_004_src_data;                                                                           // router_004:src_data -> emif_s10_ddr4_d_ctrl_amm_0_rsp_width_adapter:in_data
	wire          router_004_src_ready;                                                                          // emif_s10_ddr4_d_ctrl_amm_0_rsp_width_adapter:in_ready -> router_004:src_ready
	wire    [3:0] router_004_src_channel;                                                                        // router_004:src_channel -> emif_s10_ddr4_d_ctrl_amm_0_rsp_width_adapter:in_channel
	wire          router_004_src_startofpacket;                                                                  // router_004:src_startofpacket -> emif_s10_ddr4_d_ctrl_amm_0_rsp_width_adapter:in_startofpacket
	wire          router_004_src_endofpacket;                                                                    // router_004:src_endofpacket -> emif_s10_ddr4_d_ctrl_amm_0_rsp_width_adapter:in_endofpacket
	wire          emif_s10_ddr4_d_ctrl_amm_0_rsp_width_adapter_src_valid;                                        // emif_s10_ddr4_d_ctrl_amm_0_rsp_width_adapter:out_valid -> rsp_demux_003:sink_valid
	wire  [124:0] emif_s10_ddr4_d_ctrl_amm_0_rsp_width_adapter_src_data;                                         // emif_s10_ddr4_d_ctrl_amm_0_rsp_width_adapter:out_data -> rsp_demux_003:sink_data
	wire          emif_s10_ddr4_d_ctrl_amm_0_rsp_width_adapter_src_ready;                                        // rsp_demux_003:sink_ready -> emif_s10_ddr4_d_ctrl_amm_0_rsp_width_adapter:out_ready
	wire    [3:0] emif_s10_ddr4_d_ctrl_amm_0_rsp_width_adapter_src_channel;                                      // emif_s10_ddr4_d_ctrl_amm_0_rsp_width_adapter:out_channel -> rsp_demux_003:sink_channel
	wire          emif_s10_ddr4_d_ctrl_amm_0_rsp_width_adapter_src_startofpacket;                                // emif_s10_ddr4_d_ctrl_amm_0_rsp_width_adapter:out_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          emif_s10_ddr4_d_ctrl_amm_0_rsp_width_adapter_src_endofpacket;                                  // emif_s10_ddr4_d_ctrl_amm_0_rsp_width_adapter:out_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          cmd_demux_src0_valid;                                                                          // cmd_demux:src0_valid -> crosser:in_valid
	wire  [124:0] cmd_demux_src0_data;                                                                           // cmd_demux:src0_data -> crosser:in_data
	wire          cmd_demux_src0_ready;                                                                          // crosser:in_ready -> cmd_demux:src0_ready
	wire    [3:0] cmd_demux_src0_channel;                                                                        // cmd_demux:src0_channel -> crosser:in_channel
	wire          cmd_demux_src0_startofpacket;                                                                  // cmd_demux:src0_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                                    // cmd_demux:src0_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                                             // crosser:out_valid -> cmd_mux:sink0_valid
	wire  [124:0] crosser_out_data;                                                                              // crosser:out_data -> cmd_mux:sink0_data
	wire          crosser_out_ready;                                                                             // cmd_mux:sink0_ready -> crosser:out_ready
	wire    [3:0] crosser_out_channel;                                                                           // crosser:out_channel -> cmd_mux:sink0_channel
	wire          crosser_out_startofpacket;                                                                     // crosser:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          crosser_out_endofpacket;                                                                       // crosser:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                                          // cmd_demux:src1_valid -> crosser_001:in_valid
	wire  [124:0] cmd_demux_src1_data;                                                                           // cmd_demux:src1_data -> crosser_001:in_data
	wire          cmd_demux_src1_ready;                                                                          // crosser_001:in_ready -> cmd_demux:src1_ready
	wire    [3:0] cmd_demux_src1_channel;                                                                        // cmd_demux:src1_channel -> crosser_001:in_channel
	wire          cmd_demux_src1_startofpacket;                                                                  // cmd_demux:src1_startofpacket -> crosser_001:in_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                                    // cmd_demux:src1_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                                                         // crosser_001:out_valid -> cmd_mux_001:sink0_valid
	wire  [124:0] crosser_001_out_data;                                                                          // crosser_001:out_data -> cmd_mux_001:sink0_data
	wire          crosser_001_out_ready;                                                                         // cmd_mux_001:sink0_ready -> crosser_001:out_ready
	wire    [3:0] crosser_001_out_channel;                                                                       // crosser_001:out_channel -> cmd_mux_001:sink0_channel
	wire          crosser_001_out_startofpacket;                                                                 // crosser_001:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          crosser_001_out_endofpacket;                                                                   // crosser_001:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                                          // cmd_demux:src2_valid -> crosser_002:in_valid
	wire  [124:0] cmd_demux_src2_data;                                                                           // cmd_demux:src2_data -> crosser_002:in_data
	wire          cmd_demux_src2_ready;                                                                          // crosser_002:in_ready -> cmd_demux:src2_ready
	wire    [3:0] cmd_demux_src2_channel;                                                                        // cmd_demux:src2_channel -> crosser_002:in_channel
	wire          cmd_demux_src2_startofpacket;                                                                  // cmd_demux:src2_startofpacket -> crosser_002:in_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                                    // cmd_demux:src2_endofpacket -> crosser_002:in_endofpacket
	wire          crosser_002_out_valid;                                                                         // crosser_002:out_valid -> cmd_mux_002:sink0_valid
	wire  [124:0] crosser_002_out_data;                                                                          // crosser_002:out_data -> cmd_mux_002:sink0_data
	wire          crosser_002_out_ready;                                                                         // cmd_mux_002:sink0_ready -> crosser_002:out_ready
	wire    [3:0] crosser_002_out_channel;                                                                       // crosser_002:out_channel -> cmd_mux_002:sink0_channel
	wire          crosser_002_out_startofpacket;                                                                 // crosser_002:out_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          crosser_002_out_endofpacket;                                                                   // crosser_002:out_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                                          // cmd_demux:src3_valid -> crosser_003:in_valid
	wire  [124:0] cmd_demux_src3_data;                                                                           // cmd_demux:src3_data -> crosser_003:in_data
	wire          cmd_demux_src3_ready;                                                                          // crosser_003:in_ready -> cmd_demux:src3_ready
	wire    [3:0] cmd_demux_src3_channel;                                                                        // cmd_demux:src3_channel -> crosser_003:in_channel
	wire          cmd_demux_src3_startofpacket;                                                                  // cmd_demux:src3_startofpacket -> crosser_003:in_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                                    // cmd_demux:src3_endofpacket -> crosser_003:in_endofpacket
	wire          crosser_003_out_valid;                                                                         // crosser_003:out_valid -> cmd_mux_003:sink0_valid
	wire  [124:0] crosser_003_out_data;                                                                          // crosser_003:out_data -> cmd_mux_003:sink0_data
	wire          crosser_003_out_ready;                                                                         // cmd_mux_003:sink0_ready -> crosser_003:out_ready
	wire    [3:0] crosser_003_out_channel;                                                                       // crosser_003:out_channel -> cmd_mux_003:sink0_channel
	wire          crosser_003_out_startofpacket;                                                                 // crosser_003:out_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          crosser_003_out_endofpacket;                                                                   // crosser_003:out_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                                          // rsp_demux:src0_valid -> crosser_004:in_valid
	wire  [124:0] rsp_demux_src0_data;                                                                           // rsp_demux:src0_data -> crosser_004:in_data
	wire          rsp_demux_src0_ready;                                                                          // crosser_004:in_ready -> rsp_demux:src0_ready
	wire    [3:0] rsp_demux_src0_channel;                                                                        // rsp_demux:src0_channel -> crosser_004:in_channel
	wire          rsp_demux_src0_startofpacket;                                                                  // rsp_demux:src0_startofpacket -> crosser_004:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                                    // rsp_demux:src0_endofpacket -> crosser_004:in_endofpacket
	wire          crosser_004_out_valid;                                                                         // crosser_004:out_valid -> rsp_mux:sink0_valid
	wire  [124:0] crosser_004_out_data;                                                                          // crosser_004:out_data -> rsp_mux:sink0_data
	wire          crosser_004_out_ready;                                                                         // rsp_mux:sink0_ready -> crosser_004:out_ready
	wire    [3:0] crosser_004_out_channel;                                                                       // crosser_004:out_channel -> rsp_mux:sink0_channel
	wire          crosser_004_out_startofpacket;                                                                 // crosser_004:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          crosser_004_out_endofpacket;                                                                   // crosser_004:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                                      // rsp_demux_001:src0_valid -> crosser_005:in_valid
	wire  [124:0] rsp_demux_001_src0_data;                                                                       // rsp_demux_001:src0_data -> crosser_005:in_data
	wire          rsp_demux_001_src0_ready;                                                                      // crosser_005:in_ready -> rsp_demux_001:src0_ready
	wire    [3:0] rsp_demux_001_src0_channel;                                                                    // rsp_demux_001:src0_channel -> crosser_005:in_channel
	wire          rsp_demux_001_src0_startofpacket;                                                              // rsp_demux_001:src0_startofpacket -> crosser_005:in_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                                // rsp_demux_001:src0_endofpacket -> crosser_005:in_endofpacket
	wire          crosser_005_out_valid;                                                                         // crosser_005:out_valid -> rsp_mux:sink1_valid
	wire  [124:0] crosser_005_out_data;                                                                          // crosser_005:out_data -> rsp_mux:sink1_data
	wire          crosser_005_out_ready;                                                                         // rsp_mux:sink1_ready -> crosser_005:out_ready
	wire    [3:0] crosser_005_out_channel;                                                                       // crosser_005:out_channel -> rsp_mux:sink1_channel
	wire          crosser_005_out_startofpacket;                                                                 // crosser_005:out_startofpacket -> rsp_mux:sink1_startofpacket
	wire          crosser_005_out_endofpacket;                                                                   // crosser_005:out_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                                      // rsp_demux_002:src0_valid -> crosser_006:in_valid
	wire  [124:0] rsp_demux_002_src0_data;                                                                       // rsp_demux_002:src0_data -> crosser_006:in_data
	wire          rsp_demux_002_src0_ready;                                                                      // crosser_006:in_ready -> rsp_demux_002:src0_ready
	wire    [3:0] rsp_demux_002_src0_channel;                                                                    // rsp_demux_002:src0_channel -> crosser_006:in_channel
	wire          rsp_demux_002_src0_startofpacket;                                                              // rsp_demux_002:src0_startofpacket -> crosser_006:in_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                                // rsp_demux_002:src0_endofpacket -> crosser_006:in_endofpacket
	wire          crosser_006_out_valid;                                                                         // crosser_006:out_valid -> rsp_mux:sink2_valid
	wire  [124:0] crosser_006_out_data;                                                                          // crosser_006:out_data -> rsp_mux:sink2_data
	wire          crosser_006_out_ready;                                                                         // rsp_mux:sink2_ready -> crosser_006:out_ready
	wire    [3:0] crosser_006_out_channel;                                                                       // crosser_006:out_channel -> rsp_mux:sink2_channel
	wire          crosser_006_out_startofpacket;                                                                 // crosser_006:out_startofpacket -> rsp_mux:sink2_startofpacket
	wire          crosser_006_out_endofpacket;                                                                   // crosser_006:out_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                                      // rsp_demux_003:src0_valid -> crosser_007:in_valid
	wire  [124:0] rsp_demux_003_src0_data;                                                                       // rsp_demux_003:src0_data -> crosser_007:in_data
	wire          rsp_demux_003_src0_ready;                                                                      // crosser_007:in_ready -> rsp_demux_003:src0_ready
	wire    [3:0] rsp_demux_003_src0_channel;                                                                    // rsp_demux_003:src0_channel -> crosser_007:in_channel
	wire          rsp_demux_003_src0_startofpacket;                                                              // rsp_demux_003:src0_startofpacket -> crosser_007:in_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                                // rsp_demux_003:src0_endofpacket -> crosser_007:in_endofpacket
	wire          crosser_007_out_valid;                                                                         // crosser_007:out_valid -> rsp_mux:sink3_valid
	wire  [124:0] crosser_007_out_data;                                                                          // crosser_007:out_data -> rsp_mux:sink3_data
	wire          crosser_007_out_ready;                                                                         // rsp_mux:sink3_ready -> crosser_007:out_ready
	wire    [3:0] crosser_007_out_channel;                                                                       // crosser_007:out_channel -> rsp_mux:sink3_channel
	wire          crosser_007_out_startofpacket;                                                                 // crosser_007:out_startofpacket -> rsp_mux:sink3_startofpacket
	wire          crosser_007_out_endofpacket;                                                                   // crosser_007:out_endofpacket -> rsp_mux:sink3_endofpacket
	wire    [3:0] address_span_extender_ddr4_expanded_master_limiter_cmd_valid_data;                             // address_span_extender_ddr4_expanded_master_limiter:cmd_src_valid -> cmd_demux:sink_valid

	DE10_Pro_QSYS_altera_merlin_master_translator_191_g7h47bq #(
		.AV_ADDRESS_W                (34),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (34),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (0),
		.WAITREQUEST_ALLOWANCE       (0)
	) address_span_extender_ddr4_expanded_master_translator (
		.clk                    (iopll_0_outclk1_clk),                                                                           //   input,   width = 1,                       clk.clk
		.reset                  (address_span_extender_ddr4_reset_reset_bridge_in_reset_reset),                                  //   input,   width = 1,                     reset.reset
		.uav_address            (address_span_extender_ddr4_expanded_master_translator_avalon_universal_master_0_address),       //  output,  width = 34, avalon_universal_master_0.address
		.uav_burstcount         (address_span_extender_ddr4_expanded_master_translator_avalon_universal_master_0_burstcount),    //  output,   width = 3,                          .burstcount
		.uav_read               (address_span_extender_ddr4_expanded_master_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (address_span_extender_ddr4_expanded_master_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (address_span_extender_ddr4_expanded_master_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (address_span_extender_ddr4_expanded_master_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (address_span_extender_ddr4_expanded_master_translator_avalon_universal_master_0_byteenable),    //  output,   width = 4,                          .byteenable
		.uav_readdata           (address_span_extender_ddr4_expanded_master_translator_avalon_universal_master_0_readdata),      //   input,  width = 32,                          .readdata
		.uav_writedata          (address_span_extender_ddr4_expanded_master_translator_avalon_universal_master_0_writedata),     //  output,  width = 32,                          .writedata
		.uav_lock               (address_span_extender_ddr4_expanded_master_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (address_span_extender_ddr4_expanded_master_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (address_span_extender_ddr4_expanded_master_address),                                            //   input,  width = 34,      avalon_anti_master_0.address
		.av_waitrequest         (address_span_extender_ddr4_expanded_master_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_burstcount          (address_span_extender_ddr4_expanded_master_burstcount),                                         //   input,   width = 1,                          .burstcount
		.av_byteenable          (address_span_extender_ddr4_expanded_master_byteenable),                                         //   input,   width = 4,                          .byteenable
		.av_read                (address_span_extender_ddr4_expanded_master_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (address_span_extender_ddr4_expanded_master_readdata),                                           //  output,  width = 32,                          .readdata
		.av_readdatavalid       (address_span_extender_ddr4_expanded_master_readdatavalid),                                      //  output,   width = 1,                          .readdatavalid
		.av_write               (address_span_extender_ddr4_expanded_master_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (address_span_extender_ddr4_expanded_master_writedata),                                          //   input,  width = 32,                          .writedata
		.av_beginbursttransfer  (1'b0),                                                                                          // (terminated),                                        
		.av_begintransfer       (1'b0),                                                                                          // (terminated),                                        
		.av_chipselect          (1'b0),                                                                                          // (terminated),                                        
		.av_lock                (1'b0),                                                                                          // (terminated),                                        
		.av_debugaccess         (1'b0),                                                                                          // (terminated),                                        
		.uav_clken              (),                                                                                              // (terminated),                                        
		.av_clken               (1'b1),                                                                                          // (terminated),                                        
		.uav_response           (2'b00),                                                                                         // (terminated),                                        
		.av_response            (),                                                                                              // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                                                          // (terminated),                                        
		.av_writeresponsevalid  ()                                                                                               // (terminated),                                        
	);

	DE10_Pro_QSYS_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (26),
		.AV_DATA_W                      (512),
		.UAV_DATA_W                     (512),
		.AV_BURSTCOUNT_W                (7),
		.AV_BYTEENABLE_W                (64),
		.UAV_BYTEENABLE_W               (64),
		.UAV_ADDRESS_W                  (34),
		.UAV_BURSTCOUNT_W               (13),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (64),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) emif_s10_ddr4_a_ctrl_amm_0_translator (
		.clk                    (emif_s10_ddr4_a_emif_usr_clk_clk),                                        //   input,    width = 1,                      clk.clk
		.reset                  (emif_s10_ddr4_a_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,                    reset.reset
		.uav_address            (emif_s10_ddr4_a_ctrl_amm_0_agent_m0_address),                             //   input,   width = 34, avalon_universal_slave_0.address
		.uav_burstcount         (emif_s10_ddr4_a_ctrl_amm_0_agent_m0_burstcount),                          //   input,   width = 13,                         .burstcount
		.uav_read               (emif_s10_ddr4_a_ctrl_amm_0_agent_m0_read),                                //   input,    width = 1,                         .read
		.uav_write              (emif_s10_ddr4_a_ctrl_amm_0_agent_m0_write),                               //   input,    width = 1,                         .write
		.uav_waitrequest        (emif_s10_ddr4_a_ctrl_amm_0_agent_m0_waitrequest),                         //  output,    width = 1,                         .waitrequest
		.uav_readdatavalid      (emif_s10_ddr4_a_ctrl_amm_0_agent_m0_readdatavalid),                       //  output,    width = 1,                         .readdatavalid
		.uav_byteenable         (emif_s10_ddr4_a_ctrl_amm_0_agent_m0_byteenable),                          //   input,   width = 64,                         .byteenable
		.uav_readdata           (emif_s10_ddr4_a_ctrl_amm_0_agent_m0_readdata),                            //  output,  width = 512,                         .readdata
		.uav_writedata          (emif_s10_ddr4_a_ctrl_amm_0_agent_m0_writedata),                           //   input,  width = 512,                         .writedata
		.uav_lock               (emif_s10_ddr4_a_ctrl_amm_0_agent_m0_lock),                                //   input,    width = 1,                         .lock
		.uav_debugaccess        (emif_s10_ddr4_a_ctrl_amm_0_agent_m0_debugaccess),                         //   input,    width = 1,                         .debugaccess
		.av_address             (emif_s10_ddr4_a_ctrl_amm_0_address),                                      //  output,   width = 26,      avalon_anti_slave_0.address
		.av_write               (emif_s10_ddr4_a_ctrl_amm_0_write),                                        //  output,    width = 1,                         .write
		.av_read                (emif_s10_ddr4_a_ctrl_amm_0_read),                                         //  output,    width = 1,                         .read
		.av_readdata            (emif_s10_ddr4_a_ctrl_amm_0_readdata),                                     //   input,  width = 512,                         .readdata
		.av_writedata           (emif_s10_ddr4_a_ctrl_amm_0_writedata),                                    //  output,  width = 512,                         .writedata
		.av_burstcount          (emif_s10_ddr4_a_ctrl_amm_0_burstcount),                                   //  output,    width = 7,                         .burstcount
		.av_byteenable          (emif_s10_ddr4_a_ctrl_amm_0_byteenable),                                   //  output,   width = 64,                         .byteenable
		.av_readdatavalid       (emif_s10_ddr4_a_ctrl_amm_0_readdatavalid),                                //   input,    width = 1,                         .readdatavalid
		.av_waitrequest         (emif_s10_ddr4_a_ctrl_amm_0_waitrequest),                                  //   input,    width = 1,                         .waitrequest
		.av_begintransfer       (),                                                                        // (terminated),                                        
		.av_beginbursttransfer  (),                                                                        // (terminated),                                        
		.av_writebyteenable     (),                                                                        // (terminated),                                        
		.av_lock                (),                                                                        // (terminated),                                        
		.av_chipselect          (),                                                                        // (terminated),                                        
		.av_clken               (),                                                                        // (terminated),                                        
		.uav_clken              (1'b0),                                                                    // (terminated),                                        
		.av_debugaccess         (),                                                                        // (terminated),                                        
		.av_outputenable        (),                                                                        // (terminated),                                        
		.uav_response           (),                                                                        // (terminated),                                        
		.av_response            (2'b00),                                                                   // (terminated),                                        
		.uav_writeresponsevalid (),                                                                        // (terminated),                                        
		.av_writeresponsevalid  (1'b0)                                                                     // (terminated),                                        
	);

	DE10_Pro_QSYS_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (26),
		.AV_DATA_W                      (512),
		.UAV_DATA_W                     (512),
		.AV_BURSTCOUNT_W                (7),
		.AV_BYTEENABLE_W                (64),
		.UAV_BYTEENABLE_W               (64),
		.UAV_ADDRESS_W                  (34),
		.UAV_BURSTCOUNT_W               (13),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (64),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) emif_s10_ddr4_b_ctrl_amm_0_translator (
		.clk                    (emif_s10_ddr4_b_emif_usr_clk_clk),                                        //   input,    width = 1,                      clk.clk
		.reset                  (emif_s10_ddr4_b_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,                    reset.reset
		.uav_address            (emif_s10_ddr4_b_ctrl_amm_0_agent_m0_address),                             //   input,   width = 34, avalon_universal_slave_0.address
		.uav_burstcount         (emif_s10_ddr4_b_ctrl_amm_0_agent_m0_burstcount),                          //   input,   width = 13,                         .burstcount
		.uav_read               (emif_s10_ddr4_b_ctrl_amm_0_agent_m0_read),                                //   input,    width = 1,                         .read
		.uav_write              (emif_s10_ddr4_b_ctrl_amm_0_agent_m0_write),                               //   input,    width = 1,                         .write
		.uav_waitrequest        (emif_s10_ddr4_b_ctrl_amm_0_agent_m0_waitrequest),                         //  output,    width = 1,                         .waitrequest
		.uav_readdatavalid      (emif_s10_ddr4_b_ctrl_amm_0_agent_m0_readdatavalid),                       //  output,    width = 1,                         .readdatavalid
		.uav_byteenable         (emif_s10_ddr4_b_ctrl_amm_0_agent_m0_byteenable),                          //   input,   width = 64,                         .byteenable
		.uav_readdata           (emif_s10_ddr4_b_ctrl_amm_0_agent_m0_readdata),                            //  output,  width = 512,                         .readdata
		.uav_writedata          (emif_s10_ddr4_b_ctrl_amm_0_agent_m0_writedata),                           //   input,  width = 512,                         .writedata
		.uav_lock               (emif_s10_ddr4_b_ctrl_amm_0_agent_m0_lock),                                //   input,    width = 1,                         .lock
		.uav_debugaccess        (emif_s10_ddr4_b_ctrl_amm_0_agent_m0_debugaccess),                         //   input,    width = 1,                         .debugaccess
		.av_address             (emif_s10_ddr4_b_ctrl_amm_0_address),                                      //  output,   width = 26,      avalon_anti_slave_0.address
		.av_write               (emif_s10_ddr4_b_ctrl_amm_0_write),                                        //  output,    width = 1,                         .write
		.av_read                (emif_s10_ddr4_b_ctrl_amm_0_read),                                         //  output,    width = 1,                         .read
		.av_readdata            (emif_s10_ddr4_b_ctrl_amm_0_readdata),                                     //   input,  width = 512,                         .readdata
		.av_writedata           (emif_s10_ddr4_b_ctrl_amm_0_writedata),                                    //  output,  width = 512,                         .writedata
		.av_burstcount          (emif_s10_ddr4_b_ctrl_amm_0_burstcount),                                   //  output,    width = 7,                         .burstcount
		.av_byteenable          (emif_s10_ddr4_b_ctrl_amm_0_byteenable),                                   //  output,   width = 64,                         .byteenable
		.av_readdatavalid       (emif_s10_ddr4_b_ctrl_amm_0_readdatavalid),                                //   input,    width = 1,                         .readdatavalid
		.av_waitrequest         (emif_s10_ddr4_b_ctrl_amm_0_waitrequest),                                  //   input,    width = 1,                         .waitrequest
		.av_begintransfer       (),                                                                        // (terminated),                                        
		.av_beginbursttransfer  (),                                                                        // (terminated),                                        
		.av_writebyteenable     (),                                                                        // (terminated),                                        
		.av_lock                (),                                                                        // (terminated),                                        
		.av_chipselect          (),                                                                        // (terminated),                                        
		.av_clken               (),                                                                        // (terminated),                                        
		.uav_clken              (1'b0),                                                                    // (terminated),                                        
		.av_debugaccess         (),                                                                        // (terminated),                                        
		.av_outputenable        (),                                                                        // (terminated),                                        
		.uav_response           (),                                                                        // (terminated),                                        
		.av_response            (2'b00),                                                                   // (terminated),                                        
		.uav_writeresponsevalid (),                                                                        // (terminated),                                        
		.av_writeresponsevalid  (1'b0)                                                                     // (terminated),                                        
	);

	DE10_Pro_QSYS_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (26),
		.AV_DATA_W                      (512),
		.UAV_DATA_W                     (512),
		.AV_BURSTCOUNT_W                (7),
		.AV_BYTEENABLE_W                (64),
		.UAV_BYTEENABLE_W               (64),
		.UAV_ADDRESS_W                  (34),
		.UAV_BURSTCOUNT_W               (13),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (64),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) emif_s10_ddr4_c_ctrl_amm_0_translator (
		.clk                    (emif_s10_ddr4_c_emif_usr_clk_clk),                                        //   input,    width = 1,                      clk.clk
		.reset                  (emif_s10_ddr4_c_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,                    reset.reset
		.uav_address            (emif_s10_ddr4_c_ctrl_amm_0_agent_m0_address),                             //   input,   width = 34, avalon_universal_slave_0.address
		.uav_burstcount         (emif_s10_ddr4_c_ctrl_amm_0_agent_m0_burstcount),                          //   input,   width = 13,                         .burstcount
		.uav_read               (emif_s10_ddr4_c_ctrl_amm_0_agent_m0_read),                                //   input,    width = 1,                         .read
		.uav_write              (emif_s10_ddr4_c_ctrl_amm_0_agent_m0_write),                               //   input,    width = 1,                         .write
		.uav_waitrequest        (emif_s10_ddr4_c_ctrl_amm_0_agent_m0_waitrequest),                         //  output,    width = 1,                         .waitrequest
		.uav_readdatavalid      (emif_s10_ddr4_c_ctrl_amm_0_agent_m0_readdatavalid),                       //  output,    width = 1,                         .readdatavalid
		.uav_byteenable         (emif_s10_ddr4_c_ctrl_amm_0_agent_m0_byteenable),                          //   input,   width = 64,                         .byteenable
		.uav_readdata           (emif_s10_ddr4_c_ctrl_amm_0_agent_m0_readdata),                            //  output,  width = 512,                         .readdata
		.uav_writedata          (emif_s10_ddr4_c_ctrl_amm_0_agent_m0_writedata),                           //   input,  width = 512,                         .writedata
		.uav_lock               (emif_s10_ddr4_c_ctrl_amm_0_agent_m0_lock),                                //   input,    width = 1,                         .lock
		.uav_debugaccess        (emif_s10_ddr4_c_ctrl_amm_0_agent_m0_debugaccess),                         //   input,    width = 1,                         .debugaccess
		.av_address             (emif_s10_ddr4_c_ctrl_amm_0_address),                                      //  output,   width = 26,      avalon_anti_slave_0.address
		.av_write               (emif_s10_ddr4_c_ctrl_amm_0_write),                                        //  output,    width = 1,                         .write
		.av_read                (emif_s10_ddr4_c_ctrl_amm_0_read),                                         //  output,    width = 1,                         .read
		.av_readdata            (emif_s10_ddr4_c_ctrl_amm_0_readdata),                                     //   input,  width = 512,                         .readdata
		.av_writedata           (emif_s10_ddr4_c_ctrl_amm_0_writedata),                                    //  output,  width = 512,                         .writedata
		.av_burstcount          (emif_s10_ddr4_c_ctrl_amm_0_burstcount),                                   //  output,    width = 7,                         .burstcount
		.av_byteenable          (emif_s10_ddr4_c_ctrl_amm_0_byteenable),                                   //  output,   width = 64,                         .byteenable
		.av_readdatavalid       (emif_s10_ddr4_c_ctrl_amm_0_readdatavalid),                                //   input,    width = 1,                         .readdatavalid
		.av_waitrequest         (emif_s10_ddr4_c_ctrl_amm_0_waitrequest),                                  //   input,    width = 1,                         .waitrequest
		.av_begintransfer       (),                                                                        // (terminated),                                        
		.av_beginbursttransfer  (),                                                                        // (terminated),                                        
		.av_writebyteenable     (),                                                                        // (terminated),                                        
		.av_lock                (),                                                                        // (terminated),                                        
		.av_chipselect          (),                                                                        // (terminated),                                        
		.av_clken               (),                                                                        // (terminated),                                        
		.uav_clken              (1'b0),                                                                    // (terminated),                                        
		.av_debugaccess         (),                                                                        // (terminated),                                        
		.av_outputenable        (),                                                                        // (terminated),                                        
		.uav_response           (),                                                                        // (terminated),                                        
		.av_response            (2'b00),                                                                   // (terminated),                                        
		.uav_writeresponsevalid (),                                                                        // (terminated),                                        
		.av_writeresponsevalid  (1'b0)                                                                     // (terminated),                                        
	);

	DE10_Pro_QSYS_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (26),
		.AV_DATA_W                      (512),
		.UAV_DATA_W                     (512),
		.AV_BURSTCOUNT_W                (7),
		.AV_BYTEENABLE_W                (64),
		.UAV_BYTEENABLE_W               (64),
		.UAV_ADDRESS_W                  (34),
		.UAV_BURSTCOUNT_W               (13),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (64),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) emif_s10_ddr4_d_ctrl_amm_0_translator (
		.clk                    (emif_s10_ddr4_d_emif_usr_clk_clk),                                        //   input,    width = 1,                      clk.clk
		.reset                  (emif_s10_ddr4_d_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,                    reset.reset
		.uav_address            (emif_s10_ddr4_d_ctrl_amm_0_agent_m0_address),                             //   input,   width = 34, avalon_universal_slave_0.address
		.uav_burstcount         (emif_s10_ddr4_d_ctrl_amm_0_agent_m0_burstcount),                          //   input,   width = 13,                         .burstcount
		.uav_read               (emif_s10_ddr4_d_ctrl_amm_0_agent_m0_read),                                //   input,    width = 1,                         .read
		.uav_write              (emif_s10_ddr4_d_ctrl_amm_0_agent_m0_write),                               //   input,    width = 1,                         .write
		.uav_waitrequest        (emif_s10_ddr4_d_ctrl_amm_0_agent_m0_waitrequest),                         //  output,    width = 1,                         .waitrequest
		.uav_readdatavalid      (emif_s10_ddr4_d_ctrl_amm_0_agent_m0_readdatavalid),                       //  output,    width = 1,                         .readdatavalid
		.uav_byteenable         (emif_s10_ddr4_d_ctrl_amm_0_agent_m0_byteenable),                          //   input,   width = 64,                         .byteenable
		.uav_readdata           (emif_s10_ddr4_d_ctrl_amm_0_agent_m0_readdata),                            //  output,  width = 512,                         .readdata
		.uav_writedata          (emif_s10_ddr4_d_ctrl_amm_0_agent_m0_writedata),                           //   input,  width = 512,                         .writedata
		.uav_lock               (emif_s10_ddr4_d_ctrl_amm_0_agent_m0_lock),                                //   input,    width = 1,                         .lock
		.uav_debugaccess        (emif_s10_ddr4_d_ctrl_amm_0_agent_m0_debugaccess),                         //   input,    width = 1,                         .debugaccess
		.av_address             (emif_s10_ddr4_d_ctrl_amm_0_address),                                      //  output,   width = 26,      avalon_anti_slave_0.address
		.av_write               (emif_s10_ddr4_d_ctrl_amm_0_write),                                        //  output,    width = 1,                         .write
		.av_read                (emif_s10_ddr4_d_ctrl_amm_0_read),                                         //  output,    width = 1,                         .read
		.av_readdata            (emif_s10_ddr4_d_ctrl_amm_0_readdata),                                     //   input,  width = 512,                         .readdata
		.av_writedata           (emif_s10_ddr4_d_ctrl_amm_0_writedata),                                    //  output,  width = 512,                         .writedata
		.av_burstcount          (emif_s10_ddr4_d_ctrl_amm_0_burstcount),                                   //  output,    width = 7,                         .burstcount
		.av_byteenable          (emif_s10_ddr4_d_ctrl_amm_0_byteenable),                                   //  output,   width = 64,                         .byteenable
		.av_readdatavalid       (emif_s10_ddr4_d_ctrl_amm_0_readdatavalid),                                //   input,    width = 1,                         .readdatavalid
		.av_waitrequest         (emif_s10_ddr4_d_ctrl_amm_0_waitrequest),                                  //   input,    width = 1,                         .waitrequest
		.av_begintransfer       (),                                                                        // (terminated),                                        
		.av_beginbursttransfer  (),                                                                        // (terminated),                                        
		.av_writebyteenable     (),                                                                        // (terminated),                                        
		.av_lock                (),                                                                        // (terminated),                                        
		.av_chipselect          (),                                                                        // (terminated),                                        
		.av_clken               (),                                                                        // (terminated),                                        
		.uav_clken              (1'b0),                                                                    // (terminated),                                        
		.av_debugaccess         (),                                                                        // (terminated),                                        
		.av_outputenable        (),                                                                        // (terminated),                                        
		.uav_response           (),                                                                        // (terminated),                                        
		.av_response            (2'b00),                                                                   // (terminated),                                        
		.uav_writeresponsevalid (),                                                                        // (terminated),                                        
		.av_writeresponsevalid  (1'b0)                                                                     // (terminated),                                        
	);

	DE10_Pro_QSYS_altera_merlin_master_agent_191_mpbm6tq #(
		.PKT_WUNIQUE               (124),
		.PKT_DOMAIN_H              (123),
		.PKT_DOMAIN_L              (122),
		.PKT_SNOOP_H               (121),
		.PKT_SNOOP_L               (118),
		.PKT_BARRIER_H             (117),
		.PKT_BARRIER_L             (116),
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_QOS_H                 (98),
		.PKT_QOS_L                 (98),
		.PKT_DATA_SIDEBAND_H       (96),
		.PKT_DATA_SIDEBAND_L       (96),
		.PKT_ADDR_SIDEBAND_H       (95),
		.PKT_ADDR_SIDEBAND_L       (95),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_CACHE_H               (110),
		.PKT_CACHE_L               (107),
		.PKT_THREAD_ID_H           (103),
		.PKT_THREAD_ID_L           (103),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_EXCLUSIVE       (75),
		.PKT_TRANS_LOCK            (74),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (89),
		.PKT_BYTE_CNT_H            (88),
		.PKT_BYTE_CNT_L            (76),
		.PKT_ADDR_H                (69),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (70),
		.PKT_TRANS_POSTED          (71),
		.PKT_TRANS_WRITE           (72),
		.PKT_TRANS_READ            (73),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (100),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (102),
		.PKT_DEST_ID_L             (101),
		.ST_DATA_W                 (125),
		.ST_CHANNEL_W              (4),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (0)
	) address_span_extender_ddr4_expanded_master_agent (
		.clk                   (iopll_0_outclk1_clk),                                                                           //   input,    width = 1,       clk.clk
		.reset                 (address_span_extender_ddr4_reset_reset_bridge_in_reset_reset),                                  //   input,    width = 1, clk_reset.reset
		.av_address            (address_span_extender_ddr4_expanded_master_translator_avalon_universal_master_0_address),       //   input,   width = 34,        av.address
		.av_write              (address_span_extender_ddr4_expanded_master_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (address_span_extender_ddr4_expanded_master_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (address_span_extender_ddr4_expanded_master_translator_avalon_universal_master_0_writedata),     //   input,   width = 32,          .writedata
		.av_readdata           (address_span_extender_ddr4_expanded_master_translator_avalon_universal_master_0_readdata),      //  output,   width = 32,          .readdata
		.av_waitrequest        (address_span_extender_ddr4_expanded_master_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (address_span_extender_ddr4_expanded_master_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (address_span_extender_ddr4_expanded_master_translator_avalon_universal_master_0_byteenable),    //   input,    width = 4,          .byteenable
		.av_burstcount         (address_span_extender_ddr4_expanded_master_translator_avalon_universal_master_0_burstcount),    //   input,    width = 3,          .burstcount
		.av_debugaccess        (address_span_extender_ddr4_expanded_master_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (address_span_extender_ddr4_expanded_master_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (address_span_extender_ddr4_expanded_master_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (address_span_extender_ddr4_expanded_master_agent_cp_data),                                      //  output,  width = 125,          .data
		.cp_startofpacket      (address_span_extender_ddr4_expanded_master_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (address_span_extender_ddr4_expanded_master_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (address_span_extender_ddr4_expanded_master_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (address_span_extender_ddr4_expanded_master_limiter_rsp_src_valid),                              //   input,    width = 1,        rp.valid
		.rp_data               (address_span_extender_ddr4_expanded_master_limiter_rsp_src_data),                               //   input,  width = 125,          .data
		.rp_channel            (address_span_extender_ddr4_expanded_master_limiter_rsp_src_channel),                            //   input,    width = 4,          .channel
		.rp_startofpacket      (address_span_extender_ddr4_expanded_master_limiter_rsp_src_startofpacket),                      //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (address_span_extender_ddr4_expanded_master_limiter_rsp_src_endofpacket),                        //   input,    width = 1,          .endofpacket
		.rp_ready              (address_span_extender_ddr4_expanded_master_limiter_rsp_src_ready),                              //  output,    width = 1,          .ready
		.av_response           (),                                                                                              // (terminated),                         
		.av_writeresponsevalid ()                                                                                               // (terminated),                         
	);

	DE10_Pro_QSYS_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (655),
		.PKT_ORI_BURST_SIZE_L      (653),
		.PKT_RESPONSE_STATUS_H     (652),
		.PKT_RESPONSE_STATUS_L     (651),
		.PKT_BURST_SIZE_H          (632),
		.PKT_BURST_SIZE_L          (630),
		.PKT_TRANS_LOCK            (614),
		.PKT_BEGIN_BURST           (637),
		.PKT_PROTECTION_H          (646),
		.PKT_PROTECTION_L          (644),
		.PKT_BURSTWRAP_H           (629),
		.PKT_BURSTWRAP_L           (629),
		.PKT_BYTE_CNT_H            (628),
		.PKT_BYTE_CNT_L            (616),
		.PKT_ADDR_H                (609),
		.PKT_ADDR_L                (576),
		.PKT_TRANS_COMPRESSED_READ (610),
		.PKT_TRANS_POSTED          (611),
		.PKT_TRANS_WRITE           (612),
		.PKT_TRANS_READ            (613),
		.PKT_DATA_H                (511),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (575),
		.PKT_BYTEEN_L              (512),
		.PKT_SRC_ID_H              (640),
		.PKT_SRC_ID_L              (639),
		.PKT_DEST_ID_H             (642),
		.PKT_DEST_ID_L             (641),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (665),
		.AVS_BURSTCOUNT_W          (13),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) emif_s10_ddr4_a_ctrl_amm_0_agent (
		.clk                     (emif_s10_ddr4_a_emif_usr_clk_clk),                                        //   input,    width = 1,             clk.clk
		.reset                   (emif_s10_ddr4_a_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (emif_s10_ddr4_a_ctrl_amm_0_agent_m0_address),                             //  output,   width = 34,              m0.address
		.m0_burstcount           (emif_s10_ddr4_a_ctrl_amm_0_agent_m0_burstcount),                          //  output,   width = 13,                .burstcount
		.m0_byteenable           (emif_s10_ddr4_a_ctrl_amm_0_agent_m0_byteenable),                          //  output,   width = 64,                .byteenable
		.m0_debugaccess          (emif_s10_ddr4_a_ctrl_amm_0_agent_m0_debugaccess),                         //  output,    width = 1,                .debugaccess
		.m0_lock                 (emif_s10_ddr4_a_ctrl_amm_0_agent_m0_lock),                                //  output,    width = 1,                .lock
		.m0_readdata             (emif_s10_ddr4_a_ctrl_amm_0_agent_m0_readdata),                            //   input,  width = 512,                .readdata
		.m0_readdatavalid        (emif_s10_ddr4_a_ctrl_amm_0_agent_m0_readdatavalid),                       //   input,    width = 1,                .readdatavalid
		.m0_read                 (emif_s10_ddr4_a_ctrl_amm_0_agent_m0_read),                                //  output,    width = 1,                .read
		.m0_waitrequest          (emif_s10_ddr4_a_ctrl_amm_0_agent_m0_waitrequest),                         //   input,    width = 1,                .waitrequest
		.m0_writedata            (emif_s10_ddr4_a_ctrl_amm_0_agent_m0_writedata),                           //  output,  width = 512,                .writedata
		.m0_write                (emif_s10_ddr4_a_ctrl_amm_0_agent_m0_write),                               //  output,    width = 1,                .write
		.rp_endofpacket          (emif_s10_ddr4_a_ctrl_amm_0_agent_rp_endofpacket),                         //  output,    width = 1,              rp.endofpacket
		.rp_ready                (emif_s10_ddr4_a_ctrl_amm_0_agent_rp_ready),                               //   input,    width = 1,                .ready
		.rp_valid                (emif_s10_ddr4_a_ctrl_amm_0_agent_rp_valid),                               //  output,    width = 1,                .valid
		.rp_data                 (emif_s10_ddr4_a_ctrl_amm_0_agent_rp_data),                                //  output,  width = 665,                .data
		.rp_startofpacket        (emif_s10_ddr4_a_ctrl_amm_0_agent_rp_startofpacket),                       //  output,    width = 1,                .startofpacket
		.cp_ready                (emif_s10_ddr4_a_ctrl_amm_0_cmd_width_adapter_src_ready),                  //  output,    width = 1,              cp.ready
		.cp_valid                (emif_s10_ddr4_a_ctrl_amm_0_cmd_width_adapter_src_valid),                  //   input,    width = 1,                .valid
		.cp_data                 (emif_s10_ddr4_a_ctrl_amm_0_cmd_width_adapter_src_data),                   //   input,  width = 665,                .data
		.cp_startofpacket        (emif_s10_ddr4_a_ctrl_amm_0_cmd_width_adapter_src_startofpacket),          //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (emif_s10_ddr4_a_ctrl_amm_0_cmd_width_adapter_src_endofpacket),            //   input,    width = 1,                .endofpacket
		.cp_channel              (emif_s10_ddr4_a_ctrl_amm_0_cmd_width_adapter_src_channel),                //   input,    width = 4,                .channel
		.rf_sink_ready           (emif_s10_ddr4_a_ctrl_amm_0_agent_rsp_fifo_out_ready),                     //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (emif_s10_ddr4_a_ctrl_amm_0_agent_rsp_fifo_out_valid),                     //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (emif_s10_ddr4_a_ctrl_amm_0_agent_rsp_fifo_out_startofpacket),             //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (emif_s10_ddr4_a_ctrl_amm_0_agent_rsp_fifo_out_endofpacket),               //   input,    width = 1,                .endofpacket
		.rf_sink_data            (emif_s10_ddr4_a_ctrl_amm_0_agent_rsp_fifo_out_data),                      //   input,  width = 666,                .data
		.rf_source_ready         (emif_s10_ddr4_a_ctrl_amm_0_agent_rf_source_ready),                        //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (emif_s10_ddr4_a_ctrl_amm_0_agent_rf_source_valid),                        //  output,    width = 1,                .valid
		.rf_source_startofpacket (emif_s10_ddr4_a_ctrl_amm_0_agent_rf_source_startofpacket),                //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (emif_s10_ddr4_a_ctrl_amm_0_agent_rf_source_endofpacket),                  //  output,    width = 1,                .endofpacket
		.rf_source_data          (emif_s10_ddr4_a_ctrl_amm_0_agent_rf_source_data),                         //  output,  width = 666,                .data
		.rdata_fifo_sink_ready   (emif_s10_ddr4_a_ctrl_amm_0_agent_rdata_fifo_out_ready),                   //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (emif_s10_ddr4_a_ctrl_amm_0_agent_rdata_fifo_out_valid),                   //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (emif_s10_ddr4_a_ctrl_amm_0_agent_rdata_fifo_out_data),                    //   input,  width = 514,                .data
		.rdata_fifo_src_ready    (emif_s10_ddr4_a_ctrl_amm_0_agent_rdata_fifo_src_ready),                   //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (emif_s10_ddr4_a_ctrl_amm_0_agent_rdata_fifo_src_valid),                   //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (emif_s10_ddr4_a_ctrl_amm_0_agent_rdata_fifo_src_data),                    //  output,  width = 514,                .data
		.m0_response             (2'b00),                                                                   // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                    // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                     // (terminated),                               
	);

	DE10_Pro_QSYS_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (666),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) emif_s10_ddr4_a_ctrl_amm_0_agent_rsp_fifo (
		.clk               (emif_s10_ddr4_a_emif_usr_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset             (emif_s10_ddr4_a_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (emif_s10_ddr4_a_ctrl_amm_0_agent_rf_source_data),                         //   input,  width = 666,        in.data
		.in_valid          (emif_s10_ddr4_a_ctrl_amm_0_agent_rf_source_valid),                        //   input,    width = 1,          .valid
		.in_ready          (emif_s10_ddr4_a_ctrl_amm_0_agent_rf_source_ready),                        //  output,    width = 1,          .ready
		.in_startofpacket  (emif_s10_ddr4_a_ctrl_amm_0_agent_rf_source_startofpacket),                //   input,    width = 1,          .startofpacket
		.in_endofpacket    (emif_s10_ddr4_a_ctrl_amm_0_agent_rf_source_endofpacket),                  //   input,    width = 1,          .endofpacket
		.out_data          (emif_s10_ddr4_a_ctrl_amm_0_agent_rsp_fifo_out_data),                      //  output,  width = 666,       out.data
		.out_valid         (emif_s10_ddr4_a_ctrl_amm_0_agent_rsp_fifo_out_valid),                     //  output,    width = 1,          .valid
		.out_ready         (emif_s10_ddr4_a_ctrl_amm_0_agent_rsp_fifo_out_ready),                     //   input,    width = 1,          .ready
		.out_startofpacket (emif_s10_ddr4_a_ctrl_amm_0_agent_rsp_fifo_out_startofpacket),             //  output,    width = 1,          .startofpacket
		.out_endofpacket   (emif_s10_ddr4_a_ctrl_amm_0_agent_rsp_fifo_out_endofpacket),               //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                   // (terminated),                         
		.csr_read          (1'b0),                                                                    // (terminated),                         
		.csr_write         (1'b0),                                                                    // (terminated),                         
		.csr_readdata      (),                                                                        // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                    // (terminated),                         
		.almost_full_data  (),                                                                        // (terminated),                         
		.almost_empty_data (),                                                                        // (terminated),                         
		.in_empty          (1'b0),                                                                    // (terminated),                         
		.out_empty         (),                                                                        // (terminated),                         
		.in_error          (1'b0),                                                                    // (terminated),                         
		.out_error         (),                                                                        // (terminated),                         
		.in_channel        (1'b0),                                                                    // (terminated),                         
		.out_channel       ()                                                                         // (terminated),                         
	);

	DE10_Pro_QSYS_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (514),
		.FIFO_DEPTH          (128),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) emif_s10_ddr4_a_ctrl_amm_0_agent_rdata_fifo (
		.clk               (emif_s10_ddr4_a_emif_usr_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset             (emif_s10_ddr4_a_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (emif_s10_ddr4_a_ctrl_amm_0_agent_rdata_fifo_src_data),                    //   input,  width = 514,        in.data
		.in_valid          (emif_s10_ddr4_a_ctrl_amm_0_agent_rdata_fifo_src_valid),                   //   input,    width = 1,          .valid
		.in_ready          (emif_s10_ddr4_a_ctrl_amm_0_agent_rdata_fifo_src_ready),                   //  output,    width = 1,          .ready
		.out_data          (emif_s10_ddr4_a_ctrl_amm_0_agent_rdata_fifo_out_data),                    //  output,  width = 514,       out.data
		.out_valid         (emif_s10_ddr4_a_ctrl_amm_0_agent_rdata_fifo_out_valid),                   //  output,    width = 1,          .valid
		.out_ready         (emif_s10_ddr4_a_ctrl_amm_0_agent_rdata_fifo_out_ready),                   //   input,    width = 1,          .ready
		.csr_address       (2'b00),                                                                   // (terminated),                         
		.csr_read          (1'b0),                                                                    // (terminated),                         
		.csr_write         (1'b0),                                                                    // (terminated),                         
		.csr_readdata      (),                                                                        // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                    // (terminated),                         
		.almost_full_data  (),                                                                        // (terminated),                         
		.almost_empty_data (),                                                                        // (terminated),                         
		.in_startofpacket  (1'b0),                                                                    // (terminated),                         
		.in_endofpacket    (1'b0),                                                                    // (terminated),                         
		.out_startofpacket (),                                                                        // (terminated),                         
		.out_endofpacket   (),                                                                        // (terminated),                         
		.in_empty          (1'b0),                                                                    // (terminated),                         
		.out_empty         (),                                                                        // (terminated),                         
		.in_error          (1'b0),                                                                    // (terminated),                         
		.out_error         (),                                                                        // (terminated),                         
		.in_channel        (1'b0),                                                                    // (terminated),                         
		.out_channel       ()                                                                         // (terminated),                         
	);

	DE10_Pro_QSYS_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (655),
		.PKT_ORI_BURST_SIZE_L      (653),
		.PKT_RESPONSE_STATUS_H     (652),
		.PKT_RESPONSE_STATUS_L     (651),
		.PKT_BURST_SIZE_H          (632),
		.PKT_BURST_SIZE_L          (630),
		.PKT_TRANS_LOCK            (614),
		.PKT_BEGIN_BURST           (637),
		.PKT_PROTECTION_H          (646),
		.PKT_PROTECTION_L          (644),
		.PKT_BURSTWRAP_H           (629),
		.PKT_BURSTWRAP_L           (629),
		.PKT_BYTE_CNT_H            (628),
		.PKT_BYTE_CNT_L            (616),
		.PKT_ADDR_H                (609),
		.PKT_ADDR_L                (576),
		.PKT_TRANS_COMPRESSED_READ (610),
		.PKT_TRANS_POSTED          (611),
		.PKT_TRANS_WRITE           (612),
		.PKT_TRANS_READ            (613),
		.PKT_DATA_H                (511),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (575),
		.PKT_BYTEEN_L              (512),
		.PKT_SRC_ID_H              (640),
		.PKT_SRC_ID_L              (639),
		.PKT_DEST_ID_H             (642),
		.PKT_DEST_ID_L             (641),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (665),
		.AVS_BURSTCOUNT_W          (13),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) emif_s10_ddr4_b_ctrl_amm_0_agent (
		.clk                     (emif_s10_ddr4_b_emif_usr_clk_clk),                                        //   input,    width = 1,             clk.clk
		.reset                   (emif_s10_ddr4_b_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (emif_s10_ddr4_b_ctrl_amm_0_agent_m0_address),                             //  output,   width = 34,              m0.address
		.m0_burstcount           (emif_s10_ddr4_b_ctrl_amm_0_agent_m0_burstcount),                          //  output,   width = 13,                .burstcount
		.m0_byteenable           (emif_s10_ddr4_b_ctrl_amm_0_agent_m0_byteenable),                          //  output,   width = 64,                .byteenable
		.m0_debugaccess          (emif_s10_ddr4_b_ctrl_amm_0_agent_m0_debugaccess),                         //  output,    width = 1,                .debugaccess
		.m0_lock                 (emif_s10_ddr4_b_ctrl_amm_0_agent_m0_lock),                                //  output,    width = 1,                .lock
		.m0_readdata             (emif_s10_ddr4_b_ctrl_amm_0_agent_m0_readdata),                            //   input,  width = 512,                .readdata
		.m0_readdatavalid        (emif_s10_ddr4_b_ctrl_amm_0_agent_m0_readdatavalid),                       //   input,    width = 1,                .readdatavalid
		.m0_read                 (emif_s10_ddr4_b_ctrl_amm_0_agent_m0_read),                                //  output,    width = 1,                .read
		.m0_waitrequest          (emif_s10_ddr4_b_ctrl_amm_0_agent_m0_waitrequest),                         //   input,    width = 1,                .waitrequest
		.m0_writedata            (emif_s10_ddr4_b_ctrl_amm_0_agent_m0_writedata),                           //  output,  width = 512,                .writedata
		.m0_write                (emif_s10_ddr4_b_ctrl_amm_0_agent_m0_write),                               //  output,    width = 1,                .write
		.rp_endofpacket          (emif_s10_ddr4_b_ctrl_amm_0_agent_rp_endofpacket),                         //  output,    width = 1,              rp.endofpacket
		.rp_ready                (emif_s10_ddr4_b_ctrl_amm_0_agent_rp_ready),                               //   input,    width = 1,                .ready
		.rp_valid                (emif_s10_ddr4_b_ctrl_amm_0_agent_rp_valid),                               //  output,    width = 1,                .valid
		.rp_data                 (emif_s10_ddr4_b_ctrl_amm_0_agent_rp_data),                                //  output,  width = 665,                .data
		.rp_startofpacket        (emif_s10_ddr4_b_ctrl_amm_0_agent_rp_startofpacket),                       //  output,    width = 1,                .startofpacket
		.cp_ready                (emif_s10_ddr4_b_ctrl_amm_0_cmd_width_adapter_src_ready),                  //  output,    width = 1,              cp.ready
		.cp_valid                (emif_s10_ddr4_b_ctrl_amm_0_cmd_width_adapter_src_valid),                  //   input,    width = 1,                .valid
		.cp_data                 (emif_s10_ddr4_b_ctrl_amm_0_cmd_width_adapter_src_data),                   //   input,  width = 665,                .data
		.cp_startofpacket        (emif_s10_ddr4_b_ctrl_amm_0_cmd_width_adapter_src_startofpacket),          //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (emif_s10_ddr4_b_ctrl_amm_0_cmd_width_adapter_src_endofpacket),            //   input,    width = 1,                .endofpacket
		.cp_channel              (emif_s10_ddr4_b_ctrl_amm_0_cmd_width_adapter_src_channel),                //   input,    width = 4,                .channel
		.rf_sink_ready           (emif_s10_ddr4_b_ctrl_amm_0_agent_rsp_fifo_out_ready),                     //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (emif_s10_ddr4_b_ctrl_amm_0_agent_rsp_fifo_out_valid),                     //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (emif_s10_ddr4_b_ctrl_amm_0_agent_rsp_fifo_out_startofpacket),             //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (emif_s10_ddr4_b_ctrl_amm_0_agent_rsp_fifo_out_endofpacket),               //   input,    width = 1,                .endofpacket
		.rf_sink_data            (emif_s10_ddr4_b_ctrl_amm_0_agent_rsp_fifo_out_data),                      //   input,  width = 666,                .data
		.rf_source_ready         (emif_s10_ddr4_b_ctrl_amm_0_agent_rf_source_ready),                        //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (emif_s10_ddr4_b_ctrl_amm_0_agent_rf_source_valid),                        //  output,    width = 1,                .valid
		.rf_source_startofpacket (emif_s10_ddr4_b_ctrl_amm_0_agent_rf_source_startofpacket),                //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (emif_s10_ddr4_b_ctrl_amm_0_agent_rf_source_endofpacket),                  //  output,    width = 1,                .endofpacket
		.rf_source_data          (emif_s10_ddr4_b_ctrl_amm_0_agent_rf_source_data),                         //  output,  width = 666,                .data
		.rdata_fifo_sink_ready   (emif_s10_ddr4_b_ctrl_amm_0_agent_rdata_fifo_out_ready),                   //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (emif_s10_ddr4_b_ctrl_amm_0_agent_rdata_fifo_out_valid),                   //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (emif_s10_ddr4_b_ctrl_amm_0_agent_rdata_fifo_out_data),                    //   input,  width = 514,                .data
		.rdata_fifo_src_ready    (emif_s10_ddr4_b_ctrl_amm_0_agent_rdata_fifo_src_ready),                   //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (emif_s10_ddr4_b_ctrl_amm_0_agent_rdata_fifo_src_valid),                   //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (emif_s10_ddr4_b_ctrl_amm_0_agent_rdata_fifo_src_data),                    //  output,  width = 514,                .data
		.m0_response             (2'b00),                                                                   // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                    // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                     // (terminated),                               
	);

	DE10_Pro_QSYS_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (666),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) emif_s10_ddr4_b_ctrl_amm_0_agent_rsp_fifo (
		.clk               (emif_s10_ddr4_b_emif_usr_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset             (emif_s10_ddr4_b_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (emif_s10_ddr4_b_ctrl_amm_0_agent_rf_source_data),                         //   input,  width = 666,        in.data
		.in_valid          (emif_s10_ddr4_b_ctrl_amm_0_agent_rf_source_valid),                        //   input,    width = 1,          .valid
		.in_ready          (emif_s10_ddr4_b_ctrl_amm_0_agent_rf_source_ready),                        //  output,    width = 1,          .ready
		.in_startofpacket  (emif_s10_ddr4_b_ctrl_amm_0_agent_rf_source_startofpacket),                //   input,    width = 1,          .startofpacket
		.in_endofpacket    (emif_s10_ddr4_b_ctrl_amm_0_agent_rf_source_endofpacket),                  //   input,    width = 1,          .endofpacket
		.out_data          (emif_s10_ddr4_b_ctrl_amm_0_agent_rsp_fifo_out_data),                      //  output,  width = 666,       out.data
		.out_valid         (emif_s10_ddr4_b_ctrl_amm_0_agent_rsp_fifo_out_valid),                     //  output,    width = 1,          .valid
		.out_ready         (emif_s10_ddr4_b_ctrl_amm_0_agent_rsp_fifo_out_ready),                     //   input,    width = 1,          .ready
		.out_startofpacket (emif_s10_ddr4_b_ctrl_amm_0_agent_rsp_fifo_out_startofpacket),             //  output,    width = 1,          .startofpacket
		.out_endofpacket   (emif_s10_ddr4_b_ctrl_amm_0_agent_rsp_fifo_out_endofpacket),               //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                   // (terminated),                         
		.csr_read          (1'b0),                                                                    // (terminated),                         
		.csr_write         (1'b0),                                                                    // (terminated),                         
		.csr_readdata      (),                                                                        // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                    // (terminated),                         
		.almost_full_data  (),                                                                        // (terminated),                         
		.almost_empty_data (),                                                                        // (terminated),                         
		.in_empty          (1'b0),                                                                    // (terminated),                         
		.out_empty         (),                                                                        // (terminated),                         
		.in_error          (1'b0),                                                                    // (terminated),                         
		.out_error         (),                                                                        // (terminated),                         
		.in_channel        (1'b0),                                                                    // (terminated),                         
		.out_channel       ()                                                                         // (terminated),                         
	);

	DE10_Pro_QSYS_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (514),
		.FIFO_DEPTH          (128),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) emif_s10_ddr4_b_ctrl_amm_0_agent_rdata_fifo (
		.clk               (emif_s10_ddr4_b_emif_usr_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset             (emif_s10_ddr4_b_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (emif_s10_ddr4_b_ctrl_amm_0_agent_rdata_fifo_src_data),                    //   input,  width = 514,        in.data
		.in_valid          (emif_s10_ddr4_b_ctrl_amm_0_agent_rdata_fifo_src_valid),                   //   input,    width = 1,          .valid
		.in_ready          (emif_s10_ddr4_b_ctrl_amm_0_agent_rdata_fifo_src_ready),                   //  output,    width = 1,          .ready
		.out_data          (emif_s10_ddr4_b_ctrl_amm_0_agent_rdata_fifo_out_data),                    //  output,  width = 514,       out.data
		.out_valid         (emif_s10_ddr4_b_ctrl_amm_0_agent_rdata_fifo_out_valid),                   //  output,    width = 1,          .valid
		.out_ready         (emif_s10_ddr4_b_ctrl_amm_0_agent_rdata_fifo_out_ready),                   //   input,    width = 1,          .ready
		.csr_address       (2'b00),                                                                   // (terminated),                         
		.csr_read          (1'b0),                                                                    // (terminated),                         
		.csr_write         (1'b0),                                                                    // (terminated),                         
		.csr_readdata      (),                                                                        // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                    // (terminated),                         
		.almost_full_data  (),                                                                        // (terminated),                         
		.almost_empty_data (),                                                                        // (terminated),                         
		.in_startofpacket  (1'b0),                                                                    // (terminated),                         
		.in_endofpacket    (1'b0),                                                                    // (terminated),                         
		.out_startofpacket (),                                                                        // (terminated),                         
		.out_endofpacket   (),                                                                        // (terminated),                         
		.in_empty          (1'b0),                                                                    // (terminated),                         
		.out_empty         (),                                                                        // (terminated),                         
		.in_error          (1'b0),                                                                    // (terminated),                         
		.out_error         (),                                                                        // (terminated),                         
		.in_channel        (1'b0),                                                                    // (terminated),                         
		.out_channel       ()                                                                         // (terminated),                         
	);

	DE10_Pro_QSYS_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (655),
		.PKT_ORI_BURST_SIZE_L      (653),
		.PKT_RESPONSE_STATUS_H     (652),
		.PKT_RESPONSE_STATUS_L     (651),
		.PKT_BURST_SIZE_H          (632),
		.PKT_BURST_SIZE_L          (630),
		.PKT_TRANS_LOCK            (614),
		.PKT_BEGIN_BURST           (637),
		.PKT_PROTECTION_H          (646),
		.PKT_PROTECTION_L          (644),
		.PKT_BURSTWRAP_H           (629),
		.PKT_BURSTWRAP_L           (629),
		.PKT_BYTE_CNT_H            (628),
		.PKT_BYTE_CNT_L            (616),
		.PKT_ADDR_H                (609),
		.PKT_ADDR_L                (576),
		.PKT_TRANS_COMPRESSED_READ (610),
		.PKT_TRANS_POSTED          (611),
		.PKT_TRANS_WRITE           (612),
		.PKT_TRANS_READ            (613),
		.PKT_DATA_H                (511),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (575),
		.PKT_BYTEEN_L              (512),
		.PKT_SRC_ID_H              (640),
		.PKT_SRC_ID_L              (639),
		.PKT_DEST_ID_H             (642),
		.PKT_DEST_ID_L             (641),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (665),
		.AVS_BURSTCOUNT_W          (13),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) emif_s10_ddr4_c_ctrl_amm_0_agent (
		.clk                     (emif_s10_ddr4_c_emif_usr_clk_clk),                                        //   input,    width = 1,             clk.clk
		.reset                   (emif_s10_ddr4_c_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (emif_s10_ddr4_c_ctrl_amm_0_agent_m0_address),                             //  output,   width = 34,              m0.address
		.m0_burstcount           (emif_s10_ddr4_c_ctrl_amm_0_agent_m0_burstcount),                          //  output,   width = 13,                .burstcount
		.m0_byteenable           (emif_s10_ddr4_c_ctrl_amm_0_agent_m0_byteenable),                          //  output,   width = 64,                .byteenable
		.m0_debugaccess          (emif_s10_ddr4_c_ctrl_amm_0_agent_m0_debugaccess),                         //  output,    width = 1,                .debugaccess
		.m0_lock                 (emif_s10_ddr4_c_ctrl_amm_0_agent_m0_lock),                                //  output,    width = 1,                .lock
		.m0_readdata             (emif_s10_ddr4_c_ctrl_amm_0_agent_m0_readdata),                            //   input,  width = 512,                .readdata
		.m0_readdatavalid        (emif_s10_ddr4_c_ctrl_amm_0_agent_m0_readdatavalid),                       //   input,    width = 1,                .readdatavalid
		.m0_read                 (emif_s10_ddr4_c_ctrl_amm_0_agent_m0_read),                                //  output,    width = 1,                .read
		.m0_waitrequest          (emif_s10_ddr4_c_ctrl_amm_0_agent_m0_waitrequest),                         //   input,    width = 1,                .waitrequest
		.m0_writedata            (emif_s10_ddr4_c_ctrl_amm_0_agent_m0_writedata),                           //  output,  width = 512,                .writedata
		.m0_write                (emif_s10_ddr4_c_ctrl_amm_0_agent_m0_write),                               //  output,    width = 1,                .write
		.rp_endofpacket          (emif_s10_ddr4_c_ctrl_amm_0_agent_rp_endofpacket),                         //  output,    width = 1,              rp.endofpacket
		.rp_ready                (emif_s10_ddr4_c_ctrl_amm_0_agent_rp_ready),                               //   input,    width = 1,                .ready
		.rp_valid                (emif_s10_ddr4_c_ctrl_amm_0_agent_rp_valid),                               //  output,    width = 1,                .valid
		.rp_data                 (emif_s10_ddr4_c_ctrl_amm_0_agent_rp_data),                                //  output,  width = 665,                .data
		.rp_startofpacket        (emif_s10_ddr4_c_ctrl_amm_0_agent_rp_startofpacket),                       //  output,    width = 1,                .startofpacket
		.cp_ready                (emif_s10_ddr4_c_ctrl_amm_0_cmd_width_adapter_src_ready),                  //  output,    width = 1,              cp.ready
		.cp_valid                (emif_s10_ddr4_c_ctrl_amm_0_cmd_width_adapter_src_valid),                  //   input,    width = 1,                .valid
		.cp_data                 (emif_s10_ddr4_c_ctrl_amm_0_cmd_width_adapter_src_data),                   //   input,  width = 665,                .data
		.cp_startofpacket        (emif_s10_ddr4_c_ctrl_amm_0_cmd_width_adapter_src_startofpacket),          //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (emif_s10_ddr4_c_ctrl_amm_0_cmd_width_adapter_src_endofpacket),            //   input,    width = 1,                .endofpacket
		.cp_channel              (emif_s10_ddr4_c_ctrl_amm_0_cmd_width_adapter_src_channel),                //   input,    width = 4,                .channel
		.rf_sink_ready           (emif_s10_ddr4_c_ctrl_amm_0_agent_rsp_fifo_out_ready),                     //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (emif_s10_ddr4_c_ctrl_amm_0_agent_rsp_fifo_out_valid),                     //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (emif_s10_ddr4_c_ctrl_amm_0_agent_rsp_fifo_out_startofpacket),             //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (emif_s10_ddr4_c_ctrl_amm_0_agent_rsp_fifo_out_endofpacket),               //   input,    width = 1,                .endofpacket
		.rf_sink_data            (emif_s10_ddr4_c_ctrl_amm_0_agent_rsp_fifo_out_data),                      //   input,  width = 666,                .data
		.rf_source_ready         (emif_s10_ddr4_c_ctrl_amm_0_agent_rf_source_ready),                        //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (emif_s10_ddr4_c_ctrl_amm_0_agent_rf_source_valid),                        //  output,    width = 1,                .valid
		.rf_source_startofpacket (emif_s10_ddr4_c_ctrl_amm_0_agent_rf_source_startofpacket),                //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (emif_s10_ddr4_c_ctrl_amm_0_agent_rf_source_endofpacket),                  //  output,    width = 1,                .endofpacket
		.rf_source_data          (emif_s10_ddr4_c_ctrl_amm_0_agent_rf_source_data),                         //  output,  width = 666,                .data
		.rdata_fifo_sink_ready   (emif_s10_ddr4_c_ctrl_amm_0_agent_rdata_fifo_out_ready),                   //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (emif_s10_ddr4_c_ctrl_amm_0_agent_rdata_fifo_out_valid),                   //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (emif_s10_ddr4_c_ctrl_amm_0_agent_rdata_fifo_out_data),                    //   input,  width = 514,                .data
		.rdata_fifo_src_ready    (emif_s10_ddr4_c_ctrl_amm_0_agent_rdata_fifo_src_ready),                   //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (emif_s10_ddr4_c_ctrl_amm_0_agent_rdata_fifo_src_valid),                   //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (emif_s10_ddr4_c_ctrl_amm_0_agent_rdata_fifo_src_data),                    //  output,  width = 514,                .data
		.m0_response             (2'b00),                                                                   // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                    // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                     // (terminated),                               
	);

	DE10_Pro_QSYS_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (666),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) emif_s10_ddr4_c_ctrl_amm_0_agent_rsp_fifo (
		.clk               (emif_s10_ddr4_c_emif_usr_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset             (emif_s10_ddr4_c_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (emif_s10_ddr4_c_ctrl_amm_0_agent_rf_source_data),                         //   input,  width = 666,        in.data
		.in_valid          (emif_s10_ddr4_c_ctrl_amm_0_agent_rf_source_valid),                        //   input,    width = 1,          .valid
		.in_ready          (emif_s10_ddr4_c_ctrl_amm_0_agent_rf_source_ready),                        //  output,    width = 1,          .ready
		.in_startofpacket  (emif_s10_ddr4_c_ctrl_amm_0_agent_rf_source_startofpacket),                //   input,    width = 1,          .startofpacket
		.in_endofpacket    (emif_s10_ddr4_c_ctrl_amm_0_agent_rf_source_endofpacket),                  //   input,    width = 1,          .endofpacket
		.out_data          (emif_s10_ddr4_c_ctrl_amm_0_agent_rsp_fifo_out_data),                      //  output,  width = 666,       out.data
		.out_valid         (emif_s10_ddr4_c_ctrl_amm_0_agent_rsp_fifo_out_valid),                     //  output,    width = 1,          .valid
		.out_ready         (emif_s10_ddr4_c_ctrl_amm_0_agent_rsp_fifo_out_ready),                     //   input,    width = 1,          .ready
		.out_startofpacket (emif_s10_ddr4_c_ctrl_amm_0_agent_rsp_fifo_out_startofpacket),             //  output,    width = 1,          .startofpacket
		.out_endofpacket   (emif_s10_ddr4_c_ctrl_amm_0_agent_rsp_fifo_out_endofpacket),               //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                   // (terminated),                         
		.csr_read          (1'b0),                                                                    // (terminated),                         
		.csr_write         (1'b0),                                                                    // (terminated),                         
		.csr_readdata      (),                                                                        // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                    // (terminated),                         
		.almost_full_data  (),                                                                        // (terminated),                         
		.almost_empty_data (),                                                                        // (terminated),                         
		.in_empty          (1'b0),                                                                    // (terminated),                         
		.out_empty         (),                                                                        // (terminated),                         
		.in_error          (1'b0),                                                                    // (terminated),                         
		.out_error         (),                                                                        // (terminated),                         
		.in_channel        (1'b0),                                                                    // (terminated),                         
		.out_channel       ()                                                                         // (terminated),                         
	);

	DE10_Pro_QSYS_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (514),
		.FIFO_DEPTH          (128),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) emif_s10_ddr4_c_ctrl_amm_0_agent_rdata_fifo (
		.clk               (emif_s10_ddr4_c_emif_usr_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset             (emif_s10_ddr4_c_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (emif_s10_ddr4_c_ctrl_amm_0_agent_rdata_fifo_src_data),                    //   input,  width = 514,        in.data
		.in_valid          (emif_s10_ddr4_c_ctrl_amm_0_agent_rdata_fifo_src_valid),                   //   input,    width = 1,          .valid
		.in_ready          (emif_s10_ddr4_c_ctrl_amm_0_agent_rdata_fifo_src_ready),                   //  output,    width = 1,          .ready
		.out_data          (emif_s10_ddr4_c_ctrl_amm_0_agent_rdata_fifo_out_data),                    //  output,  width = 514,       out.data
		.out_valid         (emif_s10_ddr4_c_ctrl_amm_0_agent_rdata_fifo_out_valid),                   //  output,    width = 1,          .valid
		.out_ready         (emif_s10_ddr4_c_ctrl_amm_0_agent_rdata_fifo_out_ready),                   //   input,    width = 1,          .ready
		.csr_address       (2'b00),                                                                   // (terminated),                         
		.csr_read          (1'b0),                                                                    // (terminated),                         
		.csr_write         (1'b0),                                                                    // (terminated),                         
		.csr_readdata      (),                                                                        // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                    // (terminated),                         
		.almost_full_data  (),                                                                        // (terminated),                         
		.almost_empty_data (),                                                                        // (terminated),                         
		.in_startofpacket  (1'b0),                                                                    // (terminated),                         
		.in_endofpacket    (1'b0),                                                                    // (terminated),                         
		.out_startofpacket (),                                                                        // (terminated),                         
		.out_endofpacket   (),                                                                        // (terminated),                         
		.in_empty          (1'b0),                                                                    // (terminated),                         
		.out_empty         (),                                                                        // (terminated),                         
		.in_error          (1'b0),                                                                    // (terminated),                         
		.out_error         (),                                                                        // (terminated),                         
		.in_channel        (1'b0),                                                                    // (terminated),                         
		.out_channel       ()                                                                         // (terminated),                         
	);

	DE10_Pro_QSYS_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (655),
		.PKT_ORI_BURST_SIZE_L      (653),
		.PKT_RESPONSE_STATUS_H     (652),
		.PKT_RESPONSE_STATUS_L     (651),
		.PKT_BURST_SIZE_H          (632),
		.PKT_BURST_SIZE_L          (630),
		.PKT_TRANS_LOCK            (614),
		.PKT_BEGIN_BURST           (637),
		.PKT_PROTECTION_H          (646),
		.PKT_PROTECTION_L          (644),
		.PKT_BURSTWRAP_H           (629),
		.PKT_BURSTWRAP_L           (629),
		.PKT_BYTE_CNT_H            (628),
		.PKT_BYTE_CNT_L            (616),
		.PKT_ADDR_H                (609),
		.PKT_ADDR_L                (576),
		.PKT_TRANS_COMPRESSED_READ (610),
		.PKT_TRANS_POSTED          (611),
		.PKT_TRANS_WRITE           (612),
		.PKT_TRANS_READ            (613),
		.PKT_DATA_H                (511),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (575),
		.PKT_BYTEEN_L              (512),
		.PKT_SRC_ID_H              (640),
		.PKT_SRC_ID_L              (639),
		.PKT_DEST_ID_H             (642),
		.PKT_DEST_ID_L             (641),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (665),
		.AVS_BURSTCOUNT_W          (13),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) emif_s10_ddr4_d_ctrl_amm_0_agent (
		.clk                     (emif_s10_ddr4_d_emif_usr_clk_clk),                                        //   input,    width = 1,             clk.clk
		.reset                   (emif_s10_ddr4_d_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (emif_s10_ddr4_d_ctrl_amm_0_agent_m0_address),                             //  output,   width = 34,              m0.address
		.m0_burstcount           (emif_s10_ddr4_d_ctrl_amm_0_agent_m0_burstcount),                          //  output,   width = 13,                .burstcount
		.m0_byteenable           (emif_s10_ddr4_d_ctrl_amm_0_agent_m0_byteenable),                          //  output,   width = 64,                .byteenable
		.m0_debugaccess          (emif_s10_ddr4_d_ctrl_amm_0_agent_m0_debugaccess),                         //  output,    width = 1,                .debugaccess
		.m0_lock                 (emif_s10_ddr4_d_ctrl_amm_0_agent_m0_lock),                                //  output,    width = 1,                .lock
		.m0_readdata             (emif_s10_ddr4_d_ctrl_amm_0_agent_m0_readdata),                            //   input,  width = 512,                .readdata
		.m0_readdatavalid        (emif_s10_ddr4_d_ctrl_amm_0_agent_m0_readdatavalid),                       //   input,    width = 1,                .readdatavalid
		.m0_read                 (emif_s10_ddr4_d_ctrl_amm_0_agent_m0_read),                                //  output,    width = 1,                .read
		.m0_waitrequest          (emif_s10_ddr4_d_ctrl_amm_0_agent_m0_waitrequest),                         //   input,    width = 1,                .waitrequest
		.m0_writedata            (emif_s10_ddr4_d_ctrl_amm_0_agent_m0_writedata),                           //  output,  width = 512,                .writedata
		.m0_write                (emif_s10_ddr4_d_ctrl_amm_0_agent_m0_write),                               //  output,    width = 1,                .write
		.rp_endofpacket          (emif_s10_ddr4_d_ctrl_amm_0_agent_rp_endofpacket),                         //  output,    width = 1,              rp.endofpacket
		.rp_ready                (emif_s10_ddr4_d_ctrl_amm_0_agent_rp_ready),                               //   input,    width = 1,                .ready
		.rp_valid                (emif_s10_ddr4_d_ctrl_amm_0_agent_rp_valid),                               //  output,    width = 1,                .valid
		.rp_data                 (emif_s10_ddr4_d_ctrl_amm_0_agent_rp_data),                                //  output,  width = 665,                .data
		.rp_startofpacket        (emif_s10_ddr4_d_ctrl_amm_0_agent_rp_startofpacket),                       //  output,    width = 1,                .startofpacket
		.cp_ready                (emif_s10_ddr4_d_ctrl_amm_0_cmd_width_adapter_src_ready),                  //  output,    width = 1,              cp.ready
		.cp_valid                (emif_s10_ddr4_d_ctrl_amm_0_cmd_width_adapter_src_valid),                  //   input,    width = 1,                .valid
		.cp_data                 (emif_s10_ddr4_d_ctrl_amm_0_cmd_width_adapter_src_data),                   //   input,  width = 665,                .data
		.cp_startofpacket        (emif_s10_ddr4_d_ctrl_amm_0_cmd_width_adapter_src_startofpacket),          //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (emif_s10_ddr4_d_ctrl_amm_0_cmd_width_adapter_src_endofpacket),            //   input,    width = 1,                .endofpacket
		.cp_channel              (emif_s10_ddr4_d_ctrl_amm_0_cmd_width_adapter_src_channel),                //   input,    width = 4,                .channel
		.rf_sink_ready           (emif_s10_ddr4_d_ctrl_amm_0_agent_rsp_fifo_out_ready),                     //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (emif_s10_ddr4_d_ctrl_amm_0_agent_rsp_fifo_out_valid),                     //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (emif_s10_ddr4_d_ctrl_amm_0_agent_rsp_fifo_out_startofpacket),             //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (emif_s10_ddr4_d_ctrl_amm_0_agent_rsp_fifo_out_endofpacket),               //   input,    width = 1,                .endofpacket
		.rf_sink_data            (emif_s10_ddr4_d_ctrl_amm_0_agent_rsp_fifo_out_data),                      //   input,  width = 666,                .data
		.rf_source_ready         (emif_s10_ddr4_d_ctrl_amm_0_agent_rf_source_ready),                        //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (emif_s10_ddr4_d_ctrl_amm_0_agent_rf_source_valid),                        //  output,    width = 1,                .valid
		.rf_source_startofpacket (emif_s10_ddr4_d_ctrl_amm_0_agent_rf_source_startofpacket),                //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (emif_s10_ddr4_d_ctrl_amm_0_agent_rf_source_endofpacket),                  //  output,    width = 1,                .endofpacket
		.rf_source_data          (emif_s10_ddr4_d_ctrl_amm_0_agent_rf_source_data),                         //  output,  width = 666,                .data
		.rdata_fifo_sink_ready   (emif_s10_ddr4_d_ctrl_amm_0_agent_rdata_fifo_out_ready),                   //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (emif_s10_ddr4_d_ctrl_amm_0_agent_rdata_fifo_out_valid),                   //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (emif_s10_ddr4_d_ctrl_amm_0_agent_rdata_fifo_out_data),                    //   input,  width = 514,                .data
		.rdata_fifo_src_ready    (emif_s10_ddr4_d_ctrl_amm_0_agent_rdata_fifo_src_ready),                   //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (emif_s10_ddr4_d_ctrl_amm_0_agent_rdata_fifo_src_valid),                   //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (emif_s10_ddr4_d_ctrl_amm_0_agent_rdata_fifo_src_data),                    //  output,  width = 514,                .data
		.m0_response             (2'b00),                                                                   // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                    // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                     // (terminated),                               
	);

	DE10_Pro_QSYS_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (666),
		.FIFO_DEPTH          (65),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) emif_s10_ddr4_d_ctrl_amm_0_agent_rsp_fifo (
		.clk               (emif_s10_ddr4_d_emif_usr_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset             (emif_s10_ddr4_d_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (emif_s10_ddr4_d_ctrl_amm_0_agent_rf_source_data),                         //   input,  width = 666,        in.data
		.in_valid          (emif_s10_ddr4_d_ctrl_amm_0_agent_rf_source_valid),                        //   input,    width = 1,          .valid
		.in_ready          (emif_s10_ddr4_d_ctrl_amm_0_agent_rf_source_ready),                        //  output,    width = 1,          .ready
		.in_startofpacket  (emif_s10_ddr4_d_ctrl_amm_0_agent_rf_source_startofpacket),                //   input,    width = 1,          .startofpacket
		.in_endofpacket    (emif_s10_ddr4_d_ctrl_amm_0_agent_rf_source_endofpacket),                  //   input,    width = 1,          .endofpacket
		.out_data          (emif_s10_ddr4_d_ctrl_amm_0_agent_rsp_fifo_out_data),                      //  output,  width = 666,       out.data
		.out_valid         (emif_s10_ddr4_d_ctrl_amm_0_agent_rsp_fifo_out_valid),                     //  output,    width = 1,          .valid
		.out_ready         (emif_s10_ddr4_d_ctrl_amm_0_agent_rsp_fifo_out_ready),                     //   input,    width = 1,          .ready
		.out_startofpacket (emif_s10_ddr4_d_ctrl_amm_0_agent_rsp_fifo_out_startofpacket),             //  output,    width = 1,          .startofpacket
		.out_endofpacket   (emif_s10_ddr4_d_ctrl_amm_0_agent_rsp_fifo_out_endofpacket),               //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                   // (terminated),                         
		.csr_read          (1'b0),                                                                    // (terminated),                         
		.csr_write         (1'b0),                                                                    // (terminated),                         
		.csr_readdata      (),                                                                        // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                    // (terminated),                         
		.almost_full_data  (),                                                                        // (terminated),                         
		.almost_empty_data (),                                                                        // (terminated),                         
		.in_empty          (1'b0),                                                                    // (terminated),                         
		.out_empty         (),                                                                        // (terminated),                         
		.in_error          (1'b0),                                                                    // (terminated),                         
		.out_error         (),                                                                        // (terminated),                         
		.in_channel        (1'b0),                                                                    // (terminated),                         
		.out_channel       ()                                                                         // (terminated),                         
	);

	DE10_Pro_QSYS_altera_avalon_sc_fifo_191_e5eqkcq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (514),
		.FIFO_DEPTH          (128),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) emif_s10_ddr4_d_ctrl_amm_0_agent_rdata_fifo (
		.clk               (emif_s10_ddr4_d_emif_usr_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset             (emif_s10_ddr4_d_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (emif_s10_ddr4_d_ctrl_amm_0_agent_rdata_fifo_src_data),                    //   input,  width = 514,        in.data
		.in_valid          (emif_s10_ddr4_d_ctrl_amm_0_agent_rdata_fifo_src_valid),                   //   input,    width = 1,          .valid
		.in_ready          (emif_s10_ddr4_d_ctrl_amm_0_agent_rdata_fifo_src_ready),                   //  output,    width = 1,          .ready
		.out_data          (emif_s10_ddr4_d_ctrl_amm_0_agent_rdata_fifo_out_data),                    //  output,  width = 514,       out.data
		.out_valid         (emif_s10_ddr4_d_ctrl_amm_0_agent_rdata_fifo_out_valid),                   //  output,    width = 1,          .valid
		.out_ready         (emif_s10_ddr4_d_ctrl_amm_0_agent_rdata_fifo_out_ready),                   //   input,    width = 1,          .ready
		.csr_address       (2'b00),                                                                   // (terminated),                         
		.csr_read          (1'b0),                                                                    // (terminated),                         
		.csr_write         (1'b0),                                                                    // (terminated),                         
		.csr_readdata      (),                                                                        // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                    // (terminated),                         
		.almost_full_data  (),                                                                        // (terminated),                         
		.almost_empty_data (),                                                                        // (terminated),                         
		.in_startofpacket  (1'b0),                                                                    // (terminated),                         
		.in_endofpacket    (1'b0),                                                                    // (terminated),                         
		.out_startofpacket (),                                                                        // (terminated),                         
		.out_endofpacket   (),                                                                        // (terminated),                         
		.in_empty          (1'b0),                                                                    // (terminated),                         
		.out_empty         (),                                                                        // (terminated),                         
		.in_error          (1'b0),                                                                    // (terminated),                         
		.out_error         (),                                                                        // (terminated),                         
		.in_channel        (1'b0),                                                                    // (terminated),                         
		.out_channel       ()                                                                         // (terminated),                         
	);

	DE10_Pro_QSYS_altera_merlin_router_191_re6rjhy router (
		.sink_ready         (address_span_extender_ddr4_expanded_master_agent_cp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (address_span_extender_ddr4_expanded_master_agent_cp_valid),         //   input,    width = 1,          .valid
		.sink_data          (address_span_extender_ddr4_expanded_master_agent_cp_data),          //   input,  width = 125,          .data
		.sink_startofpacket (address_span_extender_ddr4_expanded_master_agent_cp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (address_span_extender_ddr4_expanded_master_agent_cp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (iopll_0_outclk1_clk),                                               //   input,    width = 1,       clk.clk
		.reset              (address_span_extender_ddr4_reset_reset_bridge_in_reset_reset),      //   input,    width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                                                  //   input,    width = 1,       src.ready
		.src_valid          (router_src_valid),                                                  //  output,    width = 1,          .valid
		.src_data           (router_src_data),                                                   //  output,  width = 125,          .data
		.src_channel        (router_src_channel),                                                //  output,    width = 4,          .channel
		.src_startofpacket  (router_src_startofpacket),                                          //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                             //  output,    width = 1,          .endofpacket
	);

	DE10_Pro_QSYS_altera_merlin_router_191_i4fv65i router_001 (
		.sink_ready         (emif_s10_ddr4_a_ctrl_amm_0_agent_rp_ready),                               //  output,    width = 1,      sink.ready
		.sink_valid         (emif_s10_ddr4_a_ctrl_amm_0_agent_rp_valid),                               //   input,    width = 1,          .valid
		.sink_data          (emif_s10_ddr4_a_ctrl_amm_0_agent_rp_data),                                //   input,  width = 665,          .data
		.sink_startofpacket (emif_s10_ddr4_a_ctrl_amm_0_agent_rp_startofpacket),                       //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (emif_s10_ddr4_a_ctrl_amm_0_agent_rp_endofpacket),                         //   input,    width = 1,          .endofpacket
		.clk                (emif_s10_ddr4_a_emif_usr_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset              (emif_s10_ddr4_a_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                                                    //   input,    width = 1,       src.ready
		.src_valid          (router_001_src_valid),                                                    //  output,    width = 1,          .valid
		.src_data           (router_001_src_data),                                                     //  output,  width = 665,          .data
		.src_channel        (router_001_src_channel),                                                  //  output,    width = 4,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                            //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                               //  output,    width = 1,          .endofpacket
	);

	DE10_Pro_QSYS_altera_merlin_router_191_i4fv65i router_002 (
		.sink_ready         (emif_s10_ddr4_b_ctrl_amm_0_agent_rp_ready),                               //  output,    width = 1,      sink.ready
		.sink_valid         (emif_s10_ddr4_b_ctrl_amm_0_agent_rp_valid),                               //   input,    width = 1,          .valid
		.sink_data          (emif_s10_ddr4_b_ctrl_amm_0_agent_rp_data),                                //   input,  width = 665,          .data
		.sink_startofpacket (emif_s10_ddr4_b_ctrl_amm_0_agent_rp_startofpacket),                       //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (emif_s10_ddr4_b_ctrl_amm_0_agent_rp_endofpacket),                         //   input,    width = 1,          .endofpacket
		.clk                (emif_s10_ddr4_b_emif_usr_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset              (emif_s10_ddr4_b_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_002_src_ready),                                                    //   input,    width = 1,       src.ready
		.src_valid          (router_002_src_valid),                                                    //  output,    width = 1,          .valid
		.src_data           (router_002_src_data),                                                     //  output,  width = 665,          .data
		.src_channel        (router_002_src_channel),                                                  //  output,    width = 4,          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                            //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                               //  output,    width = 1,          .endofpacket
	);

	DE10_Pro_QSYS_altera_merlin_router_191_i4fv65i router_003 (
		.sink_ready         (emif_s10_ddr4_c_ctrl_amm_0_agent_rp_ready),                               //  output,    width = 1,      sink.ready
		.sink_valid         (emif_s10_ddr4_c_ctrl_amm_0_agent_rp_valid),                               //   input,    width = 1,          .valid
		.sink_data          (emif_s10_ddr4_c_ctrl_amm_0_agent_rp_data),                                //   input,  width = 665,          .data
		.sink_startofpacket (emif_s10_ddr4_c_ctrl_amm_0_agent_rp_startofpacket),                       //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (emif_s10_ddr4_c_ctrl_amm_0_agent_rp_endofpacket),                         //   input,    width = 1,          .endofpacket
		.clk                (emif_s10_ddr4_c_emif_usr_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset              (emif_s10_ddr4_c_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_003_src_ready),                                                    //   input,    width = 1,       src.ready
		.src_valid          (router_003_src_valid),                                                    //  output,    width = 1,          .valid
		.src_data           (router_003_src_data),                                                     //  output,  width = 665,          .data
		.src_channel        (router_003_src_channel),                                                  //  output,    width = 4,          .channel
		.src_startofpacket  (router_003_src_startofpacket),                                            //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                               //  output,    width = 1,          .endofpacket
	);

	DE10_Pro_QSYS_altera_merlin_router_191_i4fv65i router_004 (
		.sink_ready         (emif_s10_ddr4_d_ctrl_amm_0_agent_rp_ready),                               //  output,    width = 1,      sink.ready
		.sink_valid         (emif_s10_ddr4_d_ctrl_amm_0_agent_rp_valid),                               //   input,    width = 1,          .valid
		.sink_data          (emif_s10_ddr4_d_ctrl_amm_0_agent_rp_data),                                //   input,  width = 665,          .data
		.sink_startofpacket (emif_s10_ddr4_d_ctrl_amm_0_agent_rp_startofpacket),                       //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (emif_s10_ddr4_d_ctrl_amm_0_agent_rp_endofpacket),                         //   input,    width = 1,          .endofpacket
		.clk                (emif_s10_ddr4_d_emif_usr_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset              (emif_s10_ddr4_d_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_004_src_ready),                                                    //   input,    width = 1,       src.ready
		.src_valid          (router_004_src_valid),                                                    //  output,    width = 1,          .valid
		.src_data           (router_004_src_data),                                                     //  output,  width = 665,          .data
		.src_channel        (router_004_src_channel),                                                  //  output,    width = 4,          .channel
		.src_startofpacket  (router_004_src_startofpacket),                                            //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                                               //  output,    width = 1,          .endofpacket
	);

	DE10_Pro_QSYS_altera_merlin_traffic_limiter_191_kcba44q #(
		.SYNC_RESET                (0),
		.PKT_DEST_ID_H             (102),
		.PKT_DEST_ID_L             (101),
		.PKT_SRC_ID_H              (100),
		.PKT_SRC_ID_L              (99),
		.PKT_BYTE_CNT_H            (88),
		.PKT_BYTE_CNT_L            (76),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (71),
		.PKT_TRANS_WRITE           (72),
		.MAX_OUTSTANDING_RESPONSES (69),
		.PIPELINED                 (0),
		.ST_DATA_W                 (125),
		.ST_CHANNEL_W              (4),
		.VALID_WIDTH               (4),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) address_span_extender_ddr4_expanded_master_limiter (
		.clk                    (iopll_0_outclk1_clk),                                                      //   input,    width = 1,       clk.clk
		.reset                  (address_span_extender_ddr4_reset_reset_bridge_in_reset_reset),             //   input,    width = 1, clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                                         //  output,    width = 1,  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                                         //   input,    width = 1,          .valid
		.cmd_sink_data          (router_src_data),                                                          //   input,  width = 125,          .data
		.cmd_sink_channel       (router_src_channel),                                                       //   input,    width = 4,          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                                 //   input,    width = 1,          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                                   //   input,    width = 1,          .endofpacket
		.cmd_src_ready          (address_span_extender_ddr4_expanded_master_limiter_cmd_src_ready),         //   input,    width = 1,   cmd_src.ready
		.cmd_src_data           (address_span_extender_ddr4_expanded_master_limiter_cmd_src_data),          //  output,  width = 125,          .data
		.cmd_src_channel        (address_span_extender_ddr4_expanded_master_limiter_cmd_src_channel),       //  output,    width = 4,          .channel
		.cmd_src_startofpacket  (address_span_extender_ddr4_expanded_master_limiter_cmd_src_startofpacket), //  output,    width = 1,          .startofpacket
		.cmd_src_endofpacket    (address_span_extender_ddr4_expanded_master_limiter_cmd_src_endofpacket),   //  output,    width = 1,          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                                        //  output,    width = 1,  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                                        //   input,    width = 1,          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                                      //   input,    width = 4,          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                                         //   input,  width = 125,          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                                //   input,    width = 1,          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                                  //   input,    width = 1,          .endofpacket
		.rsp_src_ready          (address_span_extender_ddr4_expanded_master_limiter_rsp_src_ready),         //   input,    width = 1,   rsp_src.ready
		.rsp_src_valid          (address_span_extender_ddr4_expanded_master_limiter_rsp_src_valid),         //  output,    width = 1,          .valid
		.rsp_src_data           (address_span_extender_ddr4_expanded_master_limiter_rsp_src_data),          //  output,  width = 125,          .data
		.rsp_src_channel        (address_span_extender_ddr4_expanded_master_limiter_rsp_src_channel),       //  output,    width = 4,          .channel
		.rsp_src_startofpacket  (address_span_extender_ddr4_expanded_master_limiter_rsp_src_startofpacket), //  output,    width = 1,          .startofpacket
		.rsp_src_endofpacket    (address_span_extender_ddr4_expanded_master_limiter_rsp_src_endofpacket),   //  output,    width = 1,          .endofpacket
		.cmd_src_valid          (address_span_extender_ddr4_expanded_master_limiter_cmd_valid_data)         //  output,    width = 4, cmd_valid.data
	);

	DE10_Pro_QSYS_altera_merlin_demultiplexer_191_tbopnxq cmd_demux (
		.clk                (iopll_0_outclk1_clk),                                                      //   input,    width = 1,        clk.clk
		.reset              (address_span_extender_ddr4_reset_reset_bridge_in_reset_reset),             //   input,    width = 1,  clk_reset.reset
		.sink_ready         (address_span_extender_ddr4_expanded_master_limiter_cmd_src_ready),         //  output,    width = 1,       sink.ready
		.sink_channel       (address_span_extender_ddr4_expanded_master_limiter_cmd_src_channel),       //   input,    width = 4,           .channel
		.sink_data          (address_span_extender_ddr4_expanded_master_limiter_cmd_src_data),          //   input,  width = 125,           .data
		.sink_startofpacket (address_span_extender_ddr4_expanded_master_limiter_cmd_src_startofpacket), //   input,    width = 1,           .startofpacket
		.sink_endofpacket   (address_span_extender_ddr4_expanded_master_limiter_cmd_src_endofpacket),   //   input,    width = 1,           .endofpacket
		.sink_valid         (address_span_extender_ddr4_expanded_master_limiter_cmd_valid_data),        //   input,    width = 4, sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                                     //   input,    width = 1,       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                                     //  output,    width = 1,           .valid
		.src0_data          (cmd_demux_src0_data),                                                      //  output,  width = 125,           .data
		.src0_channel       (cmd_demux_src0_channel),                                                   //  output,    width = 4,           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                             //  output,    width = 1,           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                                               //  output,    width = 1,           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                                     //   input,    width = 1,       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                                     //  output,    width = 1,           .valid
		.src1_data          (cmd_demux_src1_data),                                                      //  output,  width = 125,           .data
		.src1_channel       (cmd_demux_src1_channel),                                                   //  output,    width = 4,           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                                             //  output,    width = 1,           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                                               //  output,    width = 1,           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                                                     //   input,    width = 1,       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                                                     //  output,    width = 1,           .valid
		.src2_data          (cmd_demux_src2_data),                                                      //  output,  width = 125,           .data
		.src2_channel       (cmd_demux_src2_channel),                                                   //  output,    width = 4,           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                                             //  output,    width = 1,           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                                               //  output,    width = 1,           .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                                                     //   input,    width = 1,       src3.ready
		.src3_valid         (cmd_demux_src3_valid),                                                     //  output,    width = 1,           .valid
		.src3_data          (cmd_demux_src3_data),                                                      //  output,  width = 125,           .data
		.src3_channel       (cmd_demux_src3_channel),                                                   //  output,    width = 4,           .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                                             //  output,    width = 1,           .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket)                                                //  output,    width = 1,           .endofpacket
	);

	DE10_Pro_QSYS_altera_merlin_multiplexer_191_t5gkdua cmd_mux (
		.clk                 (emif_s10_ddr4_a_emif_usr_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset               (emif_s10_ddr4_a_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                                       //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                                                       //  output,    width = 1,          .valid
		.src_data            (cmd_mux_src_data),                                                        //  output,  width = 125,          .data
		.src_channel         (cmd_mux_src_channel),                                                     //  output,    width = 4,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                               //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                                 //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_out_ready),                                                       //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_out_valid),                                                       //   input,    width = 1,          .valid
		.sink0_channel       (crosser_out_channel),                                                     //   input,    width = 4,          .channel
		.sink0_data          (crosser_out_data),                                                        //   input,  width = 125,          .data
		.sink0_startofpacket (crosser_out_startofpacket),                                               //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket)                                                  //   input,    width = 1,          .endofpacket
	);

	DE10_Pro_QSYS_altera_merlin_multiplexer_191_t5gkdua cmd_mux_001 (
		.clk                 (emif_s10_ddr4_b_emif_usr_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset               (emif_s10_ddr4_b_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                                   //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                                   //  output,    width = 1,          .valid
		.src_data            (cmd_mux_001_src_data),                                                    //  output,  width = 125,          .data
		.src_channel         (cmd_mux_001_src_channel),                                                 //  output,    width = 4,          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                                           //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                                             //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_001_out_ready),                                                   //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_001_out_valid),                                                   //   input,    width = 1,          .valid
		.sink0_channel       (crosser_001_out_channel),                                                 //   input,    width = 4,          .channel
		.sink0_data          (crosser_001_out_data),                                                    //   input,  width = 125,          .data
		.sink0_startofpacket (crosser_001_out_startofpacket),                                           //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_001_out_endofpacket)                                              //   input,    width = 1,          .endofpacket
	);

	DE10_Pro_QSYS_altera_merlin_multiplexer_191_t5gkdua cmd_mux_002 (
		.clk                 (emif_s10_ddr4_c_emif_usr_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset               (emif_s10_ddr4_c_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                                                   //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_002_src_valid),                                                   //  output,    width = 1,          .valid
		.src_data            (cmd_mux_002_src_data),                                                    //  output,  width = 125,          .data
		.src_channel         (cmd_mux_002_src_channel),                                                 //  output,    width = 4,          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                                           //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                                             //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_002_out_ready),                                                   //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_002_out_valid),                                                   //   input,    width = 1,          .valid
		.sink0_channel       (crosser_002_out_channel),                                                 //   input,    width = 4,          .channel
		.sink0_data          (crosser_002_out_data),                                                    //   input,  width = 125,          .data
		.sink0_startofpacket (crosser_002_out_startofpacket),                                           //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_002_out_endofpacket)                                              //   input,    width = 1,          .endofpacket
	);

	DE10_Pro_QSYS_altera_merlin_multiplexer_191_t5gkdua cmd_mux_003 (
		.clk                 (emif_s10_ddr4_d_emif_usr_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset               (emif_s10_ddr4_d_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                                                   //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_003_src_valid),                                                   //  output,    width = 1,          .valid
		.src_data            (cmd_mux_003_src_data),                                                    //  output,  width = 125,          .data
		.src_channel         (cmd_mux_003_src_channel),                                                 //  output,    width = 4,          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                                           //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                                             //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_003_out_ready),                                                   //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_003_out_valid),                                                   //   input,    width = 1,          .valid
		.sink0_channel       (crosser_003_out_channel),                                                 //   input,    width = 4,          .channel
		.sink0_data          (crosser_003_out_data),                                                    //   input,  width = 125,          .data
		.sink0_startofpacket (crosser_003_out_startofpacket),                                           //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_003_out_endofpacket)                                              //   input,    width = 1,          .endofpacket
	);

	DE10_Pro_QSYS_altera_merlin_demultiplexer_191_dw2ldbq rsp_demux (
		.clk                (emif_s10_ddr4_a_emif_usr_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset              (emif_s10_ddr4_a_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (emif_s10_ddr4_a_ctrl_amm_0_rsp_width_adapter_src_ready),                  //  output,    width = 1,      sink.ready
		.sink_channel       (emif_s10_ddr4_a_ctrl_amm_0_rsp_width_adapter_src_channel),                //   input,    width = 4,          .channel
		.sink_data          (emif_s10_ddr4_a_ctrl_amm_0_rsp_width_adapter_src_data),                   //   input,  width = 125,          .data
		.sink_startofpacket (emif_s10_ddr4_a_ctrl_amm_0_rsp_width_adapter_src_startofpacket),          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (emif_s10_ddr4_a_ctrl_amm_0_rsp_width_adapter_src_endofpacket),            //   input,    width = 1,          .endofpacket
		.sink_valid         (emif_s10_ddr4_a_ctrl_amm_0_rsp_width_adapter_src_valid),                  //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                                                    //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                                    //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                                                     //  output,  width = 125,          .data
		.src0_channel       (rsp_demux_src0_channel),                                                  //  output,    width = 4,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                            //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                                               //  output,    width = 1,          .endofpacket
	);

	DE10_Pro_QSYS_altera_merlin_demultiplexer_191_dw2ldbq rsp_demux_001 (
		.clk                (emif_s10_ddr4_b_emif_usr_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset              (emif_s10_ddr4_b_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (emif_s10_ddr4_b_ctrl_amm_0_rsp_width_adapter_src_ready),                  //  output,    width = 1,      sink.ready
		.sink_channel       (emif_s10_ddr4_b_ctrl_amm_0_rsp_width_adapter_src_channel),                //   input,    width = 4,          .channel
		.sink_data          (emif_s10_ddr4_b_ctrl_amm_0_rsp_width_adapter_src_data),                   //   input,  width = 125,          .data
		.sink_startofpacket (emif_s10_ddr4_b_ctrl_amm_0_rsp_width_adapter_src_startofpacket),          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (emif_s10_ddr4_b_ctrl_amm_0_rsp_width_adapter_src_endofpacket),            //   input,    width = 1,          .endofpacket
		.sink_valid         (emif_s10_ddr4_b_ctrl_amm_0_rsp_width_adapter_src_valid),                  //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                                //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                                //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_001_src0_data),                                                 //  output,  width = 125,          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                              //  output,    width = 4,          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                                        //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                                           //  output,    width = 1,          .endofpacket
	);

	DE10_Pro_QSYS_altera_merlin_demultiplexer_191_dw2ldbq rsp_demux_002 (
		.clk                (emif_s10_ddr4_c_emif_usr_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset              (emif_s10_ddr4_c_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (emif_s10_ddr4_c_ctrl_amm_0_rsp_width_adapter_src_ready),                  //  output,    width = 1,      sink.ready
		.sink_channel       (emif_s10_ddr4_c_ctrl_amm_0_rsp_width_adapter_src_channel),                //   input,    width = 4,          .channel
		.sink_data          (emif_s10_ddr4_c_ctrl_amm_0_rsp_width_adapter_src_data),                   //   input,  width = 125,          .data
		.sink_startofpacket (emif_s10_ddr4_c_ctrl_amm_0_rsp_width_adapter_src_startofpacket),          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (emif_s10_ddr4_c_ctrl_amm_0_rsp_width_adapter_src_endofpacket),            //   input,    width = 1,          .endofpacket
		.sink_valid         (emif_s10_ddr4_c_ctrl_amm_0_rsp_width_adapter_src_valid),                  //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                                                //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                                                //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_002_src0_data),                                                 //  output,  width = 125,          .data
		.src0_channel       (rsp_demux_002_src0_channel),                                              //  output,    width = 4,          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                                        //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                                           //  output,    width = 1,          .endofpacket
	);

	DE10_Pro_QSYS_altera_merlin_demultiplexer_191_dw2ldbq rsp_demux_003 (
		.clk                (emif_s10_ddr4_d_emif_usr_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset              (emif_s10_ddr4_d_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (emif_s10_ddr4_d_ctrl_amm_0_rsp_width_adapter_src_ready),                  //  output,    width = 1,      sink.ready
		.sink_channel       (emif_s10_ddr4_d_ctrl_amm_0_rsp_width_adapter_src_channel),                //   input,    width = 4,          .channel
		.sink_data          (emif_s10_ddr4_d_ctrl_amm_0_rsp_width_adapter_src_data),                   //   input,  width = 125,          .data
		.sink_startofpacket (emif_s10_ddr4_d_ctrl_amm_0_rsp_width_adapter_src_startofpacket),          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (emif_s10_ddr4_d_ctrl_amm_0_rsp_width_adapter_src_endofpacket),            //   input,    width = 1,          .endofpacket
		.sink_valid         (emif_s10_ddr4_d_ctrl_amm_0_rsp_width_adapter_src_valid),                  //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                                                //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                                                //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_003_src0_data),                                                 //  output,  width = 125,          .data
		.src0_channel       (rsp_demux_003_src0_channel),                                              //  output,    width = 4,          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                                        //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                                           //  output,    width = 1,          .endofpacket
	);

	DE10_Pro_QSYS_altera_merlin_multiplexer_191_vs7za5y rsp_mux (
		.clk                 (iopll_0_outclk1_clk),                                          //   input,    width = 1,       clk.clk
		.reset               (address_span_extender_ddr4_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                            //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                                            //  output,    width = 1,          .valid
		.src_data            (rsp_mux_src_data),                                             //  output,  width = 125,          .data
		.src_channel         (rsp_mux_src_channel),                                          //  output,    width = 4,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                    //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                      //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_004_out_ready),                                        //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_004_out_valid),                                        //   input,    width = 1,          .valid
		.sink0_channel       (crosser_004_out_channel),                                      //   input,    width = 4,          .channel
		.sink0_data          (crosser_004_out_data),                                         //   input,  width = 125,          .data
		.sink0_startofpacket (crosser_004_out_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_004_out_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.sink1_ready         (crosser_005_out_ready),                                        //  output,    width = 1,     sink1.ready
		.sink1_valid         (crosser_005_out_valid),                                        //   input,    width = 1,          .valid
		.sink1_channel       (crosser_005_out_channel),                                      //   input,    width = 4,          .channel
		.sink1_data          (crosser_005_out_data),                                         //   input,  width = 125,          .data
		.sink1_startofpacket (crosser_005_out_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (crosser_005_out_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.sink2_ready         (crosser_006_out_ready),                                        //  output,    width = 1,     sink2.ready
		.sink2_valid         (crosser_006_out_valid),                                        //   input,    width = 1,          .valid
		.sink2_channel       (crosser_006_out_channel),                                      //   input,    width = 4,          .channel
		.sink2_data          (crosser_006_out_data),                                         //   input,  width = 125,          .data
		.sink2_startofpacket (crosser_006_out_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (crosser_006_out_endofpacket),                                  //   input,    width = 1,          .endofpacket
		.sink3_ready         (crosser_007_out_ready),                                        //  output,    width = 1,     sink3.ready
		.sink3_valid         (crosser_007_out_valid),                                        //   input,    width = 1,          .valid
		.sink3_channel       (crosser_007_out_channel),                                      //   input,    width = 4,          .channel
		.sink3_data          (crosser_007_out_data),                                         //   input,  width = 125,          .data
		.sink3_startofpacket (crosser_007_out_startofpacket),                                //   input,    width = 1,          .startofpacket
		.sink3_endofpacket   (crosser_007_out_endofpacket)                                   //   input,    width = 1,          .endofpacket
	);

	DE10_Pro_QSYS_altera_merlin_width_adapter_191_vo3z5ay #(
		.IN_PKT_ADDR_H                 (69),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (88),
		.IN_PKT_BYTE_CNT_L             (76),
		.IN_PKT_TRANS_COMPRESSED_READ  (70),
		.IN_PKT_TRANS_WRITE            (72),
		.IN_PKT_BURSTWRAP_H            (89),
		.IN_PKT_BURSTWRAP_L            (89),
		.IN_PKT_BURST_SIZE_H           (92),
		.IN_PKT_BURST_SIZE_L           (90),
		.IN_PKT_RESPONSE_STATUS_H      (112),
		.IN_PKT_RESPONSE_STATUS_L      (111),
		.IN_PKT_TRANS_EXCLUSIVE        (75),
		.IN_PKT_BURST_TYPE_H           (94),
		.IN_PKT_BURST_TYPE_L           (93),
		.IN_PKT_ORI_BURST_SIZE_L       (113),
		.IN_PKT_ORI_BURST_SIZE_H       (115),
		.IN_ST_DATA_W                  (125),
		.OUT_PKT_ADDR_H                (609),
		.OUT_PKT_ADDR_L                (576),
		.OUT_PKT_DATA_H                (511),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (575),
		.OUT_PKT_BYTEEN_L              (512),
		.OUT_PKT_BYTE_CNT_H            (628),
		.OUT_PKT_BYTE_CNT_L            (616),
		.OUT_PKT_TRANS_COMPRESSED_READ (610),
		.OUT_PKT_BURST_SIZE_H          (632),
		.OUT_PKT_BURST_SIZE_L          (630),
		.OUT_PKT_RESPONSE_STATUS_H     (652),
		.OUT_PKT_RESPONSE_STATUS_L     (651),
		.OUT_PKT_TRANS_EXCLUSIVE       (615),
		.OUT_PKT_BURST_TYPE_H          (634),
		.OUT_PKT_BURST_TYPE_L          (633),
		.OUT_PKT_ORI_BURST_SIZE_L      (653),
		.OUT_PKT_ORI_BURST_SIZE_H      (655),
		.OUT_ST_DATA_W                 (665),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) emif_s10_ddr4_a_ctrl_amm_0_cmd_width_adapter (
		.clk                  (emif_s10_ddr4_a_emif_usr_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset                (emif_s10_ddr4_a_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                                                       //   input,    width = 1,      sink.valid
		.in_channel           (cmd_mux_src_channel),                                                     //   input,    width = 4,          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                                               //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                                                 //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_mux_src_ready),                                                       //  output,    width = 1,          .ready
		.in_data              (cmd_mux_src_data),                                                        //   input,  width = 125,          .data
		.out_endofpacket      (emif_s10_ddr4_a_ctrl_amm_0_cmd_width_adapter_src_endofpacket),            //  output,    width = 1,       src.endofpacket
		.out_data             (emif_s10_ddr4_a_ctrl_amm_0_cmd_width_adapter_src_data),                   //  output,  width = 665,          .data
		.out_channel          (emif_s10_ddr4_a_ctrl_amm_0_cmd_width_adapter_src_channel),                //  output,    width = 4,          .channel
		.out_valid            (emif_s10_ddr4_a_ctrl_amm_0_cmd_width_adapter_src_valid),                  //  output,    width = 1,          .valid
		.out_ready            (emif_s10_ddr4_a_ctrl_amm_0_cmd_width_adapter_src_ready),                  //   input,    width = 1,          .ready
		.out_startofpacket    (emif_s10_ddr4_a_ctrl_amm_0_cmd_width_adapter_src_startofpacket),          //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                   // (terminated),                         
	);

	DE10_Pro_QSYS_altera_merlin_width_adapter_191_vo3z5ay #(
		.IN_PKT_ADDR_H                 (69),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (88),
		.IN_PKT_BYTE_CNT_L             (76),
		.IN_PKT_TRANS_COMPRESSED_READ  (70),
		.IN_PKT_TRANS_WRITE            (72),
		.IN_PKT_BURSTWRAP_H            (89),
		.IN_PKT_BURSTWRAP_L            (89),
		.IN_PKT_BURST_SIZE_H           (92),
		.IN_PKT_BURST_SIZE_L           (90),
		.IN_PKT_RESPONSE_STATUS_H      (112),
		.IN_PKT_RESPONSE_STATUS_L      (111),
		.IN_PKT_TRANS_EXCLUSIVE        (75),
		.IN_PKT_BURST_TYPE_H           (94),
		.IN_PKT_BURST_TYPE_L           (93),
		.IN_PKT_ORI_BURST_SIZE_L       (113),
		.IN_PKT_ORI_BURST_SIZE_H       (115),
		.IN_ST_DATA_W                  (125),
		.OUT_PKT_ADDR_H                (609),
		.OUT_PKT_ADDR_L                (576),
		.OUT_PKT_DATA_H                (511),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (575),
		.OUT_PKT_BYTEEN_L              (512),
		.OUT_PKT_BYTE_CNT_H            (628),
		.OUT_PKT_BYTE_CNT_L            (616),
		.OUT_PKT_TRANS_COMPRESSED_READ (610),
		.OUT_PKT_BURST_SIZE_H          (632),
		.OUT_PKT_BURST_SIZE_L          (630),
		.OUT_PKT_RESPONSE_STATUS_H     (652),
		.OUT_PKT_RESPONSE_STATUS_L     (651),
		.OUT_PKT_TRANS_EXCLUSIVE       (615),
		.OUT_PKT_BURST_TYPE_H          (634),
		.OUT_PKT_BURST_TYPE_L          (633),
		.OUT_PKT_ORI_BURST_SIZE_L      (653),
		.OUT_PKT_ORI_BURST_SIZE_H      (655),
		.OUT_ST_DATA_W                 (665),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) emif_s10_ddr4_b_ctrl_amm_0_cmd_width_adapter (
		.clk                  (emif_s10_ddr4_b_emif_usr_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset                (emif_s10_ddr4_b_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_mux_001_src_valid),                                                   //   input,    width = 1,      sink.valid
		.in_channel           (cmd_mux_001_src_channel),                                                 //   input,    width = 4,          .channel
		.in_startofpacket     (cmd_mux_001_src_startofpacket),                                           //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_mux_001_src_endofpacket),                                             //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_mux_001_src_ready),                                                   //  output,    width = 1,          .ready
		.in_data              (cmd_mux_001_src_data),                                                    //   input,  width = 125,          .data
		.out_endofpacket      (emif_s10_ddr4_b_ctrl_amm_0_cmd_width_adapter_src_endofpacket),            //  output,    width = 1,       src.endofpacket
		.out_data             (emif_s10_ddr4_b_ctrl_amm_0_cmd_width_adapter_src_data),                   //  output,  width = 665,          .data
		.out_channel          (emif_s10_ddr4_b_ctrl_amm_0_cmd_width_adapter_src_channel),                //  output,    width = 4,          .channel
		.out_valid            (emif_s10_ddr4_b_ctrl_amm_0_cmd_width_adapter_src_valid),                  //  output,    width = 1,          .valid
		.out_ready            (emif_s10_ddr4_b_ctrl_amm_0_cmd_width_adapter_src_ready),                  //   input,    width = 1,          .ready
		.out_startofpacket    (emif_s10_ddr4_b_ctrl_amm_0_cmd_width_adapter_src_startofpacket),          //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                   // (terminated),                         
	);

	DE10_Pro_QSYS_altera_merlin_width_adapter_191_vo3z5ay #(
		.IN_PKT_ADDR_H                 (69),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (88),
		.IN_PKT_BYTE_CNT_L             (76),
		.IN_PKT_TRANS_COMPRESSED_READ  (70),
		.IN_PKT_TRANS_WRITE            (72),
		.IN_PKT_BURSTWRAP_H            (89),
		.IN_PKT_BURSTWRAP_L            (89),
		.IN_PKT_BURST_SIZE_H           (92),
		.IN_PKT_BURST_SIZE_L           (90),
		.IN_PKT_RESPONSE_STATUS_H      (112),
		.IN_PKT_RESPONSE_STATUS_L      (111),
		.IN_PKT_TRANS_EXCLUSIVE        (75),
		.IN_PKT_BURST_TYPE_H           (94),
		.IN_PKT_BURST_TYPE_L           (93),
		.IN_PKT_ORI_BURST_SIZE_L       (113),
		.IN_PKT_ORI_BURST_SIZE_H       (115),
		.IN_ST_DATA_W                  (125),
		.OUT_PKT_ADDR_H                (609),
		.OUT_PKT_ADDR_L                (576),
		.OUT_PKT_DATA_H                (511),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (575),
		.OUT_PKT_BYTEEN_L              (512),
		.OUT_PKT_BYTE_CNT_H            (628),
		.OUT_PKT_BYTE_CNT_L            (616),
		.OUT_PKT_TRANS_COMPRESSED_READ (610),
		.OUT_PKT_BURST_SIZE_H          (632),
		.OUT_PKT_BURST_SIZE_L          (630),
		.OUT_PKT_RESPONSE_STATUS_H     (652),
		.OUT_PKT_RESPONSE_STATUS_L     (651),
		.OUT_PKT_TRANS_EXCLUSIVE       (615),
		.OUT_PKT_BURST_TYPE_H          (634),
		.OUT_PKT_BURST_TYPE_L          (633),
		.OUT_PKT_ORI_BURST_SIZE_L      (653),
		.OUT_PKT_ORI_BURST_SIZE_H      (655),
		.OUT_ST_DATA_W                 (665),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) emif_s10_ddr4_c_ctrl_amm_0_cmd_width_adapter (
		.clk                  (emif_s10_ddr4_c_emif_usr_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset                (emif_s10_ddr4_c_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_mux_002_src_valid),                                                   //   input,    width = 1,      sink.valid
		.in_channel           (cmd_mux_002_src_channel),                                                 //   input,    width = 4,          .channel
		.in_startofpacket     (cmd_mux_002_src_startofpacket),                                           //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_mux_002_src_endofpacket),                                             //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_mux_002_src_ready),                                                   //  output,    width = 1,          .ready
		.in_data              (cmd_mux_002_src_data),                                                    //   input,  width = 125,          .data
		.out_endofpacket      (emif_s10_ddr4_c_ctrl_amm_0_cmd_width_adapter_src_endofpacket),            //  output,    width = 1,       src.endofpacket
		.out_data             (emif_s10_ddr4_c_ctrl_amm_0_cmd_width_adapter_src_data),                   //  output,  width = 665,          .data
		.out_channel          (emif_s10_ddr4_c_ctrl_amm_0_cmd_width_adapter_src_channel),                //  output,    width = 4,          .channel
		.out_valid            (emif_s10_ddr4_c_ctrl_amm_0_cmd_width_adapter_src_valid),                  //  output,    width = 1,          .valid
		.out_ready            (emif_s10_ddr4_c_ctrl_amm_0_cmd_width_adapter_src_ready),                  //   input,    width = 1,          .ready
		.out_startofpacket    (emif_s10_ddr4_c_ctrl_amm_0_cmd_width_adapter_src_startofpacket),          //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                   // (terminated),                         
	);

	DE10_Pro_QSYS_altera_merlin_width_adapter_191_vo3z5ay #(
		.IN_PKT_ADDR_H                 (69),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (88),
		.IN_PKT_BYTE_CNT_L             (76),
		.IN_PKT_TRANS_COMPRESSED_READ  (70),
		.IN_PKT_TRANS_WRITE            (72),
		.IN_PKT_BURSTWRAP_H            (89),
		.IN_PKT_BURSTWRAP_L            (89),
		.IN_PKT_BURST_SIZE_H           (92),
		.IN_PKT_BURST_SIZE_L           (90),
		.IN_PKT_RESPONSE_STATUS_H      (112),
		.IN_PKT_RESPONSE_STATUS_L      (111),
		.IN_PKT_TRANS_EXCLUSIVE        (75),
		.IN_PKT_BURST_TYPE_H           (94),
		.IN_PKT_BURST_TYPE_L           (93),
		.IN_PKT_ORI_BURST_SIZE_L       (113),
		.IN_PKT_ORI_BURST_SIZE_H       (115),
		.IN_ST_DATA_W                  (125),
		.OUT_PKT_ADDR_H                (609),
		.OUT_PKT_ADDR_L                (576),
		.OUT_PKT_DATA_H                (511),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (575),
		.OUT_PKT_BYTEEN_L              (512),
		.OUT_PKT_BYTE_CNT_H            (628),
		.OUT_PKT_BYTE_CNT_L            (616),
		.OUT_PKT_TRANS_COMPRESSED_READ (610),
		.OUT_PKT_BURST_SIZE_H          (632),
		.OUT_PKT_BURST_SIZE_L          (630),
		.OUT_PKT_RESPONSE_STATUS_H     (652),
		.OUT_PKT_RESPONSE_STATUS_L     (651),
		.OUT_PKT_TRANS_EXCLUSIVE       (615),
		.OUT_PKT_BURST_TYPE_H          (634),
		.OUT_PKT_BURST_TYPE_L          (633),
		.OUT_PKT_ORI_BURST_SIZE_L      (653),
		.OUT_PKT_ORI_BURST_SIZE_H      (655),
		.OUT_ST_DATA_W                 (665),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) emif_s10_ddr4_d_ctrl_amm_0_cmd_width_adapter (
		.clk                  (emif_s10_ddr4_d_emif_usr_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset                (emif_s10_ddr4_d_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_mux_003_src_valid),                                                   //   input,    width = 1,      sink.valid
		.in_channel           (cmd_mux_003_src_channel),                                                 //   input,    width = 4,          .channel
		.in_startofpacket     (cmd_mux_003_src_startofpacket),                                           //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_mux_003_src_endofpacket),                                             //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_mux_003_src_ready),                                                   //  output,    width = 1,          .ready
		.in_data              (cmd_mux_003_src_data),                                                    //   input,  width = 125,          .data
		.out_endofpacket      (emif_s10_ddr4_d_ctrl_amm_0_cmd_width_adapter_src_endofpacket),            //  output,    width = 1,       src.endofpacket
		.out_data             (emif_s10_ddr4_d_ctrl_amm_0_cmd_width_adapter_src_data),                   //  output,  width = 665,          .data
		.out_channel          (emif_s10_ddr4_d_ctrl_amm_0_cmd_width_adapter_src_channel),                //  output,    width = 4,          .channel
		.out_valid            (emif_s10_ddr4_d_ctrl_amm_0_cmd_width_adapter_src_valid),                  //  output,    width = 1,          .valid
		.out_ready            (emif_s10_ddr4_d_ctrl_amm_0_cmd_width_adapter_src_ready),                  //   input,    width = 1,          .ready
		.out_startofpacket    (emif_s10_ddr4_d_ctrl_amm_0_cmd_width_adapter_src_startofpacket),          //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                   // (terminated),                         
	);

	DE10_Pro_QSYS_altera_merlin_width_adapter_191_m3kw2ta #(
		.IN_PKT_ADDR_H                 (609),
		.IN_PKT_ADDR_L                 (576),
		.IN_PKT_DATA_H                 (511),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (575),
		.IN_PKT_BYTEEN_L               (512),
		.IN_PKT_BYTE_CNT_H             (628),
		.IN_PKT_BYTE_CNT_L             (616),
		.IN_PKT_TRANS_COMPRESSED_READ  (610),
		.IN_PKT_TRANS_WRITE            (612),
		.IN_PKT_BURSTWRAP_H            (629),
		.IN_PKT_BURSTWRAP_L            (629),
		.IN_PKT_BURST_SIZE_H           (632),
		.IN_PKT_BURST_SIZE_L           (630),
		.IN_PKT_RESPONSE_STATUS_H      (652),
		.IN_PKT_RESPONSE_STATUS_L      (651),
		.IN_PKT_TRANS_EXCLUSIVE        (615),
		.IN_PKT_BURST_TYPE_H           (634),
		.IN_PKT_BURST_TYPE_L           (633),
		.IN_PKT_ORI_BURST_SIZE_L       (653),
		.IN_PKT_ORI_BURST_SIZE_H       (655),
		.IN_ST_DATA_W                  (665),
		.OUT_PKT_ADDR_H                (69),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (88),
		.OUT_PKT_BYTE_CNT_L            (76),
		.OUT_PKT_TRANS_COMPRESSED_READ (70),
		.OUT_PKT_BURST_SIZE_H          (92),
		.OUT_PKT_BURST_SIZE_L          (90),
		.OUT_PKT_RESPONSE_STATUS_H     (112),
		.OUT_PKT_RESPONSE_STATUS_L     (111),
		.OUT_PKT_TRANS_EXCLUSIVE       (75),
		.OUT_PKT_BURST_TYPE_H          (94),
		.OUT_PKT_BURST_TYPE_L          (93),
		.OUT_PKT_ORI_BURST_SIZE_L      (113),
		.OUT_PKT_ORI_BURST_SIZE_H      (115),
		.OUT_ST_DATA_W                 (125),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) emif_s10_ddr4_a_ctrl_amm_0_rsp_width_adapter (
		.clk                  (emif_s10_ddr4_a_emif_usr_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset                (emif_s10_ddr4_a_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_valid             (router_001_src_valid),                                                    //   input,    width = 1,      sink.valid
		.in_channel           (router_001_src_channel),                                                  //   input,    width = 4,          .channel
		.in_startofpacket     (router_001_src_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.in_endofpacket       (router_001_src_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.in_ready             (router_001_src_ready),                                                    //  output,    width = 1,          .ready
		.in_data              (router_001_src_data),                                                     //   input,  width = 665,          .data
		.out_endofpacket      (emif_s10_ddr4_a_ctrl_amm_0_rsp_width_adapter_src_endofpacket),            //  output,    width = 1,       src.endofpacket
		.out_data             (emif_s10_ddr4_a_ctrl_amm_0_rsp_width_adapter_src_data),                   //  output,  width = 125,          .data
		.out_channel          (emif_s10_ddr4_a_ctrl_amm_0_rsp_width_adapter_src_channel),                //  output,    width = 4,          .channel
		.out_valid            (emif_s10_ddr4_a_ctrl_amm_0_rsp_width_adapter_src_valid),                  //  output,    width = 1,          .valid
		.out_ready            (emif_s10_ddr4_a_ctrl_amm_0_rsp_width_adapter_src_ready),                  //   input,    width = 1,          .ready
		.out_startofpacket    (emif_s10_ddr4_a_ctrl_amm_0_rsp_width_adapter_src_startofpacket),          //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                   // (terminated),                         
	);

	DE10_Pro_QSYS_altera_merlin_width_adapter_191_m3kw2ta #(
		.IN_PKT_ADDR_H                 (609),
		.IN_PKT_ADDR_L                 (576),
		.IN_PKT_DATA_H                 (511),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (575),
		.IN_PKT_BYTEEN_L               (512),
		.IN_PKT_BYTE_CNT_H             (628),
		.IN_PKT_BYTE_CNT_L             (616),
		.IN_PKT_TRANS_COMPRESSED_READ  (610),
		.IN_PKT_TRANS_WRITE            (612),
		.IN_PKT_BURSTWRAP_H            (629),
		.IN_PKT_BURSTWRAP_L            (629),
		.IN_PKT_BURST_SIZE_H           (632),
		.IN_PKT_BURST_SIZE_L           (630),
		.IN_PKT_RESPONSE_STATUS_H      (652),
		.IN_PKT_RESPONSE_STATUS_L      (651),
		.IN_PKT_TRANS_EXCLUSIVE        (615),
		.IN_PKT_BURST_TYPE_H           (634),
		.IN_PKT_BURST_TYPE_L           (633),
		.IN_PKT_ORI_BURST_SIZE_L       (653),
		.IN_PKT_ORI_BURST_SIZE_H       (655),
		.IN_ST_DATA_W                  (665),
		.OUT_PKT_ADDR_H                (69),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (88),
		.OUT_PKT_BYTE_CNT_L            (76),
		.OUT_PKT_TRANS_COMPRESSED_READ (70),
		.OUT_PKT_BURST_SIZE_H          (92),
		.OUT_PKT_BURST_SIZE_L          (90),
		.OUT_PKT_RESPONSE_STATUS_H     (112),
		.OUT_PKT_RESPONSE_STATUS_L     (111),
		.OUT_PKT_TRANS_EXCLUSIVE       (75),
		.OUT_PKT_BURST_TYPE_H          (94),
		.OUT_PKT_BURST_TYPE_L          (93),
		.OUT_PKT_ORI_BURST_SIZE_L      (113),
		.OUT_PKT_ORI_BURST_SIZE_H      (115),
		.OUT_ST_DATA_W                 (125),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) emif_s10_ddr4_b_ctrl_amm_0_rsp_width_adapter (
		.clk                  (emif_s10_ddr4_b_emif_usr_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset                (emif_s10_ddr4_b_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_valid             (router_002_src_valid),                                                    //   input,    width = 1,      sink.valid
		.in_channel           (router_002_src_channel),                                                  //   input,    width = 4,          .channel
		.in_startofpacket     (router_002_src_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.in_endofpacket       (router_002_src_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.in_ready             (router_002_src_ready),                                                    //  output,    width = 1,          .ready
		.in_data              (router_002_src_data),                                                     //   input,  width = 665,          .data
		.out_endofpacket      (emif_s10_ddr4_b_ctrl_amm_0_rsp_width_adapter_src_endofpacket),            //  output,    width = 1,       src.endofpacket
		.out_data             (emif_s10_ddr4_b_ctrl_amm_0_rsp_width_adapter_src_data),                   //  output,  width = 125,          .data
		.out_channel          (emif_s10_ddr4_b_ctrl_amm_0_rsp_width_adapter_src_channel),                //  output,    width = 4,          .channel
		.out_valid            (emif_s10_ddr4_b_ctrl_amm_0_rsp_width_adapter_src_valid),                  //  output,    width = 1,          .valid
		.out_ready            (emif_s10_ddr4_b_ctrl_amm_0_rsp_width_adapter_src_ready),                  //   input,    width = 1,          .ready
		.out_startofpacket    (emif_s10_ddr4_b_ctrl_amm_0_rsp_width_adapter_src_startofpacket),          //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                   // (terminated),                         
	);

	DE10_Pro_QSYS_altera_merlin_width_adapter_191_m3kw2ta #(
		.IN_PKT_ADDR_H                 (609),
		.IN_PKT_ADDR_L                 (576),
		.IN_PKT_DATA_H                 (511),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (575),
		.IN_PKT_BYTEEN_L               (512),
		.IN_PKT_BYTE_CNT_H             (628),
		.IN_PKT_BYTE_CNT_L             (616),
		.IN_PKT_TRANS_COMPRESSED_READ  (610),
		.IN_PKT_TRANS_WRITE            (612),
		.IN_PKT_BURSTWRAP_H            (629),
		.IN_PKT_BURSTWRAP_L            (629),
		.IN_PKT_BURST_SIZE_H           (632),
		.IN_PKT_BURST_SIZE_L           (630),
		.IN_PKT_RESPONSE_STATUS_H      (652),
		.IN_PKT_RESPONSE_STATUS_L      (651),
		.IN_PKT_TRANS_EXCLUSIVE        (615),
		.IN_PKT_BURST_TYPE_H           (634),
		.IN_PKT_BURST_TYPE_L           (633),
		.IN_PKT_ORI_BURST_SIZE_L       (653),
		.IN_PKT_ORI_BURST_SIZE_H       (655),
		.IN_ST_DATA_W                  (665),
		.OUT_PKT_ADDR_H                (69),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (88),
		.OUT_PKT_BYTE_CNT_L            (76),
		.OUT_PKT_TRANS_COMPRESSED_READ (70),
		.OUT_PKT_BURST_SIZE_H          (92),
		.OUT_PKT_BURST_SIZE_L          (90),
		.OUT_PKT_RESPONSE_STATUS_H     (112),
		.OUT_PKT_RESPONSE_STATUS_L     (111),
		.OUT_PKT_TRANS_EXCLUSIVE       (75),
		.OUT_PKT_BURST_TYPE_H          (94),
		.OUT_PKT_BURST_TYPE_L          (93),
		.OUT_PKT_ORI_BURST_SIZE_L      (113),
		.OUT_PKT_ORI_BURST_SIZE_H      (115),
		.OUT_ST_DATA_W                 (125),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) emif_s10_ddr4_c_ctrl_amm_0_rsp_width_adapter (
		.clk                  (emif_s10_ddr4_c_emif_usr_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset                (emif_s10_ddr4_c_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_valid             (router_003_src_valid),                                                    //   input,    width = 1,      sink.valid
		.in_channel           (router_003_src_channel),                                                  //   input,    width = 4,          .channel
		.in_startofpacket     (router_003_src_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.in_endofpacket       (router_003_src_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.in_ready             (router_003_src_ready),                                                    //  output,    width = 1,          .ready
		.in_data              (router_003_src_data),                                                     //   input,  width = 665,          .data
		.out_endofpacket      (emif_s10_ddr4_c_ctrl_amm_0_rsp_width_adapter_src_endofpacket),            //  output,    width = 1,       src.endofpacket
		.out_data             (emif_s10_ddr4_c_ctrl_amm_0_rsp_width_adapter_src_data),                   //  output,  width = 125,          .data
		.out_channel          (emif_s10_ddr4_c_ctrl_amm_0_rsp_width_adapter_src_channel),                //  output,    width = 4,          .channel
		.out_valid            (emif_s10_ddr4_c_ctrl_amm_0_rsp_width_adapter_src_valid),                  //  output,    width = 1,          .valid
		.out_ready            (emif_s10_ddr4_c_ctrl_amm_0_rsp_width_adapter_src_ready),                  //   input,    width = 1,          .ready
		.out_startofpacket    (emif_s10_ddr4_c_ctrl_amm_0_rsp_width_adapter_src_startofpacket),          //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                   // (terminated),                         
	);

	DE10_Pro_QSYS_altera_merlin_width_adapter_191_m3kw2ta #(
		.IN_PKT_ADDR_H                 (609),
		.IN_PKT_ADDR_L                 (576),
		.IN_PKT_DATA_H                 (511),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (575),
		.IN_PKT_BYTEEN_L               (512),
		.IN_PKT_BYTE_CNT_H             (628),
		.IN_PKT_BYTE_CNT_L             (616),
		.IN_PKT_TRANS_COMPRESSED_READ  (610),
		.IN_PKT_TRANS_WRITE            (612),
		.IN_PKT_BURSTWRAP_H            (629),
		.IN_PKT_BURSTWRAP_L            (629),
		.IN_PKT_BURST_SIZE_H           (632),
		.IN_PKT_BURST_SIZE_L           (630),
		.IN_PKT_RESPONSE_STATUS_H      (652),
		.IN_PKT_RESPONSE_STATUS_L      (651),
		.IN_PKT_TRANS_EXCLUSIVE        (615),
		.IN_PKT_BURST_TYPE_H           (634),
		.IN_PKT_BURST_TYPE_L           (633),
		.IN_PKT_ORI_BURST_SIZE_L       (653),
		.IN_PKT_ORI_BURST_SIZE_H       (655),
		.IN_ST_DATA_W                  (665),
		.OUT_PKT_ADDR_H                (69),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (88),
		.OUT_PKT_BYTE_CNT_L            (76),
		.OUT_PKT_TRANS_COMPRESSED_READ (70),
		.OUT_PKT_BURST_SIZE_H          (92),
		.OUT_PKT_BURST_SIZE_L          (90),
		.OUT_PKT_RESPONSE_STATUS_H     (112),
		.OUT_PKT_RESPONSE_STATUS_L     (111),
		.OUT_PKT_TRANS_EXCLUSIVE       (75),
		.OUT_PKT_BURST_TYPE_H          (94),
		.OUT_PKT_BURST_TYPE_L          (93),
		.OUT_PKT_ORI_BURST_SIZE_L      (113),
		.OUT_PKT_ORI_BURST_SIZE_H      (115),
		.OUT_ST_DATA_W                 (125),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) emif_s10_ddr4_d_ctrl_amm_0_rsp_width_adapter (
		.clk                  (emif_s10_ddr4_d_emif_usr_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset                (emif_s10_ddr4_d_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_valid             (router_004_src_valid),                                                    //   input,    width = 1,      sink.valid
		.in_channel           (router_004_src_channel),                                                  //   input,    width = 4,          .channel
		.in_startofpacket     (router_004_src_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.in_endofpacket       (router_004_src_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.in_ready             (router_004_src_ready),                                                    //  output,    width = 1,          .ready
		.in_data              (router_004_src_data),                                                     //   input,  width = 665,          .data
		.out_endofpacket      (emif_s10_ddr4_d_ctrl_amm_0_rsp_width_adapter_src_endofpacket),            //  output,    width = 1,       src.endofpacket
		.out_data             (emif_s10_ddr4_d_ctrl_amm_0_rsp_width_adapter_src_data),                   //  output,  width = 125,          .data
		.out_channel          (emif_s10_ddr4_d_ctrl_amm_0_rsp_width_adapter_src_channel),                //  output,    width = 4,          .channel
		.out_valid            (emif_s10_ddr4_d_ctrl_amm_0_rsp_width_adapter_src_valid),                  //  output,    width = 1,          .valid
		.out_ready            (emif_s10_ddr4_d_ctrl_amm_0_rsp_width_adapter_src_ready),                  //   input,    width = 1,          .ready
		.out_startofpacket    (emif_s10_ddr4_d_ctrl_amm_0_rsp_width_adapter_src_startofpacket),          //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                   // (terminated),                         
	);

	DE10_Pro_QSYS_altera_avalon_st_handshake_clock_crosser_191_ukeujci #(
		.DATA_WIDTH          (125),
		.BITS_PER_SYMBOL     (125),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (4),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser (
		.in_clk            (iopll_0_outclk1_clk),                                                     //   input,    width = 1,        in_clk.clk
		.in_reset          (address_span_extender_ddr4_reset_reset_bridge_in_reset_reset),            //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (emif_s10_ddr4_a_emif_usr_clk_clk),                                        //   input,    width = 1,       out_clk.clk
		.out_reset         (emif_s10_ddr4_a_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_src0_ready),                                                    //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_src0_valid),                                                    //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                                            //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                                              //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_src0_channel),                                                  //   input,    width = 4,              .channel
		.in_data           (cmd_demux_src0_data),                                                     //   input,  width = 125,              .data
		.out_ready         (crosser_out_ready),                                                       //   input,    width = 1,           out.ready
		.out_valid         (crosser_out_valid),                                                       //  output,    width = 1,              .valid
		.out_startofpacket (crosser_out_startofpacket),                                               //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                                                 //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_out_channel),                                                     //  output,    width = 4,              .channel
		.out_data          (crosser_out_data),                                                        //  output,  width = 125,              .data
		.in_empty          (1'b0),                                                                    // (terminated),                             
		.in_error          (1'b0),                                                                    // (terminated),                             
		.out_empty         (),                                                                        // (terminated),                             
		.out_error         ()                                                                         // (terminated),                             
	);

	DE10_Pro_QSYS_altera_avalon_st_handshake_clock_crosser_191_ukeujci #(
		.DATA_WIDTH          (125),
		.BITS_PER_SYMBOL     (125),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (4),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_001 (
		.in_clk            (iopll_0_outclk1_clk),                                                     //   input,    width = 1,        in_clk.clk
		.in_reset          (address_span_extender_ddr4_reset_reset_bridge_in_reset_reset),            //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (emif_s10_ddr4_b_emif_usr_clk_clk),                                        //   input,    width = 1,       out_clk.clk
		.out_reset         (emif_s10_ddr4_b_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_src1_ready),                                                    //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_src1_valid),                                                    //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_src1_startofpacket),                                            //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_src1_endofpacket),                                              //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_src1_channel),                                                  //   input,    width = 4,              .channel
		.in_data           (cmd_demux_src1_data),                                                     //   input,  width = 125,              .data
		.out_ready         (crosser_001_out_ready),                                                   //   input,    width = 1,           out.ready
		.out_valid         (crosser_001_out_valid),                                                   //  output,    width = 1,              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                                           //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                                             //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_001_out_channel),                                                 //  output,    width = 4,              .channel
		.out_data          (crosser_001_out_data),                                                    //  output,  width = 125,              .data
		.in_empty          (1'b0),                                                                    // (terminated),                             
		.in_error          (1'b0),                                                                    // (terminated),                             
		.out_empty         (),                                                                        // (terminated),                             
		.out_error         ()                                                                         // (terminated),                             
	);

	DE10_Pro_QSYS_altera_avalon_st_handshake_clock_crosser_191_ukeujci #(
		.DATA_WIDTH          (125),
		.BITS_PER_SYMBOL     (125),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (4),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_002 (
		.in_clk            (iopll_0_outclk1_clk),                                                     //   input,    width = 1,        in_clk.clk
		.in_reset          (address_span_extender_ddr4_reset_reset_bridge_in_reset_reset),            //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (emif_s10_ddr4_c_emif_usr_clk_clk),                                        //   input,    width = 1,       out_clk.clk
		.out_reset         (emif_s10_ddr4_c_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_src2_ready),                                                    //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_src2_valid),                                                    //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_src2_startofpacket),                                            //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_src2_endofpacket),                                              //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_src2_channel),                                                  //   input,    width = 4,              .channel
		.in_data           (cmd_demux_src2_data),                                                     //   input,  width = 125,              .data
		.out_ready         (crosser_002_out_ready),                                                   //   input,    width = 1,           out.ready
		.out_valid         (crosser_002_out_valid),                                                   //  output,    width = 1,              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                                           //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                                             //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_002_out_channel),                                                 //  output,    width = 4,              .channel
		.out_data          (crosser_002_out_data),                                                    //  output,  width = 125,              .data
		.in_empty          (1'b0),                                                                    // (terminated),                             
		.in_error          (1'b0),                                                                    // (terminated),                             
		.out_empty         (),                                                                        // (terminated),                             
		.out_error         ()                                                                         // (terminated),                             
	);

	DE10_Pro_QSYS_altera_avalon_st_handshake_clock_crosser_191_ukeujci #(
		.DATA_WIDTH          (125),
		.BITS_PER_SYMBOL     (125),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (4),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_003 (
		.in_clk            (iopll_0_outclk1_clk),                                                     //   input,    width = 1,        in_clk.clk
		.in_reset          (address_span_extender_ddr4_reset_reset_bridge_in_reset_reset),            //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (emif_s10_ddr4_d_emif_usr_clk_clk),                                        //   input,    width = 1,       out_clk.clk
		.out_reset         (emif_s10_ddr4_d_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_src3_ready),                                                    //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_src3_valid),                                                    //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_src3_startofpacket),                                            //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_src3_endofpacket),                                              //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_src3_channel),                                                  //   input,    width = 4,              .channel
		.in_data           (cmd_demux_src3_data),                                                     //   input,  width = 125,              .data
		.out_ready         (crosser_003_out_ready),                                                   //   input,    width = 1,           out.ready
		.out_valid         (crosser_003_out_valid),                                                   //  output,    width = 1,              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                                           //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                                             //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_003_out_channel),                                                 //  output,    width = 4,              .channel
		.out_data          (crosser_003_out_data),                                                    //  output,  width = 125,              .data
		.in_empty          (1'b0),                                                                    // (terminated),                             
		.in_error          (1'b0),                                                                    // (terminated),                             
		.out_empty         (),                                                                        // (terminated),                             
		.out_error         ()                                                                         // (terminated),                             
	);

	DE10_Pro_QSYS_altera_avalon_st_handshake_clock_crosser_191_ukeujci #(
		.DATA_WIDTH          (125),
		.BITS_PER_SYMBOL     (125),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (4),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_004 (
		.in_clk            (emif_s10_ddr4_a_emif_usr_clk_clk),                                        //   input,    width = 1,        in_clk.clk
		.in_reset          (emif_s10_ddr4_a_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (iopll_0_outclk1_clk),                                                     //   input,    width = 1,       out_clk.clk
		.out_reset         (address_span_extender_ddr4_reset_reset_bridge_in_reset_reset),            //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_src0_ready),                                                    //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_src0_valid),                                                    //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                                            //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                                              //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_src0_channel),                                                  //   input,    width = 4,              .channel
		.in_data           (rsp_demux_src0_data),                                                     //   input,  width = 125,              .data
		.out_ready         (crosser_004_out_ready),                                                   //   input,    width = 1,           out.ready
		.out_valid         (crosser_004_out_valid),                                                   //  output,    width = 1,              .valid
		.out_startofpacket (crosser_004_out_startofpacket),                                           //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_004_out_endofpacket),                                             //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_004_out_channel),                                                 //  output,    width = 4,              .channel
		.out_data          (crosser_004_out_data),                                                    //  output,  width = 125,              .data
		.in_empty          (1'b0),                                                                    // (terminated),                             
		.in_error          (1'b0),                                                                    // (terminated),                             
		.out_empty         (),                                                                        // (terminated),                             
		.out_error         ()                                                                         // (terminated),                             
	);

	DE10_Pro_QSYS_altera_avalon_st_handshake_clock_crosser_191_ukeujci #(
		.DATA_WIDTH          (125),
		.BITS_PER_SYMBOL     (125),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (4),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_005 (
		.in_clk            (emif_s10_ddr4_b_emif_usr_clk_clk),                                        //   input,    width = 1,        in_clk.clk
		.in_reset          (emif_s10_ddr4_b_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (iopll_0_outclk1_clk),                                                     //   input,    width = 1,       out_clk.clk
		.out_reset         (address_span_extender_ddr4_reset_reset_bridge_in_reset_reset),            //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_001_src0_ready),                                                //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_001_src0_valid),                                                //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_001_src0_startofpacket),                                        //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_001_src0_endofpacket),                                          //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_001_src0_channel),                                              //   input,    width = 4,              .channel
		.in_data           (rsp_demux_001_src0_data),                                                 //   input,  width = 125,              .data
		.out_ready         (crosser_005_out_ready),                                                   //   input,    width = 1,           out.ready
		.out_valid         (crosser_005_out_valid),                                                   //  output,    width = 1,              .valid
		.out_startofpacket (crosser_005_out_startofpacket),                                           //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_005_out_endofpacket),                                             //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_005_out_channel),                                                 //  output,    width = 4,              .channel
		.out_data          (crosser_005_out_data),                                                    //  output,  width = 125,              .data
		.in_empty          (1'b0),                                                                    // (terminated),                             
		.in_error          (1'b0),                                                                    // (terminated),                             
		.out_empty         (),                                                                        // (terminated),                             
		.out_error         ()                                                                         // (terminated),                             
	);

	DE10_Pro_QSYS_altera_avalon_st_handshake_clock_crosser_191_ukeujci #(
		.DATA_WIDTH          (125),
		.BITS_PER_SYMBOL     (125),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (4),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_006 (
		.in_clk            (emif_s10_ddr4_c_emif_usr_clk_clk),                                        //   input,    width = 1,        in_clk.clk
		.in_reset          (emif_s10_ddr4_c_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (iopll_0_outclk1_clk),                                                     //   input,    width = 1,       out_clk.clk
		.out_reset         (address_span_extender_ddr4_reset_reset_bridge_in_reset_reset),            //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_002_src0_ready),                                                //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_002_src0_valid),                                                //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_002_src0_startofpacket),                                        //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_002_src0_endofpacket),                                          //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_002_src0_channel),                                              //   input,    width = 4,              .channel
		.in_data           (rsp_demux_002_src0_data),                                                 //   input,  width = 125,              .data
		.out_ready         (crosser_006_out_ready),                                                   //   input,    width = 1,           out.ready
		.out_valid         (crosser_006_out_valid),                                                   //  output,    width = 1,              .valid
		.out_startofpacket (crosser_006_out_startofpacket),                                           //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_006_out_endofpacket),                                             //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_006_out_channel),                                                 //  output,    width = 4,              .channel
		.out_data          (crosser_006_out_data),                                                    //  output,  width = 125,              .data
		.in_empty          (1'b0),                                                                    // (terminated),                             
		.in_error          (1'b0),                                                                    // (terminated),                             
		.out_empty         (),                                                                        // (terminated),                             
		.out_error         ()                                                                         // (terminated),                             
	);

	DE10_Pro_QSYS_altera_avalon_st_handshake_clock_crosser_191_ukeujci #(
		.DATA_WIDTH          (125),
		.BITS_PER_SYMBOL     (125),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (4),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_007 (
		.in_clk            (emif_s10_ddr4_d_emif_usr_clk_clk),                                        //   input,    width = 1,        in_clk.clk
		.in_reset          (emif_s10_ddr4_d_ctrl_amm_0_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (iopll_0_outclk1_clk),                                                     //   input,    width = 1,       out_clk.clk
		.out_reset         (address_span_extender_ddr4_reset_reset_bridge_in_reset_reset),            //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_003_src0_ready),                                                //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_003_src0_valid),                                                //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_003_src0_startofpacket),                                        //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_003_src0_endofpacket),                                          //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_003_src0_channel),                                              //   input,    width = 4,              .channel
		.in_data           (rsp_demux_003_src0_data),                                                 //   input,  width = 125,              .data
		.out_ready         (crosser_007_out_ready),                                                   //   input,    width = 1,           out.ready
		.out_valid         (crosser_007_out_valid),                                                   //  output,    width = 1,              .valid
		.out_startofpacket (crosser_007_out_startofpacket),                                           //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_007_out_endofpacket),                                             //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_007_out_channel),                                                 //  output,    width = 4,              .channel
		.out_data          (crosser_007_out_data),                                                    //  output,  width = 125,              .data
		.in_empty          (1'b0),                                                                    // (terminated),                             
		.in_error          (1'b0),                                                                    // (terminated),                             
		.out_empty         (),                                                                        // (terminated),                             
		.out_error         ()                                                                         // (terminated),                             
	);

endmodule
