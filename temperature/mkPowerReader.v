//
// Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
//
// On Tue Nov 10 10:14:54 GMT 2020
//
//
// Ports:
// Name                         I/O  size props
// get_power_min                  O    24 reg
// get_power_max                  O    24 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// POWER_I2C_SDA                 IO     1 inout
// POWER_I2C_SCL                 IO     1 inout
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkPowerReader(CLK,
		     RST_N,

		     .POWER_I2C_SDA(power12_power_tSDA$IO),
		     .POWER_I2C_SCL(power12_power_tSCL$IO),

		     get_power_min,

		     get_power_max);
  input  CLK;
  input  RST_N;

  inout  power12_power_tSDA$IO;
  inout  power12_power_tSCL$IO;

  // value method get_power_min
  output [23 : 0] get_power_min;

  // value method get_power_max
  output [23 : 0] get_power_max;

  // signals for module outputs
  wire [23 : 0] get_power_max, get_power_min;

  // inlined wires
  wire main_start_wire$whas, main_state_set_pw$whas;

  // register cnt
  reg [31 : 0] cnt;
  wire [31 : 0] cnt$D_IN;
  wire cnt$EN;

  // register cur_power_max
  reg [23 : 0] cur_power_max;
  reg [23 : 0] cur_power_max$D_IN;
  wire cur_power_max$EN;

  // register cur_power_min
  reg [23 : 0] cur_power_min;
  reg [23 : 0] cur_power_min$D_IN;
  wire cur_power_min$EN;

  // register main_start_reg
  reg main_start_reg;
  wire main_start_reg$D_IN, main_start_reg$EN;

  // register main_start_reg_1
  reg main_start_reg_1;
  wire main_start_reg_1$D_IN, main_start_reg_1$EN;

  // register main_state_can_overlap
  reg main_state_can_overlap;
  wire main_state_can_overlap$D_IN, main_state_can_overlap$EN;

  // register main_state_fired
  reg main_state_fired;
  wire main_state_fired$D_IN, main_state_fired$EN;

  // register main_state_mkFSMstate
  reg [4 : 0] main_state_mkFSMstate;
  reg [4 : 0] main_state_mkFSMstate$D_IN;
  wire main_state_mkFSMstate$EN;

  // register power12_power_rAddress
  reg [7 : 0] power12_power_rAddress;
  wire [7 : 0] power12_power_rAddress$D_IN;
  wire power12_power_rAddress$EN;

  // register power12_power_rOutEn
  reg power12_power_rOutEn;
  wire power12_power_rOutEn$D_IN, power12_power_rOutEn$EN;

  // register power12_power_rSCL
  reg power12_power_rSCL;
  wire power12_power_rSCL$D_IN, power12_power_rSCL$EN;

  // register power12_power_rSDA
  reg power12_power_rSDA;
  wire power12_power_rSDA$D_IN, power12_power_rSDA$EN;

  // register power12_power_rSlaveAddr
  reg [6 : 0] power12_power_rSlaveAddr;
  wire [6 : 0] power12_power_rSlaveAddr$D_IN;
  wire power12_power_rSlaveAddr$EN;

  // register power12_power_rState
  reg power12_power_rState;
  wire power12_power_rState$D_IN, power12_power_rState$EN;

  // register power12_power_rWrite
  reg power12_power_rWrite;
  wire power12_power_rWrite$D_IN, power12_power_rWrite$EN;

  // register power12_power_rWriteData
  reg [7 : 0] power12_power_rWriteData;
  wire [7 : 0] power12_power_rWriteData$D_IN;
  wire power12_power_rWriteData$EN;

  // register power12_power_vrReadData_0
  reg power12_power_vrReadData_0;
  wire power12_power_vrReadData_0$D_IN, power12_power_vrReadData_0$EN;

  // register power12_power_vrReadData_1
  reg power12_power_vrReadData_1;
  wire power12_power_vrReadData_1$D_IN, power12_power_vrReadData_1$EN;

  // register power12_power_vrReadData_2
  reg power12_power_vrReadData_2;
  wire power12_power_vrReadData_2$D_IN, power12_power_vrReadData_2$EN;

  // register power12_power_vrReadData_3
  reg power12_power_vrReadData_3;
  wire power12_power_vrReadData_3$D_IN, power12_power_vrReadData_3$EN;

  // register power12_power_vrReadData_4
  reg power12_power_vrReadData_4;
  wire power12_power_vrReadData_4$D_IN, power12_power_vrReadData_4$EN;

  // register power12_power_vrReadData_5
  reg power12_power_vrReadData_5;
  wire power12_power_vrReadData_5$D_IN, power12_power_vrReadData_5$EN;

  // register power12_power_vrReadData_6
  reg power12_power_vrReadData_6;
  wire power12_power_vrReadData_6$D_IN, power12_power_vrReadData_6$EN;

  // register power12_power_vrReadData_7
  reg power12_power_vrReadData_7;
  wire power12_power_vrReadData_7$D_IN, power12_power_vrReadData_7$EN;

  // ports of submodule power12_power_fRequest
  reg [23 : 0] power12_power_fRequest$D_IN;
  wire [23 : 0] power12_power_fRequest$D_OUT;
  wire power12_power_fRequest$CLR,
       power12_power_fRequest$DEQ,
       power12_power_fRequest$EMPTY_N,
       power12_power_fRequest$ENQ,
       power12_power_fRequest$FULL_N;

  // ports of submodule power12_power_fResponse
  wire [7 : 0] power12_power_fResponse$D_IN, power12_power_fResponse$D_OUT;
  wire power12_power_fResponse$CLR,
       power12_power_fResponse$DEQ,
       power12_power_fResponse$EMPTY_N,
       power12_power_fResponse$ENQ,
       power12_power_fResponse$FULL_N;

  // ports of submodule power12_power_rPlayIndex
  wire [9 : 0] power12_power_rPlayIndex$DATA_A,
	       power12_power_rPlayIndex$DATA_B,
	       power12_power_rPlayIndex$DATA_C,
	       power12_power_rPlayIndex$DATA_F,
	       power12_power_rPlayIndex$Q_OUT;
  wire power12_power_rPlayIndex$ADDA,
       power12_power_rPlayIndex$ADDB,
       power12_power_rPlayIndex$SETC,
       power12_power_rPlayIndex$SETF;

  // ports of submodule power12_power_rPrescaler
  wire [31 : 0] power12_power_rPrescaler$DATA_A,
		power12_power_rPrescaler$DATA_B,
		power12_power_rPrescaler$DATA_C,
		power12_power_rPrescaler$DATA_F,
		power12_power_rPrescaler$Q_OUT;
  wire power12_power_rPrescaler$ADDA,
       power12_power_rPrescaler$ADDB,
       power12_power_rPrescaler$SETC,
       power12_power_rPrescaler$SETF;

  // ports of submodule power12_power_tSCL
  wire power12_power_tSCL$IO;

  // ports of submodule power12_power_tSDA
  wire power12_power_tSDA$IO, power12_power_tSDA$O;

  // rule scheduling signals
  wire WILL_FIRE_RL_main_action_l123c14,
       WILL_FIRE_RL_main_action_l132c18,
       WILL_FIRE_RL_main_action_l25c27,
       WILL_FIRE_RL_main_action_l26c27,
       WILL_FIRE_RL_main_action_l30c27,
       WILL_FIRE_RL_main_action_l34c27,
       WILL_FIRE_RL_main_action_l38c27,
       WILL_FIRE_RL_main_action_l39c27,
       WILL_FIRE_RL_main_action_l40c27,
       WILL_FIRE_RL_main_action_l41c27,
       WILL_FIRE_RL_main_action_l42c27,
       WILL_FIRE_RL_main_action_l43c27,
       WILL_FIRE_RL_main_action_l48c26,
       WILL_FIRE_RL_main_action_l49c13,
       WILL_FIRE_RL_main_action_l53c26,
       WILL_FIRE_RL_main_action_l54c13,
       WILL_FIRE_RL_main_action_l58c26,
       WILL_FIRE_RL_main_action_l59c13,
       WILL_FIRE_RL_main_action_l68c26,
       WILL_FIRE_RL_main_action_l69c13,
       WILL_FIRE_RL_main_action_l73c26,
       WILL_FIRE_RL_main_action_l74c13,
       WILL_FIRE_RL_main_action_l78c26,
       WILL_FIRE_RL_main_action_l79c13,
       WILL_FIRE_RL_main_fsm_start,
       WILL_FIRE_RL_power12_power_done_read,
       WILL_FIRE_RL_power12_power_done_write,
       WILL_FIRE_RL_power12_power_running_read,
       WILL_FIRE_RL_power12_power_running_write;

  // inputs to muxes for submodule ports
  wire [31 : 0] MUX_cnt$write_1__VAL_1;
  wire [23 : 0] MUX_cur_power_max$write_1__VAL_1,
		MUX_cur_power_max$write_1__VAL_2,
		MUX_cur_power_max$write_1__VAL_3,
		MUX_cur_power_min$write_1__VAL_1,
		MUX_cur_power_min$write_1__VAL_2,
		MUX_cur_power_min$write_1__VAL_3;
  wire MUX_power12_power_fRequest$enq_1__SEL_7,
       MUX_power12_power_rOutEn$write_1__SEL_1,
       MUX_power12_power_rOutEn$write_1__SEL_2,
       MUX_power12_power_rOutEn$write_1__VAL_1,
       MUX_power12_power_rOutEn$write_1__VAL_2,
       MUX_power12_power_rSCL$write_1__VAL_1,
       MUX_power12_power_rSCL$write_1__VAL_2,
       MUX_power12_power_rSDA$write_1__VAL_1,
       MUX_power12_power_rSDA$write_1__VAL_2,
       MUX_power12_power_rState$write_1__SEL_1,
       MUX_power12_power_rState$write_1__SEL_2;

  // remaining internal signals
  wire [116 : 0] _130549178157447095380771276656813203__q5,
		 _166153498389916941667817601160445959__q3,
		 _306783360__q1,
		 wRdData__h1655;
  wire [86 : 0] _121583396715528419856163987__q4,
		_154742503901866210315206599__q2,
		wWrData__h1659;
  wire [2 : 0] a0__h1644,
	       a1__h1643,
	       a2__h1642,
	       a3__h1641,
	       a4__h1640,
	       a5__h1639,
	       a6__h1638,
	       a7__h1637,
	       d0__h1653,
	       d1__h1652,
	       d2__h1651,
	       d3__h1650,
	       d4__h1649,
	       d5__h1648,
	       d6__h1647,
	       d7__h1646,
	       s0__h1635,
	       s1__h1634,
	       s2__h1633,
	       s3__h1632,
	       s4__h1631,
	       s5__h1630,
	       s6__h1629;
  wire _306783360_BIT_power12_power_rPlayIndex_value___ETC___d108,
       main_abort_whas__35_AND_main_abort_wget__36_37_ETC___d261;

  // value method get_power_min
  assign get_power_min = cur_power_min ;

  // value method get_power_max
  assign get_power_max = cur_power_max ;

  // submodule power12_power_fRequest
  SizedFIFO #(.p1width(32'd24),
	      .p2depth(32'd16),
	      .p3cntr_width(32'd4),
	      .guarded(32'd1)) power12_power_fRequest(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(power12_power_fRequest$D_IN),
						      .ENQ(power12_power_fRequest$ENQ),
						      .DEQ(power12_power_fRequest$DEQ),
						      .CLR(power12_power_fRequest$CLR),
						      .D_OUT(power12_power_fRequest$D_OUT),
						      .FULL_N(power12_power_fRequest$FULL_N),
						      .EMPTY_N(power12_power_fRequest$EMPTY_N));

  // submodule power12_power_fResponse
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd16),
	      .p3cntr_width(32'd4),
	      .guarded(32'd1)) power12_power_fResponse(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(power12_power_fResponse$D_IN),
						       .ENQ(power12_power_fResponse$ENQ),
						       .DEQ(power12_power_fResponse$DEQ),
						       .CLR(power12_power_fResponse$CLR),
						       .D_OUT(power12_power_fResponse$D_OUT),
						       .FULL_N(power12_power_fResponse$FULL_N),
						       .EMPTY_N(power12_power_fResponse$EMPTY_N));

  // submodule power12_power_rPlayIndex
  Counter #(.width(32'd10), .init(10'd0)) power12_power_rPlayIndex(.CLK(CLK),
								   .RST(RST_N),
								   .DATA_A(power12_power_rPlayIndex$DATA_A),
								   .DATA_B(power12_power_rPlayIndex$DATA_B),
								   .DATA_C(power12_power_rPlayIndex$DATA_C),
								   .DATA_F(power12_power_rPlayIndex$DATA_F),
								   .ADDA(power12_power_rPlayIndex$ADDA),
								   .ADDB(power12_power_rPlayIndex$ADDB),
								   .SETC(power12_power_rPlayIndex$SETC),
								   .SETF(power12_power_rPlayIndex$SETF),
								   .Q_OUT(power12_power_rPlayIndex$Q_OUT));

  // submodule power12_power_rPrescaler
  Counter #(.width(32'd32),
	    .init(32'd125)) power12_power_rPrescaler(.CLK(CLK),
						     .RST(RST_N),
						     .DATA_A(power12_power_rPrescaler$DATA_A),
						     .DATA_B(power12_power_rPrescaler$DATA_B),
						     .DATA_C(power12_power_rPrescaler$DATA_C),
						     .DATA_F(power12_power_rPrescaler$DATA_F),
						     .ADDA(power12_power_rPrescaler$ADDA),
						     .ADDB(power12_power_rPrescaler$ADDB),
						     .SETC(power12_power_rPrescaler$SETC),
						     .SETF(power12_power_rPrescaler$SETF),
						     .Q_OUT(power12_power_rPrescaler$Q_OUT));

  // submodule power12_power_tSCL
  TriState #(.width(32'd1)) power12_power_tSCL(.I(power12_power_rSCL),
					       .OE(1'd1),
					       .O(),
					       .IO(power12_power_tSCL$IO));

  // submodule power12_power_tSDA
  TriState #(.width(32'd1)) power12_power_tSDA(.I(power12_power_rSDA),
					       .OE(power12_power_rOutEn),
					       .O(power12_power_tSDA$O),
					       .IO(power12_power_tSDA$IO));

  // rule RL_power12_power_running_write
  assign WILL_FIRE_RL_power12_power_running_write =
	     power12_power_rState && power12_power_rWrite &&
	     power12_power_rPrescaler$Q_OUT == 32'd0 &&
	     power12_power_rPlayIndex$Q_OUT != 10'd0 ;

  // rule RL_power12_power_running_read
  assign WILL_FIRE_RL_power12_power_running_read =
	     power12_power_rState && !power12_power_rWrite &&
	     power12_power_rPrescaler$Q_OUT == 32'd0 &&
	     power12_power_rPlayIndex$Q_OUT != 10'd0 ;

  // rule RL_power12_power_done_write
  assign WILL_FIRE_RL_power12_power_done_write =
	     power12_power_rState && power12_power_rWrite &&
	     power12_power_rPrescaler$Q_OUT == 32'd0 &&
	     power12_power_rPlayIndex$Q_OUT == 10'd0 ;

  // rule RL_power12_power_done_read
  assign WILL_FIRE_RL_power12_power_done_read =
	     power12_power_fResponse$FULL_N && power12_power_rState &&
	     !power12_power_rWrite &&
	     power12_power_rPrescaler$Q_OUT == 32'd0 &&
	     power12_power_rPlayIndex$Q_OUT == 10'd0 ;

  // rule RL_main_action_l25c27
  assign WILL_FIRE_RL_main_action_l25c27 =
	     power12_power_fRequest$FULL_N && main_state_mkFSMstate == 5'd1 ;

  // rule RL_main_action_l26c27
  assign WILL_FIRE_RL_main_action_l26c27 =
	     power12_power_fRequest$FULL_N && main_state_mkFSMstate == 5'd2 ;

  // rule RL_main_action_l30c27
  assign WILL_FIRE_RL_main_action_l30c27 =
	     power12_power_fRequest$FULL_N &&
	     (main_state_mkFSMstate == 5'd3 ||
	      main_state_mkFSMstate == 5'd25) ;

  // rule RL_main_action_l48c26
  assign WILL_FIRE_RL_main_action_l48c26 =
	     power12_power_fRequest$FULL_N && main_state_mkFSMstate == 5'd4 ;

  // rule RL_main_action_l49c13
  assign WILL_FIRE_RL_main_action_l49c13 =
	     power12_power_fResponse$EMPTY_N &&
	     main_state_mkFSMstate == 5'd5 ;

  // rule RL_main_action_l53c26
  assign WILL_FIRE_RL_main_action_l53c26 =
	     power12_power_fRequest$FULL_N && main_state_mkFSMstate == 5'd6 ;

  // rule RL_main_action_l54c13
  assign WILL_FIRE_RL_main_action_l54c13 =
	     power12_power_fResponse$EMPTY_N &&
	     main_state_mkFSMstate == 5'd7 ;

  // rule RL_main_action_l58c26
  assign WILL_FIRE_RL_main_action_l58c26 =
	     power12_power_fRequest$FULL_N && main_state_mkFSMstate == 5'd8 ;

  // rule RL_main_action_l59c13
  assign WILL_FIRE_RL_main_action_l59c13 =
	     power12_power_fResponse$EMPTY_N &&
	     main_state_mkFSMstate == 5'd9 ;

  // rule RL_main_action_l68c26
  assign WILL_FIRE_RL_main_action_l68c26 =
	     power12_power_fRequest$FULL_N && main_state_mkFSMstate == 5'd10 ;

  // rule RL_main_action_l69c13
  assign WILL_FIRE_RL_main_action_l69c13 =
	     power12_power_fResponse$EMPTY_N &&
	     main_state_mkFSMstate == 5'd11 ;

  // rule RL_main_action_l73c26
  assign WILL_FIRE_RL_main_action_l73c26 =
	     power12_power_fRequest$FULL_N && main_state_mkFSMstate == 5'd12 ;

  // rule RL_main_action_l74c13
  assign WILL_FIRE_RL_main_action_l74c13 =
	     power12_power_fResponse$EMPTY_N &&
	     main_state_mkFSMstate == 5'd13 ;

  // rule RL_main_action_l78c26
  assign WILL_FIRE_RL_main_action_l78c26 =
	     power12_power_fRequest$FULL_N && main_state_mkFSMstate == 5'd14 ;

  // rule RL_main_action_l79c13
  assign WILL_FIRE_RL_main_action_l79c13 =
	     power12_power_fResponse$EMPTY_N &&
	     main_state_mkFSMstate == 5'd15 ;

  // rule RL_main_action_l38c27
  assign WILL_FIRE_RL_main_action_l38c27 =
	     power12_power_fRequest$FULL_N && main_state_mkFSMstate == 5'd16 ;

  // rule RL_main_action_l39c27
  assign WILL_FIRE_RL_main_action_l39c27 =
	     power12_power_fRequest$FULL_N && main_state_mkFSMstate == 5'd17 ;

  // rule RL_main_action_l40c27
  assign WILL_FIRE_RL_main_action_l40c27 =
	     power12_power_fRequest$FULL_N && main_state_mkFSMstate == 5'd18 ;

  // rule RL_main_action_l41c27
  assign WILL_FIRE_RL_main_action_l41c27 =
	     power12_power_fRequest$FULL_N && main_state_mkFSMstate == 5'd19 ;

  // rule RL_main_action_l42c27
  assign WILL_FIRE_RL_main_action_l42c27 =
	     power12_power_fRequest$FULL_N && main_state_mkFSMstate == 5'd20 ;

  // rule RL_main_action_l43c27
  assign WILL_FIRE_RL_main_action_l43c27 =
	     power12_power_fRequest$FULL_N && main_state_mkFSMstate == 5'd21 ;

  // rule RL_main_action_l34c27
  assign WILL_FIRE_RL_main_action_l34c27 =
	     power12_power_fRequest$FULL_N && main_state_mkFSMstate == 5'd22 ;

  // rule RL_main_action_l132c18
  assign WILL_FIRE_RL_main_action_l132c18 =
	     cnt == 32'd0 && main_state_mkFSMstate == 5'd24 ;

  // rule RL_main_fsm_start
  assign WILL_FIRE_RL_main_fsm_start =
	     main_abort_whas__35_AND_main_abort_wget__36_37_ETC___d261 &&
	     main_start_reg ;

  // rule RL_main_action_l123c14
  assign WILL_FIRE_RL_main_action_l123c14 =
	     cnt == 32'd0 && main_start_wire$whas &&
	     main_state_mkFSMstate == 5'd0 ;

  // inputs to muxes for submodule ports
  assign MUX_power12_power_fRequest$enq_1__SEL_7 =
	     WILL_FIRE_RL_main_action_l34c27 ||
	     WILL_FIRE_RL_main_action_l25c27 ;
  assign MUX_power12_power_rOutEn$write_1__SEL_1 =
	     WILL_FIRE_RL_power12_power_done_write ||
	     WILL_FIRE_RL_power12_power_running_write ;
  assign MUX_power12_power_rOutEn$write_1__SEL_2 =
	     WILL_FIRE_RL_power12_power_done_read ||
	     WILL_FIRE_RL_power12_power_running_read ;
  assign MUX_power12_power_rState$write_1__SEL_1 =
	     WILL_FIRE_RL_power12_power_done_read ||
	     WILL_FIRE_RL_power12_power_done_write ;
  assign MUX_power12_power_rState$write_1__SEL_2 =
	     power12_power_fRequest$EMPTY_N && !power12_power_rState ;
  assign MUX_cnt$write_1__VAL_1 = cnt - 32'd1 ;
  assign MUX_cur_power_max$write_1__VAL_1 =
	     { cur_power_max[23:16],
	       power12_power_fResponse$D_OUT,
	       cur_power_max[7:0] } ;
  assign MUX_cur_power_max$write_1__VAL_2 =
	     { power12_power_fResponse$D_OUT, cur_power_max[15:0] } ;
  assign MUX_cur_power_max$write_1__VAL_3 =
	     { cur_power_max[23:8], power12_power_fResponse$D_OUT } ;
  assign MUX_cur_power_min$write_1__VAL_1 =
	     { cur_power_min[23:16],
	       power12_power_fResponse$D_OUT,
	       cur_power_min[7:0] } ;
  assign MUX_cur_power_min$write_1__VAL_2 =
	     { cur_power_min[23:8], power12_power_fResponse$D_OUT } ;
  assign MUX_cur_power_min$write_1__VAL_3 =
	     { power12_power_fResponse$D_OUT, cur_power_min[15:0] } ;
  assign MUX_power12_power_rOutEn$write_1__VAL_1 =
	     _154742503901866210315206599__q2[power12_power_rPlayIndex$Q_OUT[6:0]] ;
  assign MUX_power12_power_rOutEn$write_1__VAL_2 =
	     _166153498389916941667817601160445959__q3[power12_power_rPlayIndex$Q_OUT[6:0]] ;
  assign MUX_power12_power_rSCL$write_1__VAL_1 =
	     _121583396715528419856163987__q4[power12_power_rPlayIndex$Q_OUT[6:0]] ;
  assign MUX_power12_power_rSCL$write_1__VAL_2 =
	     _130549178157447095380771276656813203__q5[power12_power_rPlayIndex$Q_OUT[6:0]] ;
  assign MUX_power12_power_rSDA$write_1__VAL_1 =
	     wRdData__h1655[power12_power_rPlayIndex$Q_OUT[6:0]] ;
  assign MUX_power12_power_rSDA$write_1__VAL_2 =
	     wWrData__h1659[power12_power_rPlayIndex$Q_OUT[6:0]] ;

  // inlined wires
  assign main_start_wire$whas =
	     WILL_FIRE_RL_main_fsm_start ||
	     main_start_reg_1 && !main_state_fired ;
  assign main_state_set_pw$whas =
	     WILL_FIRE_RL_main_action_l132c18 ||
	     main_state_mkFSMstate == 5'd23 ||
	     WILL_FIRE_RL_main_action_l34c27 ||
	     WILL_FIRE_RL_main_action_l43c27 ||
	     WILL_FIRE_RL_main_action_l42c27 ||
	     WILL_FIRE_RL_main_action_l41c27 ||
	     WILL_FIRE_RL_main_action_l40c27 ||
	     WILL_FIRE_RL_main_action_l39c27 ||
	     WILL_FIRE_RL_main_action_l38c27 ||
	     WILL_FIRE_RL_main_action_l79c13 ||
	     WILL_FIRE_RL_main_action_l78c26 ||
	     WILL_FIRE_RL_main_action_l74c13 ||
	     WILL_FIRE_RL_main_action_l73c26 ||
	     WILL_FIRE_RL_main_action_l69c13 ||
	     WILL_FIRE_RL_main_action_l68c26 ||
	     WILL_FIRE_RL_main_action_l59c13 ||
	     WILL_FIRE_RL_main_action_l58c26 ||
	     WILL_FIRE_RL_main_action_l54c13 ||
	     WILL_FIRE_RL_main_action_l53c26 ||
	     WILL_FIRE_RL_main_action_l49c13 ||
	     WILL_FIRE_RL_main_action_l48c26 ||
	     WILL_FIRE_RL_main_action_l30c27 ||
	     WILL_FIRE_RL_main_action_l26c27 ||
	     WILL_FIRE_RL_main_action_l25c27 ||
	     WILL_FIRE_RL_main_action_l123c14 ;

  // register cnt
  assign cnt$D_IN = (cnt != 32'd0) ? MUX_cnt$write_1__VAL_1 : 32'd50000000 ;
  assign cnt$EN =
	     cnt != 32'd0 || cnt == 32'd0 && main_state_mkFSMstate == 5'd23 ;

  // register cur_power_max
  always@(WILL_FIRE_RL_main_action_l74c13 or
	  MUX_cur_power_max$write_1__VAL_1 or
	  WILL_FIRE_RL_main_action_l69c13 or
	  MUX_cur_power_max$write_1__VAL_2 or
	  WILL_FIRE_RL_main_action_l79c13 or MUX_cur_power_max$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_main_action_l74c13:
	  cur_power_max$D_IN = MUX_cur_power_max$write_1__VAL_1;
      WILL_FIRE_RL_main_action_l69c13:
	  cur_power_max$D_IN = MUX_cur_power_max$write_1__VAL_2;
      WILL_FIRE_RL_main_action_l79c13:
	  cur_power_max$D_IN = MUX_cur_power_max$write_1__VAL_3;
      default: cur_power_max$D_IN =
		   24'b101010101010101010101010 /* unspecified value */ ;
    endcase
  end
  assign cur_power_max$EN =
	     WILL_FIRE_RL_main_action_l74c13 ||
	     WILL_FIRE_RL_main_action_l69c13 ||
	     WILL_FIRE_RL_main_action_l79c13 ;

  // register cur_power_min
  always@(WILL_FIRE_RL_main_action_l54c13 or
	  MUX_cur_power_min$write_1__VAL_1 or
	  WILL_FIRE_RL_main_action_l59c13 or
	  MUX_cur_power_min$write_1__VAL_2 or
	  WILL_FIRE_RL_main_action_l49c13 or MUX_cur_power_min$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_main_action_l54c13:
	  cur_power_min$D_IN = MUX_cur_power_min$write_1__VAL_1;
      WILL_FIRE_RL_main_action_l59c13:
	  cur_power_min$D_IN = MUX_cur_power_min$write_1__VAL_2;
      WILL_FIRE_RL_main_action_l49c13:
	  cur_power_min$D_IN = MUX_cur_power_min$write_1__VAL_3;
      default: cur_power_min$D_IN =
		   24'b101010101010101010101010 /* unspecified value */ ;
    endcase
  end
  assign cur_power_min$EN =
	     WILL_FIRE_RL_main_action_l54c13 ||
	     WILL_FIRE_RL_main_action_l59c13 ||
	     WILL_FIRE_RL_main_action_l49c13 ;

  // register main_start_reg
  assign main_start_reg$D_IN = !WILL_FIRE_RL_main_fsm_start ;
  assign main_start_reg$EN =
	     WILL_FIRE_RL_main_fsm_start ||
	     main_abort_whas__35_AND_main_abort_wget__36_37_ETC___d261 &&
	     !main_start_reg ;

  // register main_start_reg_1
  assign main_start_reg_1$D_IN = main_start_wire$whas ;
  assign main_start_reg_1$EN = 1'd1 ;

  // register main_state_can_overlap
  assign main_state_can_overlap$D_IN =
	     main_state_set_pw$whas || main_state_can_overlap ;
  assign main_state_can_overlap$EN = 1'd1 ;

  // register main_state_fired
  assign main_state_fired$D_IN = main_state_set_pw$whas ;
  assign main_state_fired$EN = 1'd1 ;

  // register main_state_mkFSMstate
  always@(WILL_FIRE_RL_main_action_l123c14 or
	  WILL_FIRE_RL_main_action_l25c27 or
	  WILL_FIRE_RL_main_action_l26c27 or
	  WILL_FIRE_RL_main_action_l30c27 or
	  WILL_FIRE_RL_main_action_l48c26 or
	  WILL_FIRE_RL_main_action_l49c13 or
	  WILL_FIRE_RL_main_action_l53c26 or
	  WILL_FIRE_RL_main_action_l54c13 or
	  WILL_FIRE_RL_main_action_l58c26 or
	  WILL_FIRE_RL_main_action_l59c13 or
	  WILL_FIRE_RL_main_action_l68c26 or
	  WILL_FIRE_RL_main_action_l69c13 or
	  WILL_FIRE_RL_main_action_l73c26 or
	  WILL_FIRE_RL_main_action_l74c13 or
	  WILL_FIRE_RL_main_action_l78c26 or
	  WILL_FIRE_RL_main_action_l79c13 or
	  WILL_FIRE_RL_main_action_l38c27 or
	  WILL_FIRE_RL_main_action_l39c27 or
	  WILL_FIRE_RL_main_action_l40c27 or
	  WILL_FIRE_RL_main_action_l41c27 or
	  WILL_FIRE_RL_main_action_l42c27 or
	  WILL_FIRE_RL_main_action_l43c27 or
	  WILL_FIRE_RL_main_action_l34c27 or
	  main_state_mkFSMstate or WILL_FIRE_RL_main_action_l132c18)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_main_action_l123c14: main_state_mkFSMstate$D_IN = 5'd1;
      WILL_FIRE_RL_main_action_l25c27: main_state_mkFSMstate$D_IN = 5'd2;
      WILL_FIRE_RL_main_action_l26c27: main_state_mkFSMstate$D_IN = 5'd3;
      WILL_FIRE_RL_main_action_l30c27: main_state_mkFSMstate$D_IN = 5'd4;
      WILL_FIRE_RL_main_action_l48c26: main_state_mkFSMstate$D_IN = 5'd5;
      WILL_FIRE_RL_main_action_l49c13: main_state_mkFSMstate$D_IN = 5'd6;
      WILL_FIRE_RL_main_action_l53c26: main_state_mkFSMstate$D_IN = 5'd7;
      WILL_FIRE_RL_main_action_l54c13: main_state_mkFSMstate$D_IN = 5'd8;
      WILL_FIRE_RL_main_action_l58c26: main_state_mkFSMstate$D_IN = 5'd9;
      WILL_FIRE_RL_main_action_l59c13: main_state_mkFSMstate$D_IN = 5'd10;
      WILL_FIRE_RL_main_action_l68c26: main_state_mkFSMstate$D_IN = 5'd11;
      WILL_FIRE_RL_main_action_l69c13: main_state_mkFSMstate$D_IN = 5'd12;
      WILL_FIRE_RL_main_action_l73c26: main_state_mkFSMstate$D_IN = 5'd13;
      WILL_FIRE_RL_main_action_l74c13: main_state_mkFSMstate$D_IN = 5'd14;
      WILL_FIRE_RL_main_action_l78c26: main_state_mkFSMstate$D_IN = 5'd15;
      WILL_FIRE_RL_main_action_l79c13: main_state_mkFSMstate$D_IN = 5'd16;
      WILL_FIRE_RL_main_action_l38c27: main_state_mkFSMstate$D_IN = 5'd17;
      WILL_FIRE_RL_main_action_l39c27: main_state_mkFSMstate$D_IN = 5'd18;
      WILL_FIRE_RL_main_action_l40c27: main_state_mkFSMstate$D_IN = 5'd19;
      WILL_FIRE_RL_main_action_l41c27: main_state_mkFSMstate$D_IN = 5'd20;
      WILL_FIRE_RL_main_action_l42c27: main_state_mkFSMstate$D_IN = 5'd21;
      WILL_FIRE_RL_main_action_l43c27: main_state_mkFSMstate$D_IN = 5'd22;
      WILL_FIRE_RL_main_action_l34c27: main_state_mkFSMstate$D_IN = 5'd23;
      main_state_mkFSMstate == 5'd23: main_state_mkFSMstate$D_IN = 5'd24;
      WILL_FIRE_RL_main_action_l132c18: main_state_mkFSMstate$D_IN = 5'd25;
      default: main_state_mkFSMstate$D_IN = 5'b01010 /* unspecified value */ ;
    endcase
  end
  assign main_state_mkFSMstate$EN =
	     WILL_FIRE_RL_main_action_l123c14 ||
	     WILL_FIRE_RL_main_action_l25c27 ||
	     WILL_FIRE_RL_main_action_l26c27 ||
	     WILL_FIRE_RL_main_action_l30c27 ||
	     WILL_FIRE_RL_main_action_l48c26 ||
	     WILL_FIRE_RL_main_action_l49c13 ||
	     WILL_FIRE_RL_main_action_l53c26 ||
	     WILL_FIRE_RL_main_action_l54c13 ||
	     WILL_FIRE_RL_main_action_l58c26 ||
	     WILL_FIRE_RL_main_action_l59c13 ||
	     WILL_FIRE_RL_main_action_l68c26 ||
	     WILL_FIRE_RL_main_action_l69c13 ||
	     WILL_FIRE_RL_main_action_l73c26 ||
	     WILL_FIRE_RL_main_action_l74c13 ||
	     WILL_FIRE_RL_main_action_l78c26 ||
	     WILL_FIRE_RL_main_action_l79c13 ||
	     WILL_FIRE_RL_main_action_l38c27 ||
	     WILL_FIRE_RL_main_action_l39c27 ||
	     WILL_FIRE_RL_main_action_l40c27 ||
	     WILL_FIRE_RL_main_action_l41c27 ||
	     WILL_FIRE_RL_main_action_l42c27 ||
	     WILL_FIRE_RL_main_action_l43c27 ||
	     WILL_FIRE_RL_main_action_l34c27 ||
	     main_state_mkFSMstate == 5'd23 ||
	     WILL_FIRE_RL_main_action_l132c18 ;

  // register power12_power_rAddress
  assign power12_power_rAddress$D_IN = power12_power_fRequest$D_OUT[15:8] ;
  assign power12_power_rAddress$EN = MUX_power12_power_rState$write_1__SEL_2 ;

  // register power12_power_rOutEn
  assign power12_power_rOutEn$D_IN =
	     MUX_power12_power_rOutEn$write_1__SEL_1 ?
	       MUX_power12_power_rOutEn$write_1__VAL_1 :
	       MUX_power12_power_rOutEn$write_1__VAL_2 ;
  assign power12_power_rOutEn$EN =
	     WILL_FIRE_RL_power12_power_done_write ||
	     WILL_FIRE_RL_power12_power_running_write ||
	     WILL_FIRE_RL_power12_power_done_read ||
	     WILL_FIRE_RL_power12_power_running_read ;

  // register power12_power_rSCL
  assign power12_power_rSCL$D_IN =
	     MUX_power12_power_rOutEn$write_1__SEL_1 ?
	       MUX_power12_power_rSCL$write_1__VAL_1 :
	       MUX_power12_power_rSCL$write_1__VAL_2 ;
  assign power12_power_rSCL$EN =
	     WILL_FIRE_RL_power12_power_done_write ||
	     WILL_FIRE_RL_power12_power_running_write ||
	     WILL_FIRE_RL_power12_power_done_read ||
	     WILL_FIRE_RL_power12_power_running_read ;

  // register power12_power_rSDA
  assign power12_power_rSDA$D_IN =
	     MUX_power12_power_rOutEn$write_1__SEL_2 ?
	       MUX_power12_power_rSDA$write_1__VAL_1 :
	       MUX_power12_power_rSDA$write_1__VAL_2 ;
  assign power12_power_rSDA$EN =
	     WILL_FIRE_RL_power12_power_done_read ||
	     WILL_FIRE_RL_power12_power_running_read ||
	     WILL_FIRE_RL_power12_power_done_write ||
	     WILL_FIRE_RL_power12_power_running_write ;

  // register power12_power_rSlaveAddr
  assign power12_power_rSlaveAddr$D_IN = power12_power_fRequest$D_OUT[22:16] ;
  assign power12_power_rSlaveAddr$EN =
	     MUX_power12_power_rState$write_1__SEL_2 ;

  // register power12_power_rState
  assign power12_power_rState$D_IN =
	     !MUX_power12_power_rState$write_1__SEL_1 ;
  assign power12_power_rState$EN =
	     WILL_FIRE_RL_power12_power_done_read ||
	     WILL_FIRE_RL_power12_power_done_write ||
	     power12_power_fRequest$EMPTY_N && !power12_power_rState ;

  // register power12_power_rWrite
  assign power12_power_rWrite$D_IN = power12_power_fRequest$D_OUT[23] ;
  assign power12_power_rWrite$EN = MUX_power12_power_rState$write_1__SEL_2 ;

  // register power12_power_rWriteData
  assign power12_power_rWriteData$D_IN = power12_power_fRequest$D_OUT[7:0] ;
  assign power12_power_rWriteData$EN =
	     MUX_power12_power_rState$write_1__SEL_2 ;

  // register power12_power_vrReadData_0
  assign power12_power_vrReadData_0$D_IN = power12_power_tSDA$O ;
  assign power12_power_vrReadData_0$EN =
	     WILL_FIRE_RL_power12_power_running_read &&
	     _306783360_BIT_power12_power_rPlayIndex_value___ETC___d108 ;

  // register power12_power_vrReadData_1
  assign power12_power_vrReadData_1$D_IN = power12_power_vrReadData_0 ;
  assign power12_power_vrReadData_1$EN =
	     WILL_FIRE_RL_power12_power_running_read &&
	     _306783360_BIT_power12_power_rPlayIndex_value___ETC___d108 ;

  // register power12_power_vrReadData_2
  assign power12_power_vrReadData_2$D_IN = power12_power_vrReadData_1 ;
  assign power12_power_vrReadData_2$EN =
	     WILL_FIRE_RL_power12_power_running_read &&
	     _306783360_BIT_power12_power_rPlayIndex_value___ETC___d108 ;

  // register power12_power_vrReadData_3
  assign power12_power_vrReadData_3$D_IN = power12_power_vrReadData_2 ;
  assign power12_power_vrReadData_3$EN =
	     WILL_FIRE_RL_power12_power_running_read &&
	     _306783360_BIT_power12_power_rPlayIndex_value___ETC___d108 ;

  // register power12_power_vrReadData_4
  assign power12_power_vrReadData_4$D_IN = power12_power_vrReadData_3 ;
  assign power12_power_vrReadData_4$EN =
	     WILL_FIRE_RL_power12_power_running_read &&
	     _306783360_BIT_power12_power_rPlayIndex_value___ETC___d108 ;

  // register power12_power_vrReadData_5
  assign power12_power_vrReadData_5$D_IN = power12_power_vrReadData_4 ;
  assign power12_power_vrReadData_5$EN =
	     WILL_FIRE_RL_power12_power_running_read &&
	     _306783360_BIT_power12_power_rPlayIndex_value___ETC___d108 ;

  // register power12_power_vrReadData_6
  assign power12_power_vrReadData_6$D_IN = power12_power_vrReadData_5 ;
  assign power12_power_vrReadData_6$EN =
	     WILL_FIRE_RL_power12_power_running_read &&
	     _306783360_BIT_power12_power_rPlayIndex_value___ETC___d108 ;

  // register power12_power_vrReadData_7
  assign power12_power_vrReadData_7$D_IN = power12_power_vrReadData_6 ;
  assign power12_power_vrReadData_7$EN =
	     WILL_FIRE_RL_power12_power_running_read &&
	     _306783360_BIT_power12_power_rPlayIndex_value___ETC___d108 ;

  // submodule power12_power_fRequest
  always@(WILL_FIRE_RL_main_action_l68c26 or
	  WILL_FIRE_RL_main_action_l73c26 or
	  WILL_FIRE_RL_main_action_l78c26 or
	  WILL_FIRE_RL_main_action_l48c26 or
	  WILL_FIRE_RL_main_action_l53c26 or
	  WILL_FIRE_RL_main_action_l58c26 or
	  MUX_power12_power_fRequest$enq_1__SEL_7 or
	  WILL_FIRE_RL_main_action_l30c27 or
	  WILL_FIRE_RL_main_action_l26c27 or
	  WILL_FIRE_RL_main_action_l38c27 or
	  WILL_FIRE_RL_main_action_l39c27 or
	  WILL_FIRE_RL_main_action_l40c27 or
	  WILL_FIRE_RL_main_action_l41c27 or
	  WILL_FIRE_RL_main_action_l42c27 or WILL_FIRE_RL_main_action_l43c27)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_main_action_l68c26:
	  power12_power_fRequest$D_IN = 24'd6948864;
      WILL_FIRE_RL_main_action_l73c26:
	  power12_power_fRequest$D_IN = 24'd6949120;
      WILL_FIRE_RL_main_action_l78c26:
	  power12_power_fRequest$D_IN = 24'd6949376;
      WILL_FIRE_RL_main_action_l48c26:
	  power12_power_fRequest$D_IN = 24'd6949632;
      WILL_FIRE_RL_main_action_l53c26:
	  power12_power_fRequest$D_IN = 24'd6949888;
      WILL_FIRE_RL_main_action_l58c26:
	  power12_power_fRequest$D_IN = 24'd6950144;
      MUX_power12_power_fRequest$enq_1__SEL_7:
	  power12_power_fRequest$D_IN = 24'd15335429;
      WILL_FIRE_RL_main_action_l30c27:
	  power12_power_fRequest$D_IN = 24'd15335445;
      WILL_FIRE_RL_main_action_l26c27:
	  power12_power_fRequest$D_IN = 24'd15335680;
      WILL_FIRE_RL_main_action_l38c27:
	  power12_power_fRequest$D_IN = 24'd15337472;
      WILL_FIRE_RL_main_action_l39c27:
	  power12_power_fRequest$D_IN = 24'd15337728;
      WILL_FIRE_RL_main_action_l40c27:
	  power12_power_fRequest$D_IN = 24'd15337984;
      WILL_FIRE_RL_main_action_l41c27:
	  power12_power_fRequest$D_IN = 24'd15338495;
      WILL_FIRE_RL_main_action_l42c27:
	  power12_power_fRequest$D_IN = 24'd15338751;
      WILL_FIRE_RL_main_action_l43c27:
	  power12_power_fRequest$D_IN = 24'd15339007;
      default: power12_power_fRequest$D_IN =
		   24'b101010101010101010101010 /* unspecified value */ ;
    endcase
  end
  assign power12_power_fRequest$ENQ =
	     WILL_FIRE_RL_main_action_l68c26 ||
	     WILL_FIRE_RL_main_action_l73c26 ||
	     WILL_FIRE_RL_main_action_l78c26 ||
	     WILL_FIRE_RL_main_action_l48c26 ||
	     WILL_FIRE_RL_main_action_l53c26 ||
	     WILL_FIRE_RL_main_action_l58c26 ||
	     WILL_FIRE_RL_main_action_l34c27 ||
	     WILL_FIRE_RL_main_action_l25c27 ||
	     WILL_FIRE_RL_main_action_l30c27 ||
	     WILL_FIRE_RL_main_action_l26c27 ||
	     WILL_FIRE_RL_main_action_l38c27 ||
	     WILL_FIRE_RL_main_action_l39c27 ||
	     WILL_FIRE_RL_main_action_l40c27 ||
	     WILL_FIRE_RL_main_action_l41c27 ||
	     WILL_FIRE_RL_main_action_l42c27 ||
	     WILL_FIRE_RL_main_action_l43c27 ;
  assign power12_power_fRequest$DEQ =
	     MUX_power12_power_rState$write_1__SEL_2 ;
  assign power12_power_fRequest$CLR = 1'b0 ;

  // submodule power12_power_fResponse
  assign power12_power_fResponse$D_IN =
	     { power12_power_vrReadData_7,
	       power12_power_vrReadData_6,
	       power12_power_vrReadData_5,
	       power12_power_vrReadData_4,
	       power12_power_vrReadData_3,
	       power12_power_vrReadData_2,
	       power12_power_vrReadData_1,
	       power12_power_vrReadData_0 } ;
  assign power12_power_fResponse$ENQ = WILL_FIRE_RL_power12_power_done_read ;
  assign power12_power_fResponse$DEQ =
	     WILL_FIRE_RL_main_action_l79c13 ||
	     WILL_FIRE_RL_main_action_l74c13 ||
	     WILL_FIRE_RL_main_action_l69c13 ||
	     WILL_FIRE_RL_main_action_l59c13 ||
	     WILL_FIRE_RL_main_action_l54c13 ||
	     WILL_FIRE_RL_main_action_l49c13 ;
  assign power12_power_fResponse$CLR = 1'b0 ;

  // submodule power12_power_rPlayIndex
  assign power12_power_rPlayIndex$DATA_A = 10'h0 ;
  assign power12_power_rPlayIndex$DATA_B = 10'd1023 ;
  assign power12_power_rPlayIndex$DATA_C = 10'h0 ;
  assign power12_power_rPlayIndex$DATA_F =
	     power12_power_fRequest$D_OUT[23] ? 10'd86 : 10'd116 ;
  assign power12_power_rPlayIndex$ADDA = 1'b0 ;
  assign power12_power_rPlayIndex$ADDB =
	     WILL_FIRE_RL_power12_power_done_write ||
	     WILL_FIRE_RL_power12_power_running_read ||
	     WILL_FIRE_RL_power12_power_running_write ;
  assign power12_power_rPlayIndex$SETC = 1'b0 ;
  assign power12_power_rPlayIndex$SETF =
	     MUX_power12_power_rState$write_1__SEL_2 ;

  // submodule power12_power_rPrescaler
  assign power12_power_rPrescaler$DATA_A = 32'h0 ;
  assign power12_power_rPrescaler$DATA_B = 32'hFFFFFFFF ;
  assign power12_power_rPrescaler$DATA_C = 32'h0 ;
  assign power12_power_rPrescaler$DATA_F = 32'd125 ;
  assign power12_power_rPrescaler$ADDA = 1'b0 ;
  assign power12_power_rPrescaler$ADDB =
	     power12_power_rPrescaler$Q_OUT != 32'd0 ;
  assign power12_power_rPrescaler$SETC = 1'b0 ;
  assign power12_power_rPrescaler$SETF =
	     power12_power_rPrescaler$Q_OUT == 32'd0 ;

  // remaining internal signals
  assign _121583396715528419856163987__q4 = 87'h6492492492492492492493 ;
  assign _130549178157447095380771276656813203__q5 =
	     117'h192492492492492E92492492492493 ;
  assign _154742503901866210315206599__q2 = 87'h7FFFFFF1FFFFFE3FFFFFC7 ;
  assign _166153498389916941667817601160445959__q3 =
	     117'h1FFFFFFC7FFFFF8FFFFFFE00000007 ;
  assign _306783360_BIT_power12_power_rPlayIndex_value___ETC___d108 =
	     _306783360__q1[power12_power_rPlayIndex$Q_OUT[6:0]] ;
  assign _306783360__q1 = 117'd306783360 ;
  assign a0__h1644 = {3{power12_power_rAddress[0]}} ;
  assign a1__h1643 = {3{power12_power_rAddress[1]}} ;
  assign a2__h1642 = {3{power12_power_rAddress[2]}} ;
  assign a3__h1641 = {3{power12_power_rAddress[3]}} ;
  assign a4__h1640 = {3{power12_power_rAddress[4]}} ;
  assign a5__h1639 = {3{power12_power_rAddress[5]}} ;
  assign a6__h1638 = {3{power12_power_rAddress[6]}} ;
  assign a7__h1637 = {3{power12_power_rAddress[7]}} ;
  assign d0__h1653 = {3{power12_power_rWriteData[0]}} ;
  assign d1__h1652 = {3{power12_power_rWriteData[1]}} ;
  assign d2__h1651 = {3{power12_power_rWriteData[2]}} ;
  assign d3__h1650 = {3{power12_power_rWriteData[3]}} ;
  assign d4__h1649 = {3{power12_power_rWriteData[4]}} ;
  assign d5__h1648 = {3{power12_power_rWriteData[5]}} ;
  assign d6__h1647 = {3{power12_power_rWriteData[6]}} ;
  assign d7__h1646 = {3{power12_power_rWriteData[7]}} ;
  assign main_abort_whas__35_AND_main_abort_wget__36_37_ETC___d261 =
	     main_state_mkFSMstate == 5'd0 &&
	     (!main_start_reg_1 || main_state_fired) ;
  assign s0__h1635 = {3{power12_power_rSlaveAddr[0]}} ;
  assign s1__h1634 = {3{power12_power_rSlaveAddr[1]}} ;
  assign s2__h1633 = {3{power12_power_rSlaveAddr[2]}} ;
  assign s3__h1632 = {3{power12_power_rSlaveAddr[3]}} ;
  assign s4__h1631 = {3{power12_power_rSlaveAddr[4]}} ;
  assign s5__h1630 = {3{power12_power_rSlaveAddr[5]}} ;
  assign s6__h1629 = {3{power12_power_rSlaveAddr[6]}} ;
  assign wRdData__h1655 =
	     { 3'b100,
	       s6__h1629,
	       s5__h1630,
	       s4__h1631,
	       s3__h1632,
	       s2__h1633,
	       s1__h1634,
	       s0__h1635,
	       6'd0,
	       a7__h1637,
	       a6__h1638,
	       a5__h1639,
	       a4__h1640,
	       a3__h1641,
	       a2__h1642,
	       a1__h1643,
	       a0__h1644,
	       6'd6,
	       s6__h1629,
	       s5__h1630,
	       s4__h1631,
	       s3__h1632,
	       s2__h1633,
	       s1__h1634,
	       s0__h1635,
	       36'hE00000001 } ;
  assign wWrData__h1659 =
	     { 3'b100,
	       s6__h1629,
	       s5__h1630,
	       s4__h1631,
	       s3__h1632,
	       s2__h1633,
	       s1__h1634,
	       s0__h1635,
	       6'd0,
	       a7__h1637,
	       a6__h1638,
	       a5__h1639,
	       a4__h1640,
	       a3__h1641,
	       a2__h1642,
	       a1__h1643,
	       a0__h1644,
	       3'b0,
	       d7__h1646,
	       d6__h1647,
	       d5__h1648,
	       d4__h1649,
	       d3__h1650,
	       d2__h1651,
	       d1__h1652,
	       d0__h1653,
	       6'd1 } ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cnt <= `BSV_ASSIGNMENT_DELAY 32'd50000000;
	cur_power_max <= `BSV_ASSIGNMENT_DELAY 24'd0;
	cur_power_min <= `BSV_ASSIGNMENT_DELAY 24'd0;
	main_start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	main_start_reg_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	main_state_can_overlap <= `BSV_ASSIGNMENT_DELAY 1'd1;
	main_state_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	main_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY 5'd0;
	power12_power_rOutEn <= `BSV_ASSIGNMENT_DELAY 1'd1;
	power12_power_rSCL <= `BSV_ASSIGNMENT_DELAY 1'd1;
	power12_power_rSDA <= `BSV_ASSIGNMENT_DELAY 1'd1;
	power12_power_rState <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (cnt$EN) cnt <= `BSV_ASSIGNMENT_DELAY cnt$D_IN;
	if (cur_power_max$EN)
	  cur_power_max <= `BSV_ASSIGNMENT_DELAY cur_power_max$D_IN;
	if (cur_power_min$EN)
	  cur_power_min <= `BSV_ASSIGNMENT_DELAY cur_power_min$D_IN;
	if (main_start_reg$EN)
	  main_start_reg <= `BSV_ASSIGNMENT_DELAY main_start_reg$D_IN;
	if (main_start_reg_1$EN)
	  main_start_reg_1 <= `BSV_ASSIGNMENT_DELAY main_start_reg_1$D_IN;
	if (main_state_can_overlap$EN)
	  main_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	      main_state_can_overlap$D_IN;
	if (main_state_fired$EN)
	  main_state_fired <= `BSV_ASSIGNMENT_DELAY main_state_fired$D_IN;
	if (main_state_mkFSMstate$EN)
	  main_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	      main_state_mkFSMstate$D_IN;
	if (power12_power_rOutEn$EN)
	  power12_power_rOutEn <= `BSV_ASSIGNMENT_DELAY
	      power12_power_rOutEn$D_IN;
	if (power12_power_rSCL$EN)
	  power12_power_rSCL <= `BSV_ASSIGNMENT_DELAY power12_power_rSCL$D_IN;
	if (power12_power_rSDA$EN)
	  power12_power_rSDA <= `BSV_ASSIGNMENT_DELAY power12_power_rSDA$D_IN;
	if (power12_power_rState$EN)
	  power12_power_rState <= `BSV_ASSIGNMENT_DELAY
	      power12_power_rState$D_IN;
      end
    if (power12_power_rAddress$EN)
      power12_power_rAddress <= `BSV_ASSIGNMENT_DELAY
	  power12_power_rAddress$D_IN;
    if (power12_power_rSlaveAddr$EN)
      power12_power_rSlaveAddr <= `BSV_ASSIGNMENT_DELAY
	  power12_power_rSlaveAddr$D_IN;
    if (power12_power_rWrite$EN)
      power12_power_rWrite <= `BSV_ASSIGNMENT_DELAY power12_power_rWrite$D_IN;
    if (power12_power_rWriteData$EN)
      power12_power_rWriteData <= `BSV_ASSIGNMENT_DELAY
	  power12_power_rWriteData$D_IN;
    if (power12_power_vrReadData_0$EN)
      power12_power_vrReadData_0 <= `BSV_ASSIGNMENT_DELAY
	  power12_power_vrReadData_0$D_IN;
    if (power12_power_vrReadData_1$EN)
      power12_power_vrReadData_1 <= `BSV_ASSIGNMENT_DELAY
	  power12_power_vrReadData_1$D_IN;
    if (power12_power_vrReadData_2$EN)
      power12_power_vrReadData_2 <= `BSV_ASSIGNMENT_DELAY
	  power12_power_vrReadData_2$D_IN;
    if (power12_power_vrReadData_3$EN)
      power12_power_vrReadData_3 <= `BSV_ASSIGNMENT_DELAY
	  power12_power_vrReadData_3$D_IN;
    if (power12_power_vrReadData_4$EN)
      power12_power_vrReadData_4 <= `BSV_ASSIGNMENT_DELAY
	  power12_power_vrReadData_4$D_IN;
    if (power12_power_vrReadData_5$EN)
      power12_power_vrReadData_5 <= `BSV_ASSIGNMENT_DELAY
	  power12_power_vrReadData_5$D_IN;
    if (power12_power_vrReadData_6$EN)
      power12_power_vrReadData_6 <= `BSV_ASSIGNMENT_DELAY
	  power12_power_vrReadData_6$D_IN;
    if (power12_power_vrReadData_7$EN)
      power12_power_vrReadData_7 <= `BSV_ASSIGNMENT_DELAY
	  power12_power_vrReadData_7$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cnt = 32'hAAAAAAAA;
    cur_power_max = 24'hAAAAAA;
    cur_power_min = 24'hAAAAAA;
    main_start_reg = 1'h0;
    main_start_reg_1 = 1'h0;
    main_state_can_overlap = 1'h0;
    main_state_fired = 1'h0;
    main_state_mkFSMstate = 5'h0A;
    power12_power_rAddress = 8'hAA;
    power12_power_rOutEn = 1'h0;
    power12_power_rSCL = 1'h0;
    power12_power_rSDA = 1'h0;
    power12_power_rSlaveAddr = 7'h2A;
    power12_power_rState = 1'h0;
    power12_power_rWrite = 1'h0;
    power12_power_rWriteData = 8'hAA;
    power12_power_vrReadData_0 = 1'h0;
    power12_power_vrReadData_1 = 1'h0;
    power12_power_vrReadData_2 = 1'h0;
    power12_power_vrReadData_3 = 1'h0;
    power12_power_vrReadData_4 = 1'h0;
    power12_power_vrReadData_5 = 1'h0;
    power12_power_vrReadData_6 = 1'h0;
    power12_power_vrReadData_7 = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_main_action_l25c27 &&
	  (WILL_FIRE_RL_main_action_l26c27 ||
	   WILL_FIRE_RL_main_action_l30c27 ||
	   WILL_FIRE_RL_main_action_l48c26 ||
	   WILL_FIRE_RL_main_action_l49c13 ||
	   WILL_FIRE_RL_main_action_l53c26 ||
	   WILL_FIRE_RL_main_action_l54c13 ||
	   WILL_FIRE_RL_main_action_l58c26 ||
	   WILL_FIRE_RL_main_action_l59c13 ||
	   WILL_FIRE_RL_main_action_l68c26 ||
	   WILL_FIRE_RL_main_action_l69c13 ||
	   WILL_FIRE_RL_main_action_l73c26 ||
	   WILL_FIRE_RL_main_action_l74c13 ||
	   WILL_FIRE_RL_main_action_l78c26 ||
	   WILL_FIRE_RL_main_action_l79c13 ||
	   WILL_FIRE_RL_main_action_l38c27 ||
	   WILL_FIRE_RL_main_action_l39c27 ||
	   WILL_FIRE_RL_main_action_l40c27 ||
	   WILL_FIRE_RL_main_action_l41c27 ||
	   WILL_FIRE_RL_main_action_l42c27 ||
	   WILL_FIRE_RL_main_action_l43c27 ||
	   WILL_FIRE_RL_main_action_l34c27 ||
	   main_state_mkFSMstate == 5'd23 ||
	   WILL_FIRE_RL_main_action_l132c18))
	$display("Error: \"DE10-I2C-devices/Power.bsv\", line 25, column 27: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_main_action_l25c27] and\n  [RL_main_action_l26c27, RL_main_action_l30c27, RL_main_action_l48c26,\n  RL_main_action_l49c13, RL_main_action_l53c26, RL_main_action_l54c13,\n  RL_main_action_l58c26, RL_main_action_l59c13, RL_main_action_l68c26,\n  RL_main_action_l69c13, RL_main_action_l73c26, RL_main_action_l74c13,\n  RL_main_action_l78c26, RL_main_action_l79c13, RL_main_action_l38c27,\n  RL_main_action_l39c27, RL_main_action_l40c27, RL_main_action_l41c27,\n  RL_main_action_l42c27, RL_main_action_l43c27, RL_main_action_l34c27,\n  RL_main_action_l131c15, RL_main_action_l132c18] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_main_action_l26c27 &&
	  (WILL_FIRE_RL_main_action_l30c27 ||
	   WILL_FIRE_RL_main_action_l48c26 ||
	   WILL_FIRE_RL_main_action_l49c13 ||
	   WILL_FIRE_RL_main_action_l53c26 ||
	   WILL_FIRE_RL_main_action_l54c13 ||
	   WILL_FIRE_RL_main_action_l58c26 ||
	   WILL_FIRE_RL_main_action_l59c13 ||
	   WILL_FIRE_RL_main_action_l68c26 ||
	   WILL_FIRE_RL_main_action_l69c13 ||
	   WILL_FIRE_RL_main_action_l73c26 ||
	   WILL_FIRE_RL_main_action_l74c13 ||
	   WILL_FIRE_RL_main_action_l78c26 ||
	   WILL_FIRE_RL_main_action_l79c13 ||
	   WILL_FIRE_RL_main_action_l38c27 ||
	   WILL_FIRE_RL_main_action_l39c27 ||
	   WILL_FIRE_RL_main_action_l40c27 ||
	   WILL_FIRE_RL_main_action_l41c27 ||
	   WILL_FIRE_RL_main_action_l42c27 ||
	   WILL_FIRE_RL_main_action_l43c27 ||
	   WILL_FIRE_RL_main_action_l34c27 ||
	   main_state_mkFSMstate == 5'd23 ||
	   WILL_FIRE_RL_main_action_l132c18))
	$display("Error: \"DE10-I2C-devices/Power.bsv\", line 26, column 27: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_main_action_l26c27] and\n  [RL_main_action_l30c27, RL_main_action_l48c26, RL_main_action_l49c13,\n  RL_main_action_l53c26, RL_main_action_l54c13, RL_main_action_l58c26,\n  RL_main_action_l59c13, RL_main_action_l68c26, RL_main_action_l69c13,\n  RL_main_action_l73c26, RL_main_action_l74c13, RL_main_action_l78c26,\n  RL_main_action_l79c13, RL_main_action_l38c27, RL_main_action_l39c27,\n  RL_main_action_l40c27, RL_main_action_l41c27, RL_main_action_l42c27,\n  RL_main_action_l43c27, RL_main_action_l34c27, RL_main_action_l131c15,\n  RL_main_action_l132c18] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_main_action_l30c27 &&
	  (WILL_FIRE_RL_main_action_l48c26 ||
	   WILL_FIRE_RL_main_action_l49c13 ||
	   WILL_FIRE_RL_main_action_l53c26 ||
	   WILL_FIRE_RL_main_action_l54c13 ||
	   WILL_FIRE_RL_main_action_l58c26 ||
	   WILL_FIRE_RL_main_action_l59c13 ||
	   WILL_FIRE_RL_main_action_l68c26 ||
	   WILL_FIRE_RL_main_action_l69c13 ||
	   WILL_FIRE_RL_main_action_l73c26 ||
	   WILL_FIRE_RL_main_action_l74c13 ||
	   WILL_FIRE_RL_main_action_l78c26 ||
	   WILL_FIRE_RL_main_action_l79c13 ||
	   WILL_FIRE_RL_main_action_l38c27 ||
	   WILL_FIRE_RL_main_action_l39c27 ||
	   WILL_FIRE_RL_main_action_l40c27 ||
	   WILL_FIRE_RL_main_action_l41c27 ||
	   WILL_FIRE_RL_main_action_l42c27 ||
	   WILL_FIRE_RL_main_action_l43c27 ||
	   WILL_FIRE_RL_main_action_l34c27 ||
	   main_state_mkFSMstate == 5'd23 ||
	   WILL_FIRE_RL_main_action_l132c18))
	$display("Error: \"DE10-I2C-devices/Power.bsv\", line 30, column 27: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_main_action_l30c27] and\n  [RL_main_action_l48c26, RL_main_action_l49c13, RL_main_action_l53c26,\n  RL_main_action_l54c13, RL_main_action_l58c26, RL_main_action_l59c13,\n  RL_main_action_l68c26, RL_main_action_l69c13, RL_main_action_l73c26,\n  RL_main_action_l74c13, RL_main_action_l78c26, RL_main_action_l79c13,\n  RL_main_action_l38c27, RL_main_action_l39c27, RL_main_action_l40c27,\n  RL_main_action_l41c27, RL_main_action_l42c27, RL_main_action_l43c27,\n  RL_main_action_l34c27, RL_main_action_l131c15, RL_main_action_l132c18] )\n  fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_main_action_l48c26 &&
	  (WILL_FIRE_RL_main_action_l49c13 ||
	   WILL_FIRE_RL_main_action_l53c26 ||
	   WILL_FIRE_RL_main_action_l54c13 ||
	   WILL_FIRE_RL_main_action_l58c26 ||
	   WILL_FIRE_RL_main_action_l59c13 ||
	   WILL_FIRE_RL_main_action_l68c26 ||
	   WILL_FIRE_RL_main_action_l69c13 ||
	   WILL_FIRE_RL_main_action_l73c26 ||
	   WILL_FIRE_RL_main_action_l74c13 ||
	   WILL_FIRE_RL_main_action_l78c26 ||
	   WILL_FIRE_RL_main_action_l79c13 ||
	   WILL_FIRE_RL_main_action_l38c27 ||
	   WILL_FIRE_RL_main_action_l39c27 ||
	   WILL_FIRE_RL_main_action_l40c27 ||
	   WILL_FIRE_RL_main_action_l41c27 ||
	   WILL_FIRE_RL_main_action_l42c27 ||
	   WILL_FIRE_RL_main_action_l43c27 ||
	   WILL_FIRE_RL_main_action_l34c27 ||
	   main_state_mkFSMstate == 5'd23 ||
	   WILL_FIRE_RL_main_action_l132c18))
	$display("Error: \"DE10-I2C-devices/Power.bsv\", line 48, column 26: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_main_action_l48c26] and\n  [RL_main_action_l49c13, RL_main_action_l53c26, RL_main_action_l54c13,\n  RL_main_action_l58c26, RL_main_action_l59c13, RL_main_action_l68c26,\n  RL_main_action_l69c13, RL_main_action_l73c26, RL_main_action_l74c13,\n  RL_main_action_l78c26, RL_main_action_l79c13, RL_main_action_l38c27,\n  RL_main_action_l39c27, RL_main_action_l40c27, RL_main_action_l41c27,\n  RL_main_action_l42c27, RL_main_action_l43c27, RL_main_action_l34c27,\n  RL_main_action_l131c15, RL_main_action_l132c18] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_main_action_l49c13 &&
	  (WILL_FIRE_RL_main_action_l53c26 ||
	   WILL_FIRE_RL_main_action_l54c13 ||
	   WILL_FIRE_RL_main_action_l58c26 ||
	   WILL_FIRE_RL_main_action_l59c13 ||
	   WILL_FIRE_RL_main_action_l68c26 ||
	   WILL_FIRE_RL_main_action_l69c13 ||
	   WILL_FIRE_RL_main_action_l73c26 ||
	   WILL_FIRE_RL_main_action_l74c13 ||
	   WILL_FIRE_RL_main_action_l78c26 ||
	   WILL_FIRE_RL_main_action_l79c13 ||
	   WILL_FIRE_RL_main_action_l38c27 ||
	   WILL_FIRE_RL_main_action_l39c27 ||
	   WILL_FIRE_RL_main_action_l40c27 ||
	   WILL_FIRE_RL_main_action_l41c27 ||
	   WILL_FIRE_RL_main_action_l42c27 ||
	   WILL_FIRE_RL_main_action_l43c27 ||
	   WILL_FIRE_RL_main_action_l34c27 ||
	   main_state_mkFSMstate == 5'd23 ||
	   WILL_FIRE_RL_main_action_l132c18))
	$display("Error: \"DE10-I2C-devices/Power.bsv\", line 49, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_main_action_l49c13] and\n  [RL_main_action_l53c26, RL_main_action_l54c13, RL_main_action_l58c26,\n  RL_main_action_l59c13, RL_main_action_l68c26, RL_main_action_l69c13,\n  RL_main_action_l73c26, RL_main_action_l74c13, RL_main_action_l78c26,\n  RL_main_action_l79c13, RL_main_action_l38c27, RL_main_action_l39c27,\n  RL_main_action_l40c27, RL_main_action_l41c27, RL_main_action_l42c27,\n  RL_main_action_l43c27, RL_main_action_l34c27, RL_main_action_l131c15,\n  RL_main_action_l132c18] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_main_action_l53c26 &&
	  (WILL_FIRE_RL_main_action_l54c13 ||
	   WILL_FIRE_RL_main_action_l58c26 ||
	   WILL_FIRE_RL_main_action_l59c13 ||
	   WILL_FIRE_RL_main_action_l68c26 ||
	   WILL_FIRE_RL_main_action_l69c13 ||
	   WILL_FIRE_RL_main_action_l73c26 ||
	   WILL_FIRE_RL_main_action_l74c13 ||
	   WILL_FIRE_RL_main_action_l78c26 ||
	   WILL_FIRE_RL_main_action_l79c13 ||
	   WILL_FIRE_RL_main_action_l38c27 ||
	   WILL_FIRE_RL_main_action_l39c27 ||
	   WILL_FIRE_RL_main_action_l40c27 ||
	   WILL_FIRE_RL_main_action_l41c27 ||
	   WILL_FIRE_RL_main_action_l42c27 ||
	   WILL_FIRE_RL_main_action_l43c27 ||
	   WILL_FIRE_RL_main_action_l34c27 ||
	   main_state_mkFSMstate == 5'd23 ||
	   WILL_FIRE_RL_main_action_l132c18))
	$display("Error: \"DE10-I2C-devices/Power.bsv\", line 53, column 26: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_main_action_l53c26] and\n  [RL_main_action_l54c13, RL_main_action_l58c26, RL_main_action_l59c13,\n  RL_main_action_l68c26, RL_main_action_l69c13, RL_main_action_l73c26,\n  RL_main_action_l74c13, RL_main_action_l78c26, RL_main_action_l79c13,\n  RL_main_action_l38c27, RL_main_action_l39c27, RL_main_action_l40c27,\n  RL_main_action_l41c27, RL_main_action_l42c27, RL_main_action_l43c27,\n  RL_main_action_l34c27, RL_main_action_l131c15, RL_main_action_l132c18] )\n  fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_main_action_l58c26 &&
	  (WILL_FIRE_RL_main_action_l59c13 ||
	   WILL_FIRE_RL_main_action_l68c26 ||
	   WILL_FIRE_RL_main_action_l69c13 ||
	   WILL_FIRE_RL_main_action_l73c26 ||
	   WILL_FIRE_RL_main_action_l74c13 ||
	   WILL_FIRE_RL_main_action_l78c26 ||
	   WILL_FIRE_RL_main_action_l79c13 ||
	   WILL_FIRE_RL_main_action_l38c27 ||
	   WILL_FIRE_RL_main_action_l39c27 ||
	   WILL_FIRE_RL_main_action_l40c27 ||
	   WILL_FIRE_RL_main_action_l41c27 ||
	   WILL_FIRE_RL_main_action_l42c27 ||
	   WILL_FIRE_RL_main_action_l43c27 ||
	   WILL_FIRE_RL_main_action_l34c27 ||
	   main_state_mkFSMstate == 5'd23 ||
	   WILL_FIRE_RL_main_action_l132c18))
	$display("Error: \"DE10-I2C-devices/Power.bsv\", line 58, column 26: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_main_action_l58c26] and\n  [RL_main_action_l59c13, RL_main_action_l68c26, RL_main_action_l69c13,\n  RL_main_action_l73c26, RL_main_action_l74c13, RL_main_action_l78c26,\n  RL_main_action_l79c13, RL_main_action_l38c27, RL_main_action_l39c27,\n  RL_main_action_l40c27, RL_main_action_l41c27, RL_main_action_l42c27,\n  RL_main_action_l43c27, RL_main_action_l34c27, RL_main_action_l131c15,\n  RL_main_action_l132c18] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_main_action_l54c13 &&
	  (WILL_FIRE_RL_main_action_l58c26 ||
	   WILL_FIRE_RL_main_action_l59c13 ||
	   WILL_FIRE_RL_main_action_l68c26 ||
	   WILL_FIRE_RL_main_action_l69c13 ||
	   WILL_FIRE_RL_main_action_l73c26 ||
	   WILL_FIRE_RL_main_action_l74c13 ||
	   WILL_FIRE_RL_main_action_l78c26 ||
	   WILL_FIRE_RL_main_action_l79c13 ||
	   WILL_FIRE_RL_main_action_l38c27 ||
	   WILL_FIRE_RL_main_action_l39c27 ||
	   WILL_FIRE_RL_main_action_l40c27 ||
	   WILL_FIRE_RL_main_action_l41c27 ||
	   WILL_FIRE_RL_main_action_l42c27 ||
	   WILL_FIRE_RL_main_action_l43c27 ||
	   WILL_FIRE_RL_main_action_l34c27 ||
	   main_state_mkFSMstate == 5'd23 ||
	   WILL_FIRE_RL_main_action_l132c18))
	$display("Error: \"DE10-I2C-devices/Power.bsv\", line 54, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_main_action_l54c13] and\n  [RL_main_action_l58c26, RL_main_action_l59c13, RL_main_action_l68c26,\n  RL_main_action_l69c13, RL_main_action_l73c26, RL_main_action_l74c13,\n  RL_main_action_l78c26, RL_main_action_l79c13, RL_main_action_l38c27,\n  RL_main_action_l39c27, RL_main_action_l40c27, RL_main_action_l41c27,\n  RL_main_action_l42c27, RL_main_action_l43c27, RL_main_action_l34c27,\n  RL_main_action_l131c15, RL_main_action_l132c18] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_main_action_l59c13 &&
	  (WILL_FIRE_RL_main_action_l68c26 ||
	   WILL_FIRE_RL_main_action_l69c13 ||
	   WILL_FIRE_RL_main_action_l73c26 ||
	   WILL_FIRE_RL_main_action_l74c13 ||
	   WILL_FIRE_RL_main_action_l78c26 ||
	   WILL_FIRE_RL_main_action_l79c13 ||
	   WILL_FIRE_RL_main_action_l38c27 ||
	   WILL_FIRE_RL_main_action_l39c27 ||
	   WILL_FIRE_RL_main_action_l40c27 ||
	   WILL_FIRE_RL_main_action_l41c27 ||
	   WILL_FIRE_RL_main_action_l42c27 ||
	   WILL_FIRE_RL_main_action_l43c27 ||
	   WILL_FIRE_RL_main_action_l34c27 ||
	   main_state_mkFSMstate == 5'd23 ||
	   WILL_FIRE_RL_main_action_l132c18))
	$display("Error: \"DE10-I2C-devices/Power.bsv\", line 59, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_main_action_l59c13] and\n  [RL_main_action_l68c26, RL_main_action_l69c13, RL_main_action_l73c26,\n  RL_main_action_l74c13, RL_main_action_l78c26, RL_main_action_l79c13,\n  RL_main_action_l38c27, RL_main_action_l39c27, RL_main_action_l40c27,\n  RL_main_action_l41c27, RL_main_action_l42c27, RL_main_action_l43c27,\n  RL_main_action_l34c27, RL_main_action_l131c15, RL_main_action_l132c18] )\n  fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_main_action_l68c26 &&
	  (WILL_FIRE_RL_main_action_l69c13 ||
	   WILL_FIRE_RL_main_action_l73c26 ||
	   WILL_FIRE_RL_main_action_l74c13 ||
	   WILL_FIRE_RL_main_action_l78c26 ||
	   WILL_FIRE_RL_main_action_l79c13 ||
	   WILL_FIRE_RL_main_action_l38c27 ||
	   WILL_FIRE_RL_main_action_l39c27 ||
	   WILL_FIRE_RL_main_action_l40c27 ||
	   WILL_FIRE_RL_main_action_l41c27 ||
	   WILL_FIRE_RL_main_action_l42c27 ||
	   WILL_FIRE_RL_main_action_l43c27 ||
	   WILL_FIRE_RL_main_action_l34c27 ||
	   main_state_mkFSMstate == 5'd23 ||
	   WILL_FIRE_RL_main_action_l132c18))
	$display("Error: \"DE10-I2C-devices/Power.bsv\", line 68, column 26: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_main_action_l68c26] and\n  [RL_main_action_l69c13, RL_main_action_l73c26, RL_main_action_l74c13,\n  RL_main_action_l78c26, RL_main_action_l79c13, RL_main_action_l38c27,\n  RL_main_action_l39c27, RL_main_action_l40c27, RL_main_action_l41c27,\n  RL_main_action_l42c27, RL_main_action_l43c27, RL_main_action_l34c27,\n  RL_main_action_l131c15, RL_main_action_l132c18] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_main_action_l69c13 &&
	  (WILL_FIRE_RL_main_action_l73c26 ||
	   WILL_FIRE_RL_main_action_l74c13 ||
	   WILL_FIRE_RL_main_action_l78c26 ||
	   WILL_FIRE_RL_main_action_l79c13 ||
	   WILL_FIRE_RL_main_action_l38c27 ||
	   WILL_FIRE_RL_main_action_l39c27 ||
	   WILL_FIRE_RL_main_action_l40c27 ||
	   WILL_FIRE_RL_main_action_l41c27 ||
	   WILL_FIRE_RL_main_action_l42c27 ||
	   WILL_FIRE_RL_main_action_l43c27 ||
	   WILL_FIRE_RL_main_action_l34c27 ||
	   main_state_mkFSMstate == 5'd23 ||
	   WILL_FIRE_RL_main_action_l132c18))
	$display("Error: \"DE10-I2C-devices/Power.bsv\", line 69, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_main_action_l69c13] and\n  [RL_main_action_l73c26, RL_main_action_l74c13, RL_main_action_l78c26,\n  RL_main_action_l79c13, RL_main_action_l38c27, RL_main_action_l39c27,\n  RL_main_action_l40c27, RL_main_action_l41c27, RL_main_action_l42c27,\n  RL_main_action_l43c27, RL_main_action_l34c27, RL_main_action_l131c15,\n  RL_main_action_l132c18] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_main_action_l73c26 &&
	  (WILL_FIRE_RL_main_action_l74c13 ||
	   WILL_FIRE_RL_main_action_l78c26 ||
	   WILL_FIRE_RL_main_action_l79c13 ||
	   WILL_FIRE_RL_main_action_l38c27 ||
	   WILL_FIRE_RL_main_action_l39c27 ||
	   WILL_FIRE_RL_main_action_l40c27 ||
	   WILL_FIRE_RL_main_action_l41c27 ||
	   WILL_FIRE_RL_main_action_l42c27 ||
	   WILL_FIRE_RL_main_action_l43c27 ||
	   WILL_FIRE_RL_main_action_l34c27 ||
	   main_state_mkFSMstate == 5'd23 ||
	   WILL_FIRE_RL_main_action_l132c18))
	$display("Error: \"DE10-I2C-devices/Power.bsv\", line 73, column 26: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_main_action_l73c26] and\n  [RL_main_action_l74c13, RL_main_action_l78c26, RL_main_action_l79c13,\n  RL_main_action_l38c27, RL_main_action_l39c27, RL_main_action_l40c27,\n  RL_main_action_l41c27, RL_main_action_l42c27, RL_main_action_l43c27,\n  RL_main_action_l34c27, RL_main_action_l131c15, RL_main_action_l132c18] )\n  fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_main_action_l74c13 &&
	  (WILL_FIRE_RL_main_action_l78c26 ||
	   WILL_FIRE_RL_main_action_l79c13 ||
	   WILL_FIRE_RL_main_action_l38c27 ||
	   WILL_FIRE_RL_main_action_l39c27 ||
	   WILL_FIRE_RL_main_action_l40c27 ||
	   WILL_FIRE_RL_main_action_l41c27 ||
	   WILL_FIRE_RL_main_action_l42c27 ||
	   WILL_FIRE_RL_main_action_l43c27 ||
	   WILL_FIRE_RL_main_action_l34c27 ||
	   main_state_mkFSMstate == 5'd23 ||
	   WILL_FIRE_RL_main_action_l132c18))
	$display("Error: \"DE10-I2C-devices/Power.bsv\", line 74, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_main_action_l74c13] and\n  [RL_main_action_l78c26, RL_main_action_l79c13, RL_main_action_l38c27,\n  RL_main_action_l39c27, RL_main_action_l40c27, RL_main_action_l41c27,\n  RL_main_action_l42c27, RL_main_action_l43c27, RL_main_action_l34c27,\n  RL_main_action_l131c15, RL_main_action_l132c18] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_main_action_l78c26 &&
	  (WILL_FIRE_RL_main_action_l79c13 ||
	   WILL_FIRE_RL_main_action_l38c27 ||
	   WILL_FIRE_RL_main_action_l39c27 ||
	   WILL_FIRE_RL_main_action_l40c27 ||
	   WILL_FIRE_RL_main_action_l41c27 ||
	   WILL_FIRE_RL_main_action_l42c27 ||
	   WILL_FIRE_RL_main_action_l43c27 ||
	   WILL_FIRE_RL_main_action_l34c27 ||
	   main_state_mkFSMstate == 5'd23 ||
	   WILL_FIRE_RL_main_action_l132c18))
	$display("Error: \"DE10-I2C-devices/Power.bsv\", line 78, column 26: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_main_action_l78c26] and\n  [RL_main_action_l79c13, RL_main_action_l38c27, RL_main_action_l39c27,\n  RL_main_action_l40c27, RL_main_action_l41c27, RL_main_action_l42c27,\n  RL_main_action_l43c27, RL_main_action_l34c27, RL_main_action_l131c15,\n  RL_main_action_l132c18] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_main_action_l79c13 &&
	  (WILL_FIRE_RL_main_action_l38c27 ||
	   WILL_FIRE_RL_main_action_l39c27 ||
	   WILL_FIRE_RL_main_action_l40c27 ||
	   WILL_FIRE_RL_main_action_l41c27 ||
	   WILL_FIRE_RL_main_action_l42c27 ||
	   WILL_FIRE_RL_main_action_l43c27 ||
	   WILL_FIRE_RL_main_action_l34c27 ||
	   main_state_mkFSMstate == 5'd23 ||
	   WILL_FIRE_RL_main_action_l132c18))
	$display("Error: \"DE10-I2C-devices/Power.bsv\", line 79, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_main_action_l79c13] and\n  [RL_main_action_l38c27, RL_main_action_l39c27, RL_main_action_l40c27,\n  RL_main_action_l41c27, RL_main_action_l42c27, RL_main_action_l43c27,\n  RL_main_action_l34c27, RL_main_action_l131c15, RL_main_action_l132c18] )\n  fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_main_action_l38c27 &&
	  (WILL_FIRE_RL_main_action_l39c27 ||
	   WILL_FIRE_RL_main_action_l40c27 ||
	   WILL_FIRE_RL_main_action_l41c27 ||
	   WILL_FIRE_RL_main_action_l42c27 ||
	   WILL_FIRE_RL_main_action_l43c27 ||
	   WILL_FIRE_RL_main_action_l34c27 ||
	   main_state_mkFSMstate == 5'd23 ||
	   WILL_FIRE_RL_main_action_l132c18))
	$display("Error: \"DE10-I2C-devices/Power.bsv\", line 38, column 27: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_main_action_l38c27] and\n  [RL_main_action_l39c27, RL_main_action_l40c27, RL_main_action_l41c27,\n  RL_main_action_l42c27, RL_main_action_l43c27, RL_main_action_l34c27,\n  RL_main_action_l131c15, RL_main_action_l132c18] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_main_action_l39c27 &&
	  (WILL_FIRE_RL_main_action_l40c27 ||
	   WILL_FIRE_RL_main_action_l41c27 ||
	   WILL_FIRE_RL_main_action_l42c27 ||
	   WILL_FIRE_RL_main_action_l43c27 ||
	   WILL_FIRE_RL_main_action_l34c27 ||
	   main_state_mkFSMstate == 5'd23 ||
	   WILL_FIRE_RL_main_action_l132c18))
	$display("Error: \"DE10-I2C-devices/Power.bsv\", line 39, column 27: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_main_action_l39c27] and\n  [RL_main_action_l40c27, RL_main_action_l41c27, RL_main_action_l42c27,\n  RL_main_action_l43c27, RL_main_action_l34c27, RL_main_action_l131c15,\n  RL_main_action_l132c18] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_main_action_l40c27 &&
	  (WILL_FIRE_RL_main_action_l41c27 ||
	   WILL_FIRE_RL_main_action_l42c27 ||
	   WILL_FIRE_RL_main_action_l43c27 ||
	   WILL_FIRE_RL_main_action_l34c27 ||
	   main_state_mkFSMstate == 5'd23 ||
	   WILL_FIRE_RL_main_action_l132c18))
	$display("Error: \"DE10-I2C-devices/Power.bsv\", line 40, column 27: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_main_action_l40c27] and\n  [RL_main_action_l41c27, RL_main_action_l42c27, RL_main_action_l43c27,\n  RL_main_action_l34c27, RL_main_action_l131c15, RL_main_action_l132c18] )\n  fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_main_action_l41c27 &&
	  (WILL_FIRE_RL_main_action_l42c27 ||
	   WILL_FIRE_RL_main_action_l43c27 ||
	   WILL_FIRE_RL_main_action_l34c27 ||
	   main_state_mkFSMstate == 5'd23 ||
	   WILL_FIRE_RL_main_action_l132c18))
	$display("Error: \"DE10-I2C-devices/Power.bsv\", line 41, column 27: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_main_action_l41c27] and\n  [RL_main_action_l42c27, RL_main_action_l43c27, RL_main_action_l34c27,\n  RL_main_action_l131c15, RL_main_action_l132c18] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_main_action_l43c27 &&
	  (WILL_FIRE_RL_main_action_l34c27 ||
	   main_state_mkFSMstate == 5'd23 ||
	   WILL_FIRE_RL_main_action_l132c18))
	$display("Error: \"DE10-I2C-devices/Power.bsv\", line 43, column 27: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_main_action_l43c27] and\n  [RL_main_action_l34c27, RL_main_action_l131c15, RL_main_action_l132c18] )\n  fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_main_action_l42c27 &&
	  (WILL_FIRE_RL_main_action_l43c27 ||
	   WILL_FIRE_RL_main_action_l34c27 ||
	   main_state_mkFSMstate == 5'd23 ||
	   WILL_FIRE_RL_main_action_l132c18))
	$display("Error: \"DE10-I2C-devices/Power.bsv\", line 42, column 27: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_main_action_l42c27] and\n  [RL_main_action_l43c27, RL_main_action_l34c27, RL_main_action_l131c15,\n  RL_main_action_l132c18] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_main_action_l34c27 &&
	  (main_state_mkFSMstate == 5'd23 ||
	   WILL_FIRE_RL_main_action_l132c18))
	$display("Error: \"DE10-I2C-devices/Power.bsv\", line 34, column 27: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_main_action_l34c27] and\n  [RL_main_action_l131c15, RL_main_action_l132c18] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (main_state_mkFSMstate == 5'd23 && WILL_FIRE_RL_main_action_l132c18)
	$display("Error: \"DE10-I2C-devices/Power.bsv\", line 131, column 15: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_main_action_l131c15] and\n  [RL_main_action_l132c18] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_main_action_l123c14 &&
	  (WILL_FIRE_RL_main_action_l25c27 ||
	   WILL_FIRE_RL_main_action_l26c27 ||
	   WILL_FIRE_RL_main_action_l30c27 ||
	   WILL_FIRE_RL_main_action_l48c26 ||
	   WILL_FIRE_RL_main_action_l49c13 ||
	   WILL_FIRE_RL_main_action_l53c26 ||
	   WILL_FIRE_RL_main_action_l54c13 ||
	   WILL_FIRE_RL_main_action_l58c26 ||
	   WILL_FIRE_RL_main_action_l59c13 ||
	   WILL_FIRE_RL_main_action_l68c26 ||
	   WILL_FIRE_RL_main_action_l69c13 ||
	   WILL_FIRE_RL_main_action_l73c26 ||
	   WILL_FIRE_RL_main_action_l74c13 ||
	   WILL_FIRE_RL_main_action_l78c26 ||
	   WILL_FIRE_RL_main_action_l79c13 ||
	   WILL_FIRE_RL_main_action_l38c27 ||
	   WILL_FIRE_RL_main_action_l39c27 ||
	   WILL_FIRE_RL_main_action_l40c27 ||
	   WILL_FIRE_RL_main_action_l41c27 ||
	   WILL_FIRE_RL_main_action_l42c27 ||
	   WILL_FIRE_RL_main_action_l43c27 ||
	   WILL_FIRE_RL_main_action_l34c27 ||
	   main_state_mkFSMstate == 5'd23 ||
	   WILL_FIRE_RL_main_action_l132c18))
	$display("Error: \"DE10-I2C-devices/Power.bsv\", line 123, column 14: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_main_action_l123c14] and\n  [RL_main_action_l25c27, RL_main_action_l26c27, RL_main_action_l30c27,\n  RL_main_action_l48c26, RL_main_action_l49c13, RL_main_action_l53c26,\n  RL_main_action_l54c13, RL_main_action_l58c26, RL_main_action_l59c13,\n  RL_main_action_l68c26, RL_main_action_l69c13, RL_main_action_l73c26,\n  RL_main_action_l74c13, RL_main_action_l78c26, RL_main_action_l79c13,\n  RL_main_action_l38c27, RL_main_action_l39c27, RL_main_action_l40c27,\n  RL_main_action_l41c27, RL_main_action_l42c27, RL_main_action_l43c27,\n  RL_main_action_l34c27, RL_main_action_l131c15, RL_main_action_l132c18] )\n  fired in the same clock cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkPowerReader

